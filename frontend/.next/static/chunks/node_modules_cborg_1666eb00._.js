(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/cborg/lib/is.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// This is an unfortunate replacement for @sindresorhus/is that we need to
// re-implement for performance purposes. In particular the is.observable()
// check is expensive, and unnecessary for our purposes. The values returned
// are compatible with @sindresorhus/is, however.
__turbopack_context__.s({
    "is": (()=>is)
});
const typeofs = [
    'string',
    'number',
    'bigint',
    'symbol'
];
const objectTypeNames = [
    'Function',
    'Generator',
    'AsyncGenerator',
    'GeneratorFunction',
    'AsyncGeneratorFunction',
    'AsyncFunction',
    'Observable',
    'Array',
    'Buffer',
    'Object',
    'RegExp',
    'Date',
    'Error',
    'Map',
    'Set',
    'WeakMap',
    'WeakSet',
    'ArrayBuffer',
    'SharedArrayBuffer',
    'DataView',
    'Promise',
    'URL',
    'HTMLElement',
    'Int8Array',
    'Uint8Array',
    'Uint8ClampedArray',
    'Int16Array',
    'Uint16Array',
    'Int32Array',
    'Uint32Array',
    'Float32Array',
    'Float64Array',
    'BigInt64Array',
    'BigUint64Array'
];
function is(value) {
    if (value === null) {
        return 'null';
    }
    if (value === undefined) {
        return 'undefined';
    }
    if (value === true || value === false) {
        return 'boolean';
    }
    const typeOf = typeof value;
    if (typeofs.includes(typeOf)) {
        return typeOf;
    }
    /* c8 ignore next 4 */ // not going to bother testing this, it's not going to be valid anyway
    if (typeOf === 'function') {
        return 'Function';
    }
    if (Array.isArray(value)) {
        return 'Array';
    }
    if (isBuffer(value)) {
        return 'Buffer';
    }
    const objectType = getObjectType(value);
    if (objectType) {
        return objectType;
    }
    /* c8 ignore next */ return 'Object';
}
/**
 * @param {any} value
 * @returns {boolean}
 */ function isBuffer(value) {
    return value && value.constructor && value.constructor.isBuffer && value.constructor.isBuffer.call(null, value);
}
/**
 * @param {any} value
 * @returns {string|undefined}
 */ function getObjectType(value) {
    const objectTypeName = Object.prototype.toString.call(value).slice(8, -1);
    if (objectTypeNames.includes(objectTypeName)) {
        return objectTypeName;
    }
    /* c8 ignore next */ return undefined;
}
}}),
"[project]/node_modules/cborg/lib/token.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Token": (()=>Token),
    "Type": (()=>Type)
});
class Type {
    /**
   * @param {number} major
   * @param {string} name
   * @param {boolean} terminal
   */ constructor(major, name, terminal){
        this.major = major;
        this.majorEncoded = major << 5;
        this.name = name;
        this.terminal = terminal;
    }
    /* c8 ignore next 3 */ toString() {
        return `Type[${this.major}].${this.name}`;
    }
    /**
   * @param {Type} typ
   * @returns {number}
   */ compare(typ) {
        /* c8 ignore next 1 */ return this.major < typ.major ? -1 : this.major > typ.major ? 1 : 0;
    }
}
// convert to static fields when better supported
Type.uint = new Type(0, 'uint', true);
Type.negint = new Type(1, 'negint', true);
Type.bytes = new Type(2, 'bytes', true);
Type.string = new Type(3, 'string', true);
Type.array = new Type(4, 'array', false);
Type.map = new Type(5, 'map', false);
Type.tag = new Type(6, 'tag', false) // terminal?
;
Type.float = new Type(7, 'float', true);
Type.false = new Type(7, 'false', true);
Type.true = new Type(7, 'true', true);
Type.null = new Type(7, 'null', true);
Type.undefined = new Type(7, 'undefined', true);
Type.break = new Type(7, 'break', true);
// Type.indefiniteLength = new Type(0, 'indefiniteLength', true)
class Token {
    /**
   * @param {Type} type
   * @param {any} [value]
   * @param {number} [encodedLength]
   */ constructor(type, value, encodedLength){
        this.type = type;
        this.value = value;
        this.encodedLength = encodedLength;
        /** @type {Uint8Array|undefined} */ this.encodedBytes = undefined;
        /** @type {Uint8Array|undefined} */ this.byteValue = undefined;
    }
    /* c8 ignore next 3 */ toString() {
        return `Token[${this.type}].${this.value}`;
    }
}
;
}}),
"[project]/node_modules/cborg/lib/byte-utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Use Uint8Array directly in the browser, use Buffer in Node.js but don't
// speak its name directly to avoid bundlers pulling in the `Buffer` polyfill
// @ts-ignore
__turbopack_context__.s({
    "alloc": (()=>alloc),
    "asU8A": (()=>asU8A),
    "compare": (()=>compare),
    "concat": (()=>concat),
    "decodeCodePointsArray": (()=>decodeCodePointsArray),
    "fromArray": (()=>fromArray),
    "fromHex": (()=>fromHex),
    "fromString": (()=>fromString),
    "slice": (()=>slice),
    "toHex": (()=>toHex),
    "toString": (()=>toString),
    "useBuffer": (()=>useBuffer)
});
const useBuffer = globalThis.process && // @ts-ignore
!globalThis.process.browser && // @ts-ignore
globalThis.Buffer && // @ts-ignore
typeof globalThis.Buffer.isBuffer === 'function';
const textDecoder = new TextDecoder();
const textEncoder = new TextEncoder();
/**
 * @param {Uint8Array} buf
 * @returns {boolean}
 */ function isBuffer(buf) {
    // @ts-ignore
    return useBuffer && globalThis.Buffer.isBuffer(buf);
}
function asU8A(buf) {
    /* c8 ignore next */ if (!(buf instanceof Uint8Array)) {
        return Uint8Array.from(buf);
    }
    return isBuffer(buf) ? new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength) : buf;
}
const toString = useBuffer ? /**
     * @param {Uint8Array} bytes
     * @param {number} start
     * @param {number} end
     */ (bytes, start, end)=>{
    return end - start > 64 ? // @ts-ignore
    globalThis.Buffer.from(bytes.subarray(start, end)).toString('utf8') : utf8Slice(bytes, start, end);
} : /**
     * @param {Uint8Array} bytes
     * @param {number} start
     * @param {number} end
     */ (bytes, start, end)=>{
    return end - start > 64 ? textDecoder.decode(bytes.subarray(start, end)) : utf8Slice(bytes, start, end);
};
const fromString = useBuffer ? /**
     * @param {string} string
     */ (string)=>{
    return string.length > 64 ? // @ts-ignore
    globalThis.Buffer.from(string) : utf8ToBytes(string);
} : /**
     * @param {string} string
     */ (string)=>{
    return string.length > 64 ? textEncoder.encode(string) : utf8ToBytes(string);
};
const fromArray = (arr)=>{
    return Uint8Array.from(arr);
};
const slice = useBuffer ? /**
     * @param {Uint8Array} bytes
     * @param {number} start
     * @param {number} end
     */ (bytes, start, end)=>{
    if (isBuffer(bytes)) {
        return new Uint8Array(bytes.subarray(start, end));
    }
    return bytes.slice(start, end);
} : /**
     * @param {Uint8Array} bytes
     * @param {number} start
     * @param {number} end
     */ (bytes, start, end)=>{
    return bytes.slice(start, end);
};
const concat = useBuffer ? /**
     * @param {Uint8Array[]} chunks
     * @param {number} length
     * @returns {Uint8Array}
     */ (chunks, length)=>{
    // might get a stray plain Array here
    /* c8 ignore next 1 */ chunks = chunks.map((c)=>c instanceof Uint8Array ? c : // @ts-ignore
        globalThis.Buffer.from(c));
    // @ts-ignore
    return asU8A(globalThis.Buffer.concat(chunks, length));
} : /**
     * @param {Uint8Array[]} chunks
     * @param {number} length
     * @returns {Uint8Array}
     */ (chunks, length)=>{
    const out = new Uint8Array(length);
    let off = 0;
    for (let b of chunks){
        if (off + b.length > out.length) {
            // final chunk that's bigger than we need
            b = b.subarray(0, out.length - off);
        }
        out.set(b, off);
        off += b.length;
    }
    return out;
};
const alloc = useBuffer ? /**
     * @param {number} size
     * @returns {Uint8Array}
     */ (size)=>{
    // we always write over the contents we expose so this should be safe
    // @ts-ignore
    return globalThis.Buffer.allocUnsafe(size);
} : /**
     * @param {number} size
     * @returns {Uint8Array}
     */ (size)=>{
    return new Uint8Array(size);
};
const toHex = useBuffer ? /**
     * @param {Uint8Array} d
     * @returns {string}
     */ (d)=>{
    if (typeof d === 'string') {
        return d;
    }
    // @ts-ignore
    return globalThis.Buffer.from(toBytes(d)).toString('hex');
} : /**
     * @param {Uint8Array} d
     * @returns {string}
     */ (d)=>{
    if (typeof d === 'string') {
        return d;
    }
    // @ts-ignore not smart enough to figure this out
    return Array.prototype.reduce.call(toBytes(d), (p, c)=>`${p}${c.toString(16).padStart(2, '0')}`, '');
};
const fromHex = useBuffer ? /**
   * @param {string|Uint8Array} hex
   * @returns {Uint8Array}
   */ (hex)=>{
    if (hex instanceof Uint8Array) {
        return hex;
    }
    // @ts-ignore
    return globalThis.Buffer.from(hex, 'hex');
} : /**
   * @param {string|Uint8Array} hex
   * @returns {Uint8Array}
   */ (hex)=>{
    if (hex instanceof Uint8Array) {
        return hex;
    }
    if (!hex.length) {
        return new Uint8Array(0);
    }
    return new Uint8Array(hex.split('').map((/** @type {string} */ c, /** @type {number} */ i, /** @type {string[]} */ d)=>i % 2 === 0 ? `0x${c}${d[i + 1]}` : '').filter(Boolean).map((/** @type {string} */ e)=>parseInt(e, 16)));
};
/**
 * @param {Uint8Array|ArrayBuffer|ArrayBufferView} obj
 * @returns {Uint8Array}
 */ function toBytes(obj) {
    if (obj instanceof Uint8Array && obj.constructor.name === 'Uint8Array') {
        return obj;
    }
    if (obj instanceof ArrayBuffer) {
        return new Uint8Array(obj);
    }
    if (ArrayBuffer.isView(obj)) {
        return new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength);
    }
    /* c8 ignore next */ throw new Error('Unknown type, must be binary type');
}
function compare(b1, b2) {
    /* c8 ignore next 5 */ if (isBuffer(b1) && isBuffer(b2)) {
        // probably not possible to get here in the current API
        // @ts-ignore Buffer
        return b1.compare(b2);
    }
    for(let i = 0; i < b1.length; i++){
        if (b1[i] === b2[i]) {
            continue;
        }
        return b1[i] < b2[i] ? -1 : 1;
    } /* c8 ignore next 3 */ 
    return 0;
}
// The below code is taken from https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
// Licensed Apache-2.0.
/**
 * @param {string} str
 * @returns {number[]}
 */ function utf8ToBytes(str) {
    const out = [];
    let p = 0;
    for(let i = 0; i < str.length; i++){
        let c = str.charCodeAt(i);
        if (c < 128) {
            out[p++] = c;
        } else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
        } else if ((c & 0xFC00) === 0xD800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
            // Surrogate Pair
            c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        } else {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        }
    }
    return out;
}
// The below code is mostly taken from https://github.com/feross/buffer
// Licensed MIT. Copyright (c) Feross Aboukhadijeh
/**
 * @param {Uint8Array} buf
 * @param {number} offset
 * @param {number} end
 * @returns {string}
 */ function utf8Slice(buf, offset, end) {
    const res = [];
    while(offset < end){
        const firstByte = buf[offset];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xef ? 4 : firstByte > 0xdf ? 3 : firstByte > 0xbf ? 2 : 1;
        if (offset + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) {
                        codePoint = firstByte;
                    }
                    break;
                case 2:
                    secondByte = buf[offset + 1];
                    if ((secondByte & 0xc0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1f) << 0x6 | secondByte & 0x3f;
                        if (tempCodePoint > 0x7f) {
                            codePoint = tempCodePoint;
                        }
                    }
                    break;
                case 3:
                    secondByte = buf[offset + 1];
                    thirdByte = buf[offset + 2];
                    if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80) {
                        tempCodePoint = (firstByte & 0xf) << 0xc | (secondByte & 0x3f) << 0x6 | thirdByte & 0x3f;
                        /* c8 ignore next 3 */ if (tempCodePoint > 0x7ff && (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)) {
                            codePoint = tempCodePoint;
                        }
                    }
                    break;
                case 4:
                    secondByte = buf[offset + 1];
                    thirdByte = buf[offset + 2];
                    fourthByte = buf[offset + 3];
                    if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80 && (fourthByte & 0xc0) === 0x80) {
                        tempCodePoint = (firstByte & 0xf) << 0x12 | (secondByte & 0x3f) << 0xc | (thirdByte & 0x3f) << 0x6 | fourthByte & 0x3f;
                        if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {
                            codePoint = tempCodePoint;
                        }
                    }
            }
        }
        /* c8 ignore next 5 */ if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xfffd;
            bytesPerSequence = 1;
        } else if (codePoint > 0xffff) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3ff | 0xd800);
            codePoint = 0xdc00 | codePoint & 0x3ff;
        }
        res.push(codePoint);
        offset += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
        ;
    }
    /* c8 ignore next 10 */ // Decode in chunks to avoid "call stack size exceeded".
    let res = '';
    let i = 0;
    while(i < len){
        res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    }
    return res;
}
}}),
"[project]/node_modules/cborg/lib/bl.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Bl is a list of byte chunks, similar to https://github.com/rvagg/bl but for
 * writing rather than reading.
 * A Bl object accepts set() operations for individual bytes and copyTo() for
 * inserting byte arrays. These write operations don't automatically increment
 * the internal cursor so its "length" won't be changed. Instead, increment()
 * must be called to extend its length to cover the inserted data.
 * The toBytes() call will convert all internal memory to a single Uint8Array of
 * the correct length, truncating any data that is stored but hasn't been
 * included by an increment().
 * get() can retrieve a single byte.
 * All operations (except toBytes()) take an "offset" argument that will perform
 * the write at the offset _from the current cursor_. For most operations this
 * will be `0` to write at the current cursor position but it can be ahead of
 * the current cursor. Negative offsets probably work but are untested.
 */ // TODO: ipjs doesn't support this, only for test files: https://github.com/mikeal/ipjs/blob/master/src/package/testFile.js#L39
__turbopack_context__.s({
    "Bl": (()=>Bl)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/byte-utils.js [client] (ecmascript)");
;
// the ts-ignores in this file are almost all for the `Uint8Array|number[]` duality that exists
// for perf reasons. Consider better approaches to this or removing it entirely, it is quite
// risky because of some assumptions about small chunks === number[] and everything else === Uint8Array.
const defaultChunkSize = 256;
class Bl {
    /**
   * @param {number} [chunkSize]
   */ constructor(chunkSize = defaultChunkSize){
        this.chunkSize = chunkSize;
        /** @type {number} */ this.cursor = 0;
        /** @type {number} */ this.maxCursor = -1;
        /** @type {(Uint8Array|number[])[]} */ this.chunks = [];
        // keep the first chunk around if we can to save allocations for future encodes
        /** @type {Uint8Array|number[]|null} */ this._initReuseChunk = null;
    }
    reset() {
        this.cursor = 0;
        this.maxCursor = -1;
        if (this.chunks.length) {
            this.chunks = [];
        }
        if (this._initReuseChunk !== null) {
            this.chunks.push(this._initReuseChunk);
            this.maxCursor = this._initReuseChunk.length - 1;
        }
    }
    /**
   * @param {Uint8Array|number[]} bytes
   */ push(bytes) {
        let topChunk = this.chunks[this.chunks.length - 1];
        const newMax = this.cursor + bytes.length;
        if (newMax <= this.maxCursor + 1) {
            // we have at least one chunk and we can fit these bytes into that chunk
            const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;
            // @ts-ignore
            topChunk.set(bytes, chunkPos);
        } else {
            // can't fit it in
            if (topChunk) {
                // trip the last chunk to `cursor` if we need to
                const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;
                if (chunkPos < topChunk.length) {
                    // @ts-ignore
                    this.chunks[this.chunks.length - 1] = topChunk.subarray(0, chunkPos);
                    this.maxCursor = this.cursor - 1;
                }
            }
            if (bytes.length < 64 && bytes.length < this.chunkSize) {
                // make a new chunk and copy the new one into it
                topChunk = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["alloc"])(this.chunkSize);
                this.chunks.push(topChunk);
                this.maxCursor += topChunk.length;
                if (this._initReuseChunk === null) {
                    this._initReuseChunk = topChunk;
                }
                // @ts-ignore
                topChunk.set(bytes, 0);
            } else {
                // push the new bytes in as its own chunk
                this.chunks.push(bytes);
                this.maxCursor += bytes.length;
            }
        }
        this.cursor += bytes.length;
    }
    /**
   * @param {boolean} [reset]
   * @returns {Uint8Array}
   */ toBytes(reset = false) {
        let byts;
        if (this.chunks.length === 1) {
            const chunk = this.chunks[0];
            if (reset && this.cursor > chunk.length / 2) {
                /* c8 ignore next 2 */ // @ts-ignore
                byts = this.cursor === chunk.length ? chunk : chunk.subarray(0, this.cursor);
                this._initReuseChunk = null;
                this.chunks = [];
            } else {
                // @ts-ignore
                byts = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["slice"])(chunk, 0, this.cursor);
            }
        } else {
            // @ts-ignore
            byts = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["concat"])(this.chunks, this.cursor);
        }
        if (reset) {
            this.reset();
        }
        return byts;
    }
}
}}),
"[project]/node_modules/cborg/lib/common.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "assertEnoughData": (()=>assertEnoughData),
    "decodeErrPrefix": (()=>decodeErrPrefix),
    "encodeErrPrefix": (()=>encodeErrPrefix),
    "uintMinorPrefixBytes": (()=>uintMinorPrefixBytes)
});
const decodeErrPrefix = 'CBOR decode error:';
const encodeErrPrefix = 'CBOR encode error:';
const uintMinorPrefixBytes = [];
uintMinorPrefixBytes[23] = 1;
uintMinorPrefixBytes[24] = 2;
uintMinorPrefixBytes[25] = 3;
uintMinorPrefixBytes[26] = 5;
uintMinorPrefixBytes[27] = 9;
/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} need
 */ function assertEnoughData(data, pos, need) {
    if (data.length - pos < need) {
        throw new Error(`${decodeErrPrefix} not enough data for type`);
    }
}
;
}}),
"[project]/node_modules/cborg/lib/0uint.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* globals BigInt */ __turbopack_context__.s({
    "decodeUint16": (()=>decodeUint16),
    "decodeUint32": (()=>decodeUint32),
    "decodeUint64": (()=>decodeUint64),
    "decodeUint8": (()=>decodeUint8),
    "encodeUint": (()=>encodeUint),
    "encodeUintValue": (()=>encodeUintValue),
    "readUint16": (()=>readUint16),
    "readUint32": (()=>readUint32),
    "readUint64": (()=>readUint64),
    "readUint8": (()=>readUint8),
    "uintBoundaries": (()=>uintBoundaries)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/token.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/common.js [client] (ecmascript)");
;
;
const uintBoundaries = [
    24,
    256,
    65536,
    4294967296,
    BigInt('18446744073709551616')
];
function readUint8(data, offset, options) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assertEnoughData"])(data, offset, 1);
    const value = data[offset];
    if (options.strict === true && value < uintBoundaries[0]) {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} integer encoded in more bytes than necessary (strict decode)`);
    }
    return value;
}
function readUint16(data, offset, options) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assertEnoughData"])(data, offset, 2);
    const value = data[offset] << 8 | data[offset + 1];
    if (options.strict === true && value < uintBoundaries[1]) {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} integer encoded in more bytes than necessary (strict decode)`);
    }
    return value;
}
function readUint32(data, offset, options) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assertEnoughData"])(data, offset, 4);
    const value = data[offset] * 16777216 /* 2 ** 24 */  + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];
    if (options.strict === true && value < uintBoundaries[2]) {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} integer encoded in more bytes than necessary (strict decode)`);
    }
    return value;
}
function readUint64(data, offset, options) {
    // assume BigInt, convert back to Number if within safe range
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assertEnoughData"])(data, offset, 8);
    const hi = data[offset] * 16777216 /* 2 ** 24 */  + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];
    const lo = data[offset + 4] * 16777216 /* 2 ** 24 */  + (data[offset + 5] << 16) + (data[offset + 6] << 8) + data[offset + 7];
    const value = (BigInt(hi) << BigInt(32)) + BigInt(lo);
    if (options.strict === true && value < uintBoundaries[3]) {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} integer encoded in more bytes than necessary (strict decode)`);
    }
    if (value <= Number.MAX_SAFE_INTEGER) {
        return Number(value);
    }
    if (options.allowBigInt === true) {
        return value;
    }
    throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} integers outside of the safe integer range are not supported`);
}
function decodeUint8(data, pos, _minor, options) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].uint, readUint8(data, pos + 1, options), 2);
}
function decodeUint16(data, pos, _minor, options) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].uint, readUint16(data, pos + 1, options), 3);
}
function decodeUint32(data, pos, _minor, options) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].uint, readUint32(data, pos + 1, options), 5);
}
function decodeUint64(data, pos, _minor, options) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].uint, readUint64(data, pos + 1, options), 9);
}
function encodeUint(buf, token) {
    return encodeUintValue(buf, 0, token.value);
}
function encodeUintValue(buf, major, uint) {
    if (uint < uintBoundaries[0]) {
        const nuint = Number(uint);
        // pack into one byte, minor=0, additional=value
        buf.push([
            major | nuint
        ]);
    } else if (uint < uintBoundaries[1]) {
        const nuint = Number(uint);
        // pack into two byte, minor=0, additional=24
        buf.push([
            major | 24,
            nuint
        ]);
    } else if (uint < uintBoundaries[2]) {
        const nuint = Number(uint);
        // pack into three byte, minor=0, additional=25
        buf.push([
            major | 25,
            nuint >>> 8,
            nuint & 0xff
        ]);
    } else if (uint < uintBoundaries[3]) {
        const nuint = Number(uint);
        // pack into five byte, minor=0, additional=26
        buf.push([
            major | 26,
            nuint >>> 24 & 0xff,
            nuint >>> 16 & 0xff,
            nuint >>> 8 & 0xff,
            nuint & 0xff
        ]);
    } else {
        const buint = BigInt(uint);
        if (buint < uintBoundaries[4]) {
            // pack into nine byte, minor=0, additional=27
            const set = [
                major | 27,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ];
            // simulate bitwise above 32 bits
            let lo = Number(buint & BigInt(0xffffffff));
            let hi = Number(buint >> BigInt(32) & BigInt(0xffffffff));
            set[8] = lo & 0xff;
            lo = lo >> 8;
            set[7] = lo & 0xff;
            lo = lo >> 8;
            set[6] = lo & 0xff;
            lo = lo >> 8;
            set[5] = lo & 0xff;
            set[4] = hi & 0xff;
            hi = hi >> 8;
            set[3] = hi & 0xff;
            hi = hi >> 8;
            set[2] = hi & 0xff;
            hi = hi >> 8;
            set[1] = hi & 0xff;
            buf.push(set);
        } else {
            throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} encountered BigInt larger than allowable range`);
        }
    }
}
/**
 * @param {Token} token
 * @returns {number}
 */ encodeUint.encodedSize = function encodedSize(token) {
    return encodeUintValue.encodedSize(token.value);
};
/**
 * @param {number} uint
 * @returns {number}
 */ encodeUintValue.encodedSize = function encodedSize(uint) {
    if (uint < uintBoundaries[0]) {
        return 1;
    }
    if (uint < uintBoundaries[1]) {
        return 2;
    }
    if (uint < uintBoundaries[2]) {
        return 3;
    }
    if (uint < uintBoundaries[3]) {
        return 5;
    }
    return 9;
};
/**
 * @param {Token} tok1
 * @param {Token} tok2
 * @returns {number}
 */ encodeUint.compareTokens = function compareTokens(tok1, tok2) {
    return tok1.value < tok2.value ? -1 : tok1.value > tok2.value ? 1 : /* c8 ignore next */ 0;
};
}}),
"[project]/node_modules/cborg/lib/1negint.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* eslint-env es2020 */ __turbopack_context__.s({
    "decodeNegint16": (()=>decodeNegint16),
    "decodeNegint32": (()=>decodeNegint32),
    "decodeNegint64": (()=>decodeNegint64),
    "decodeNegint8": (()=>decodeNegint8),
    "encodeNegint": (()=>encodeNegint)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/token.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/0uint.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/common.js [client] (ecmascript)");
;
;
;
function decodeNegint8(data, pos, _minor, options) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].negint, -1 - (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint8"])(data, pos + 1, options), 2);
}
function decodeNegint16(data, pos, _minor, options) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].negint, -1 - (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint16"])(data, pos + 1, options), 3);
}
function decodeNegint32(data, pos, _minor, options) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].negint, -1 - (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint32"])(data, pos + 1, options), 5);
}
const neg1b = BigInt(-1);
const pos1b = BigInt(1);
function decodeNegint64(data, pos, _minor, options) {
    const int = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint64"])(data, pos + 1, options);
    if (typeof int !== 'bigint') {
        const value = -1 - int;
        if (value >= Number.MIN_SAFE_INTEGER) {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].negint, value, 9);
        }
    }
    if (options.allowBigInt !== true) {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} integers outside of the safe integer range are not supported`);
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].negint, neg1b - BigInt(int), 9);
}
function encodeNegint(buf, token) {
    const negint = token.value;
    const unsigned = typeof negint === 'bigint' ? negint * neg1b - pos1b : negint * -1 - 1;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeUintValue"])(buf, token.type.majorEncoded, unsigned);
}
/**
 * @param {Token} token
 * @returns {number}
 */ encodeNegint.encodedSize = function encodedSize(token) {
    const negint = token.value;
    const unsigned = typeof negint === 'bigint' ? negint * neg1b - pos1b : negint * -1 - 1;
    /* c8 ignore next 4 */ // handled by quickEncode, we shouldn't get here but it's included for completeness
    if (unsigned < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["uintBoundaries"][0]) {
        return 1;
    }
    if (unsigned < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["uintBoundaries"][1]) {
        return 2;
    }
    if (unsigned < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["uintBoundaries"][2]) {
        return 3;
    }
    if (unsigned < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["uintBoundaries"][3]) {
        return 5;
    }
    return 9;
};
/**
 * @param {Token} tok1
 * @param {Token} tok2
 * @returns {number}
 */ encodeNegint.compareTokens = function compareTokens(tok1, tok2) {
    // opposite of the uint comparison since we store the uint version in bytes
    return tok1.value < tok2.value ? 1 : tok1.value > tok2.value ? -1 : /* c8 ignore next */ 0;
};
}}),
"[project]/node_modules/cborg/lib/2bytes.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "compareBytes": (()=>compareBytes),
    "decodeBytes16": (()=>decodeBytes16),
    "decodeBytes32": (()=>decodeBytes32),
    "decodeBytes64": (()=>decodeBytes64),
    "decodeBytes8": (()=>decodeBytes8),
    "decodeBytesCompact": (()=>decodeBytesCompact),
    "encodeBytes": (()=>encodeBytes)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/token.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/common.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/0uint.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/byte-utils.js [client] (ecmascript)");
;
;
;
;
/**
 * @typedef {import('./bl.js').Bl} Bl
 * @typedef {import('../interface').DecodeOptions} DecodeOptions
 */ /**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} prefix
 * @param {number} length
 * @returns {Token}
 */ function toToken(data, pos, prefix, length) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assertEnoughData"])(data, pos, prefix + length);
    const buf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["slice"])(data, pos + prefix, pos + prefix + length);
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].bytes, buf, prefix + length);
}
function decodeBytesCompact(data, pos, minor, _options) {
    return toToken(data, pos, 1, minor);
}
function decodeBytes8(data, pos, _minor, options) {
    return toToken(data, pos, 2, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint8"])(data, pos + 1, options));
}
function decodeBytes16(data, pos, _minor, options) {
    return toToken(data, pos, 3, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint16"])(data, pos + 1, options));
}
function decodeBytes32(data, pos, _minor, options) {
    return toToken(data, pos, 5, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint32"])(data, pos + 1, options));
}
function decodeBytes64(data, pos, _minor, options) {
    const l = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint64"])(data, pos + 1, options);
    if (typeof l === 'bigint') {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} 64-bit integer bytes lengths not supported`);
    }
    return toToken(data, pos, 9, l);
}
/**
 * `encodedBytes` allows for caching when we do a byte version of a string
 * for key sorting purposes
 * @param {Token} token
 * @returns {Uint8Array}
 */ function tokenBytes(token) {
    if (token.encodedBytes === undefined) {
        token.encodedBytes = token.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].string ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["fromString"])(token.value) : token.value;
    }
    // @ts-ignore c'mon
    return token.encodedBytes;
}
function encodeBytes(buf, token) {
    const bytes = tokenBytes(token);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeUintValue"])(buf, token.type.majorEncoded, bytes.length);
    buf.push(bytes);
}
/**
 * @param {Token} token
 * @returns {number}
 */ encodeBytes.encodedSize = function encodedSize(token) {
    const bytes = tokenBytes(token);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeUintValue"].encodedSize(bytes.length) + bytes.length;
};
/**
 * @param {Token} tok1
 * @param {Token} tok2
 * @returns {number}
 */ encodeBytes.compareTokens = function compareTokens(tok1, tok2) {
    return compareBytes(tokenBytes(tok1), tokenBytes(tok2));
};
function compareBytes(b1, b2) {
    return b1.length < b2.length ? -1 : b1.length > b2.length ? 1 : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["compare"])(b1, b2);
}
}}),
"[project]/node_modules/cborg/lib/3string.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "decodeString16": (()=>decodeString16),
    "decodeString32": (()=>decodeString32),
    "decodeString64": (()=>decodeString64),
    "decodeString8": (()=>decodeString8),
    "decodeStringCompact": (()=>decodeStringCompact),
    "encodeString": (()=>encodeString)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/token.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/common.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/0uint.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$2bytes$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/2bytes.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/byte-utils.js [client] (ecmascript)");
;
;
;
;
;
/**
 * @typedef {import('./bl.js').Bl} Bl
 * @typedef {import('../interface').DecodeOptions} DecodeOptions
 */ /**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} prefix
 * @param {number} length
 * @param {DecodeOptions} options
 * @returns {Token}
 */ function toToken(data, pos, prefix, length, options) {
    const totLength = prefix + length;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assertEnoughData"])(data, pos, totLength);
    const tok = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].string, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["toString"])(data, pos + prefix, pos + totLength), totLength);
    if (options.retainStringBytes === true) {
        tok.byteValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["slice"])(data, pos + prefix, pos + totLength);
    }
    return tok;
}
function decodeStringCompact(data, pos, minor, options) {
    return toToken(data, pos, 1, minor, options);
}
function decodeString8(data, pos, _minor, options) {
    return toToken(data, pos, 2, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint8"])(data, pos + 1, options), options);
}
function decodeString16(data, pos, _minor, options) {
    return toToken(data, pos, 3, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint16"])(data, pos + 1, options), options);
}
function decodeString32(data, pos, _minor, options) {
    return toToken(data, pos, 5, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint32"])(data, pos + 1, options), options);
}
function decodeString64(data, pos, _minor, options) {
    const l = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint64"])(data, pos + 1, options);
    if (typeof l === 'bigint') {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} 64-bit integer string lengths not supported`);
    }
    return toToken(data, pos, 9, l, options);
}
const encodeString = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$2bytes$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeBytes"];
}}),
"[project]/node_modules/cborg/lib/4array.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "decodeArray16": (()=>decodeArray16),
    "decodeArray32": (()=>decodeArray32),
    "decodeArray64": (()=>decodeArray64),
    "decodeArray8": (()=>decodeArray8),
    "decodeArrayCompact": (()=>decodeArrayCompact),
    "decodeArrayIndefinite": (()=>decodeArrayIndefinite),
    "encodeArray": (()=>encodeArray)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/token.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/0uint.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/common.js [client] (ecmascript)");
;
;
;
/**
 * @typedef {import('./bl.js').Bl} Bl
 * @typedef {import('../interface').DecodeOptions} DecodeOptions
 */ /**
 * @param {Uint8Array} _data
 * @param {number} _pos
 * @param {number} prefix
 * @param {number} length
 * @returns {Token}
 */ function toToken(_data, _pos, prefix, length) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].array, length, prefix);
}
function decodeArrayCompact(data, pos, minor, _options) {
    return toToken(data, pos, 1, minor);
}
function decodeArray8(data, pos, _minor, options) {
    return toToken(data, pos, 2, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint8"])(data, pos + 1, options));
}
function decodeArray16(data, pos, _minor, options) {
    return toToken(data, pos, 3, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint16"])(data, pos + 1, options));
}
function decodeArray32(data, pos, _minor, options) {
    return toToken(data, pos, 5, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint32"])(data, pos + 1, options));
}
function decodeArray64(data, pos, _minor, options) {
    const l = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint64"])(data, pos + 1, options);
    if (typeof l === 'bigint') {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} 64-bit integer array lengths not supported`);
    }
    return toToken(data, pos, 9, l);
}
function decodeArrayIndefinite(data, pos, _minor, options) {
    if (options.allowIndefinite === false) {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} indefinite length items not allowed`);
    }
    return toToken(data, pos, 1, Infinity);
}
function encodeArray(buf, token) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeUintValue"])(buf, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].array.majorEncoded, token.value);
}
// using an array as a map key, are you sure about this? we can only sort
// by map length here, it's up to the encoder to decide to look deeper
encodeArray.compareTokens = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeUint"].compareTokens;
/**
 * @param {Token} token
 * @returns {number}
 */ encodeArray.encodedSize = function encodedSize(token) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeUintValue"].encodedSize(token.value);
};
}}),
"[project]/node_modules/cborg/lib/5map.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "decodeMap16": (()=>decodeMap16),
    "decodeMap32": (()=>decodeMap32),
    "decodeMap64": (()=>decodeMap64),
    "decodeMap8": (()=>decodeMap8),
    "decodeMapCompact": (()=>decodeMapCompact),
    "decodeMapIndefinite": (()=>decodeMapIndefinite),
    "encodeMap": (()=>encodeMap)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/token.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/0uint.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/common.js [client] (ecmascript)");
;
;
;
/**
 * @typedef {import('./bl.js').Bl} Bl
 * @typedef {import('../interface').DecodeOptions} DecodeOptions
 */ /**
 * @param {Uint8Array} _data
 * @param {number} _pos
 * @param {number} prefix
 * @param {number} length
 * @returns {Token}
 */ function toToken(_data, _pos, prefix, length) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].map, length, prefix);
}
function decodeMapCompact(data, pos, minor, _options) {
    return toToken(data, pos, 1, minor);
}
function decodeMap8(data, pos, _minor, options) {
    return toToken(data, pos, 2, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint8"])(data, pos + 1, options));
}
function decodeMap16(data, pos, _minor, options) {
    return toToken(data, pos, 3, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint16"])(data, pos + 1, options));
}
function decodeMap32(data, pos, _minor, options) {
    return toToken(data, pos, 5, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint32"])(data, pos + 1, options));
}
function decodeMap64(data, pos, _minor, options) {
    const l = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint64"])(data, pos + 1, options);
    if (typeof l === 'bigint') {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} 64-bit integer map lengths not supported`);
    }
    return toToken(data, pos, 9, l);
}
function decodeMapIndefinite(data, pos, _minor, options) {
    if (options.allowIndefinite === false) {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} indefinite length items not allowed`);
    }
    return toToken(data, pos, 1, Infinity);
}
function encodeMap(buf, token) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeUintValue"])(buf, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].map.majorEncoded, token.value);
}
// using a map as a map key, are you sure about this? we can only sort
// by map length here, it's up to the encoder to decide to look deeper
encodeMap.compareTokens = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeUint"].compareTokens;
/**
 * @param {Token} token
 * @returns {number}
 */ encodeMap.encodedSize = function encodedSize(token) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeUintValue"].encodedSize(token.value);
};
}}),
"[project]/node_modules/cborg/lib/6tag.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "decodeTag16": (()=>decodeTag16),
    "decodeTag32": (()=>decodeTag32),
    "decodeTag64": (()=>decodeTag64),
    "decodeTag8": (()=>decodeTag8),
    "decodeTagCompact": (()=>decodeTagCompact),
    "encodeTag": (()=>encodeTag)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/token.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/0uint.js [client] (ecmascript)");
;
;
function decodeTagCompact(_data, _pos, minor, _options) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].tag, minor, 1);
}
function decodeTag8(data, pos, _minor, options) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].tag, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint8"])(data, pos + 1, options), 2);
}
function decodeTag16(data, pos, _minor, options) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].tag, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint16"])(data, pos + 1, options), 3);
}
function decodeTag32(data, pos, _minor, options) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].tag, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint32"])(data, pos + 1, options), 5);
}
function decodeTag64(data, pos, _minor, options) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].tag, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readUint64"])(data, pos + 1, options), 9);
}
function encodeTag(buf, token) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeUintValue"])(buf, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].tag.majorEncoded, token.value);
}
encodeTag.compareTokens = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeUint"].compareTokens;
/**
 * @param {Token} token
 * @returns {number}
 */ encodeTag.encodedSize = function encodedSize(token) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeUintValue"].encodedSize(token.value);
};
}}),
"[project]/node_modules/cborg/lib/7float.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// TODO: shift some of the bytes logic to bytes-utils so we can use Buffer
// where possible
__turbopack_context__.s({
    "decodeBreak": (()=>decodeBreak),
    "decodeFloat16": (()=>decodeFloat16),
    "decodeFloat32": (()=>decodeFloat32),
    "decodeFloat64": (()=>decodeFloat64),
    "decodeUndefined": (()=>decodeUndefined),
    "encodeFloat": (()=>encodeFloat)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/token.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/common.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/0uint.js [client] (ecmascript)");
;
;
;
/**
 * @typedef {import('./bl.js').Bl} Bl
 * @typedef {import('../interface').DecodeOptions} DecodeOptions
 * @typedef {import('../interface').EncodeOptions} EncodeOptions
 */ const MINOR_FALSE = 20;
const MINOR_TRUE = 21;
const MINOR_NULL = 22;
const MINOR_UNDEFINED = 23;
function decodeUndefined(_data, _pos, _minor, options) {
    if (options.allowUndefined === false) {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} undefined values are not supported`);
    } else if (options.coerceUndefinedToNull === true) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].null, null, 1);
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].undefined, undefined, 1);
}
function decodeBreak(_data, _pos, _minor, options) {
    if (options.allowIndefinite === false) {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} indefinite length items not allowed`);
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].break, undefined, 1);
}
/**
 * @param {number} value
 * @param {number} bytes
 * @param {DecodeOptions} options
 * @returns {Token}
 */ function createToken(value, bytes, options) {
    if (options) {
        if (options.allowNaN === false && Number.isNaN(value)) {
            throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} NaN values are not supported`);
        }
        if (options.allowInfinity === false && (value === Infinity || value === -Infinity)) {
            throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} Infinity values are not supported`);
        }
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].float, value, bytes);
}
function decodeFloat16(data, pos, _minor, options) {
    return createToken(readFloat16(data, pos + 1), 3, options);
}
function decodeFloat32(data, pos, _minor, options) {
    return createToken(readFloat32(data, pos + 1), 5, options);
}
function decodeFloat64(data, pos, _minor, options) {
    return createToken(readFloat64(data, pos + 1), 9, options);
}
function encodeFloat(buf, token, options) {
    const float = token.value;
    if (float === false) {
        buf.push([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].float.majorEncoded | MINOR_FALSE
        ]);
    } else if (float === true) {
        buf.push([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].float.majorEncoded | MINOR_TRUE
        ]);
    } else if (float === null) {
        buf.push([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].float.majorEncoded | MINOR_NULL
        ]);
    } else if (float === undefined) {
        buf.push([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].float.majorEncoded | MINOR_UNDEFINED
        ]);
    } else {
        let decoded;
        let success = false;
        if (!options || options.float64 !== true) {
            encodeFloat16(float);
            decoded = readFloat16(ui8a, 1);
            if (float === decoded || Number.isNaN(float)) {
                ui8a[0] = 0xf9;
                buf.push(ui8a.slice(0, 3));
                success = true;
            } else {
                encodeFloat32(float);
                decoded = readFloat32(ui8a, 1);
                if (float === decoded) {
                    ui8a[0] = 0xfa;
                    buf.push(ui8a.slice(0, 5));
                    success = true;
                }
            }
        }
        if (!success) {
            encodeFloat64(float);
            decoded = readFloat64(ui8a, 1);
            ui8a[0] = 0xfb;
            buf.push(ui8a.slice(0, 9));
        }
    }
}
/**
 * @param {Token} token
 * @param {EncodeOptions} options
 * @returns {number}
 */ encodeFloat.encodedSize = function encodedSize(token, options) {
    const float = token.value;
    if (float === false || float === true || float === null || float === undefined) {
        return 1;
    }
    if (!options || options.float64 !== true) {
        encodeFloat16(float);
        let decoded = readFloat16(ui8a, 1);
        if (float === decoded || Number.isNaN(float)) {
            return 3;
        }
        encodeFloat32(float);
        decoded = readFloat32(ui8a, 1);
        if (float === decoded) {
            return 5;
        }
    }
    return 9;
};
const buffer = new ArrayBuffer(9);
const dataView = new DataView(buffer, 1);
const ui8a = new Uint8Array(buffer, 0);
/**
 * @param {number} inp
 */ function encodeFloat16(inp) {
    if (inp === Infinity) {
        dataView.setUint16(0, 0x7c00, false);
    } else if (inp === -Infinity) {
        dataView.setUint16(0, 0xfc00, false);
    } else if (Number.isNaN(inp)) {
        dataView.setUint16(0, 0x7e00, false);
    } else {
        dataView.setFloat32(0, inp);
        const valu32 = dataView.getUint32(0);
        const exponent = (valu32 & 0x7f800000) >> 23;
        const mantissa = valu32 & 0x7fffff;
        /* c8 ignore next 6 */ if (exponent === 0xff) {
            // too big, Infinity, but this should be hard (impossible?) to trigger
            dataView.setUint16(0, 0x7c00, false);
        } else if (exponent === 0x00) {
            // 0.0, -0.0 and subnormals, shouldn't be possible to get here because 0.0 should be counted as an int
            dataView.setUint16(0, (inp & 0x80000000) >> 16 | mantissa >> 13, false);
        } else {
            // chunks of logic here borrowed from https://github.com/PJK/libcbor/blob/c78f437182533e3efa8d963ff4b945bb635c2284/src/cbor/encoding.c#L127
            const logicalExponent = exponent - 127;
            // Now we know that 2^exponent <= 0 logically
            /* c8 ignore next 6 */ if (logicalExponent < -24) {
                /* No unambiguous representation exists, this float is not a half float
          and is too small to be represented using a half, round off to zero.
          Consistent with the reference implementation. */ // should be difficult (impossible?) to get here in JS
                dataView.setUint16(0, 0);
            } else if (logicalExponent < -14) {
                /* Offset the remaining decimal places by shifting the significand, the
          value is lost. This is an implementation decision that works around the
          absence of standard half-float in the language. */ dataView.setUint16(0, (valu32 & 0x80000000) >> 16 | 1 << 24 + logicalExponent, false);
            } else {
                dataView.setUint16(0, (valu32 & 0x80000000) >> 16 | logicalExponent + 15 << 10 | mantissa >> 13, false);
            }
        }
    }
}
/**
 * @param {Uint8Array} ui8a
 * @param {number} pos
 * @returns {number}
 */ function readFloat16(ui8a, pos) {
    if (ui8a.length - pos < 2) {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} not enough data for float16`);
    }
    const half = (ui8a[pos] << 8) + ui8a[pos + 1];
    if (half === 0x7c00) {
        return Infinity;
    }
    if (half === 0xfc00) {
        return -Infinity;
    }
    if (half === 0x7e00) {
        return NaN;
    }
    const exp = half >> 10 & 0x1f;
    const mant = half & 0x3ff;
    let val;
    if (exp === 0) {
        val = mant * 2 ** -24;
    } else if (exp !== 31) {
        val = (mant + 1024) * 2 ** (exp - 25);
    /* c8 ignore next 4 */ } else {
        // may not be possible to get here
        val = mant === 0 ? Infinity : NaN;
    }
    return half & 0x8000 ? -val : val;
}
/**
 * @param {number} inp
 */ function encodeFloat32(inp) {
    dataView.setFloat32(0, inp, false);
}
/**
 * @param {Uint8Array} ui8a
 * @param {number} pos
 * @returns {number}
 */ function readFloat32(ui8a, pos) {
    if (ui8a.length - pos < 4) {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} not enough data for float32`);
    }
    const offset = (ui8a.byteOffset || 0) + pos;
    return new DataView(ui8a.buffer, offset, 4).getFloat32(0, false);
}
/**
 * @param {number} inp
 */ function encodeFloat64(inp) {
    dataView.setFloat64(0, inp, false);
}
/**
 * @param {Uint8Array} ui8a
 * @param {number} pos
 * @returns {number}
 */ function readFloat64(ui8a, pos) {
    if (ui8a.length - pos < 8) {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} not enough data for float64`);
    }
    const offset = (ui8a.byteOffset || 0) + pos;
    return new DataView(ui8a.buffer, offset, 8).getFloat64(0, false);
}
/**
 * @param {Token} _tok1
 * @param {Token} _tok2
 * @returns {number}
 */ encodeFloat.compareTokens = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeUint"].compareTokens /*
encodeFloat.compareTokens = function compareTokens (_tok1, _tok2) {
  return _tok1
  throw new Error(`${encodeErrPrefix} cannot use floats as map keys`)
}
*/ ;
}}),
"[project]/node_modules/cborg/lib/jump.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "jump": (()=>jump),
    "quick": (()=>quick),
    "quickEncodeToken": (()=>quickEncodeToken)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/token.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/0uint.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$1negint$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/1negint.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$2bytes$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/2bytes.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$3string$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/3string.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$4array$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/4array.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$5map$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/5map.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$6tag$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/6tag.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$7float$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/7float.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/common.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/byte-utils.js [client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
/**
 * @typedef {import('../interface').DecodeOptions} DecodeOptions
 */ /**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} minor
 */ function invalidMinor(data, pos, minor) {
    throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} encountered invalid minor (${minor}) for major ${data[pos] >>> 5}`);
}
/**
 * @param {string} msg
 * @returns {()=>any}
 */ function errorer(msg) {
    return ()=>{
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} ${msg}`);
    };
}
const jump = [];
// unsigned integer, 0x00..0x17 (0..23)
for(let i = 0; i <= 0x17; i++){
    jump[i] = invalidMinor // uint.decodeUintCompact, handled by quick[]
    ;
}
jump[0x18] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // unsigned integer, one-byte uint8_t follows
["decodeUint8"];
jump[0x19] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // unsigned integer, two-byte uint16_t follows
["decodeUint16"];
jump[0x1a] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // unsigned integer, four-byte uint32_t follows
["decodeUint32"];
jump[0x1b] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // unsigned integer, eight-byte uint64_t follows
["decodeUint64"];
jump[0x1c] = invalidMinor;
jump[0x1d] = invalidMinor;
jump[0x1e] = invalidMinor;
jump[0x1f] = invalidMinor;
// negative integer, -1-0x00..-1-0x17 (-1..-24)
for(let i = 0x20; i <= 0x37; i++){
    jump[i] = invalidMinor // negintDecode, handled by quick[]
    ;
}
jump[0x38] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$1negint$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // negative integer, -1-n one-byte uint8_t for n follows
["decodeNegint8"];
jump[0x39] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$1negint$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // negative integer, -1-n two-byte uint16_t for n follows
["decodeNegint16"];
jump[0x3a] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$1negint$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // negative integer, -1-n four-byte uint32_t for follows
["decodeNegint32"];
jump[0x3b] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$1negint$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // negative integer, -1-n eight-byte uint64_t for follows
["decodeNegint64"];
jump[0x3c] = invalidMinor;
jump[0x3d] = invalidMinor;
jump[0x3e] = invalidMinor;
jump[0x3f] = invalidMinor;
// byte string, 0x00..0x17 bytes follow
for(let i = 0x40; i <= 0x57; i++){
    jump[i] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$2bytes$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeBytesCompact"];
}
jump[0x58] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$2bytes$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // byte string, one-byte uint8_t for n, and then n bytes follow
["decodeBytes8"];
jump[0x59] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$2bytes$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // byte string, two-byte uint16_t for n, and then n bytes follow
["decodeBytes16"];
jump[0x5a] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$2bytes$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // byte string, four-byte uint32_t for n, and then n bytes follow
["decodeBytes32"];
jump[0x5b] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$2bytes$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // byte string, eight-byte uint64_t for n, and then n bytes follow
["decodeBytes64"];
jump[0x5c] = invalidMinor;
jump[0x5d] = invalidMinor;
jump[0x5e] = invalidMinor;
jump[0x5f] = errorer('indefinite length bytes/strings are not supported') // byte string, byte strings follow, terminated by "break"
;
// UTF-8 string 0x00..0x17 bytes follow
for(let i = 0x60; i <= 0x77; i++){
    jump[i] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$3string$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeStringCompact"];
}
jump[0x78] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$3string$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // UTF-8 string, one-byte uint8_t for n, and then n bytes follow
["decodeString8"];
jump[0x79] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$3string$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // UTF-8 string, two-byte uint16_t for n, and then n bytes follow
["decodeString16"];
jump[0x7a] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$3string$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // UTF-8 string, four-byte uint32_t for n, and then n bytes follow
["decodeString32"];
jump[0x7b] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$3string$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // UTF-8 string, eight-byte uint64_t for n, and then n bytes follow
["decodeString64"];
jump[0x7c] = invalidMinor;
jump[0x7d] = invalidMinor;
jump[0x7e] = invalidMinor;
jump[0x7f] = errorer('indefinite length bytes/strings are not supported') // UTF-8 strings follow, terminated by "break"
;
// array, 0x00..0x17 data items follow
for(let i = 0x80; i <= 0x97; i++){
    jump[i] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$4array$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeArrayCompact"];
}
jump[0x98] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$4array$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // array, one-byte uint8_t for n, and then n data items follow
["decodeArray8"];
jump[0x99] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$4array$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // array, two-byte uint16_t for n, and then n data items follow
["decodeArray16"];
jump[0x9a] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$4array$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // array, four-byte uint32_t for n, and then n data items follow
["decodeArray32"];
jump[0x9b] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$4array$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // array, eight-byte uint64_t for n, and then n data items follow
["decodeArray64"];
jump[0x9c] = invalidMinor;
jump[0x9d] = invalidMinor;
jump[0x9e] = invalidMinor;
jump[0x9f] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$4array$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // array, data items follow, terminated by "break"
["decodeArrayIndefinite"];
// map, 0x00..0x17 pairs of data items follow
for(let i = 0xa0; i <= 0xb7; i++){
    jump[i] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$5map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeMapCompact"];
}
jump[0xb8] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$5map$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // map, one-byte uint8_t for n, and then n pairs of data items follow
["decodeMap8"];
jump[0xb9] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$5map$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // map, two-byte uint16_t for n, and then n pairs of data items follow
["decodeMap16"];
jump[0xba] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$5map$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // map, four-byte uint32_t for n, and then n pairs of data items follow
["decodeMap32"];
jump[0xbb] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$5map$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // map, eight-byte uint64_t for n, and then n pairs of data items follow
["decodeMap64"];
jump[0xbc] = invalidMinor;
jump[0xbd] = invalidMinor;
jump[0xbe] = invalidMinor;
jump[0xbf] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$5map$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // map, pairs of data items follow, terminated by "break"
["decodeMapIndefinite"];
// tags
for(let i = 0xc0; i <= 0xd7; i++){
    jump[i] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$6tag$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeTagCompact"];
}
jump[0xd8] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$6tag$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeTag8"];
jump[0xd9] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$6tag$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeTag16"];
jump[0xda] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$6tag$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeTag32"];
jump[0xdb] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$6tag$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeTag64"];
jump[0xdc] = invalidMinor;
jump[0xdd] = invalidMinor;
jump[0xde] = invalidMinor;
jump[0xdf] = invalidMinor;
// 0xe0..0xf3 simple values, unsupported
for(let i = 0xe0; i <= 0xf3; i++){
    jump[i] = errorer('simple values are not supported');
}
jump[0xf4] = invalidMinor // false, handled by quick[]
;
jump[0xf5] = invalidMinor // true, handled by quick[]
;
jump[0xf6] = invalidMinor // null, handled by quick[]
;
jump[0xf7] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$7float$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // undefined
["decodeUndefined"];
jump[0xf8] = errorer('simple values are not supported') // simple value, one byte follows, unsupported
;
jump[0xf9] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$7float$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // half-precision float (two-byte IEEE 754)
["decodeFloat16"];
jump[0xfa] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$7float$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // single-precision float (four-byte IEEE 754)
["decodeFloat32"];
jump[0xfb] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$7float$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // double-precision float (eight-byte IEEE 754)
["decodeFloat64"];
jump[0xfc] = invalidMinor;
jump[0xfd] = invalidMinor;
jump[0xfe] = invalidMinor;
jump[0xff] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$7float$2e$js__$5b$client$5d$__$28$ecmascript$29$__ // "break" stop code
["decodeBreak"];
const quick = [];
// ints <24
for(let i = 0; i < 24; i++){
    quick[i] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].uint, i, 1);
}
// negints >= -24
for(let i = -1; i >= -24; i--){
    quick[31 - i] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].negint, i, 1);
}
// empty bytes
quick[0x40] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].bytes, new Uint8Array(0), 1);
// empty string
quick[0x60] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].string, '', 1);
// empty list
quick[0x80] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].array, 0, 1);
// empty map
quick[0xa0] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].map, 0, 1);
// false
quick[0xf4] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].false, false, 1);
// true
quick[0xf5] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].true, true, 1);
// null
quick[0xf6] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].null, null, 1);
function quickEncodeToken(token) {
    switch(token.type){
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].false:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["fromArray"])([
                0xf4
            ]);
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].true:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["fromArray"])([
                0xf5
            ]);
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].null:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["fromArray"])([
                0xf6
            ]);
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].bytes:
            if (!token.value.length) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["fromArray"])([
                    0x40
                ]);
            }
            return;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].string:
            if (token.value === '') {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["fromArray"])([
                    0x60
                ]);
            }
            return;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].array:
            if (token.value === 0) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["fromArray"])([
                    0x80
                ]);
            }
            /* c8 ignore next 2 */ // shouldn't be possible if this were called when there was only one token
            return;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].map:
            if (token.value === 0) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["fromArray"])([
                    0xa0
                ]);
            }
            /* c8 ignore next 2 */ // shouldn't be possible if this were called when there was only one token
            return;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].uint:
            if (token.value < 24) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["fromArray"])([
                    Number(token.value)
                ]);
            }
            return;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].negint:
            if (token.value >= -24) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["fromArray"])([
                    31 - Number(token.value)
                ]);
            }
    }
}
}}),
"[project]/node_modules/cborg/lib/encode.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Ref": (()=>Ref),
    "encode": (()=>encode),
    "encodeCustom": (()=>encodeCustom),
    "makeCborEncoders": (()=>makeCborEncoders),
    "objectToTokens": (()=>objectToTokens)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$is$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/is.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/token.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$bl$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/bl.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/common.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$jump$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/jump.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/byte-utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/0uint.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$1negint$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/1negint.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$2bytes$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/2bytes.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$3string$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/3string.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$4array$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/4array.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$5map$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/5map.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$6tag$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/6tag.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$7float$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/7float.js [client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
/**
 * @typedef {import('../interface').EncodeOptions} EncodeOptions
 * @typedef {import('../interface').OptionalTypeEncoder} OptionalTypeEncoder
 * @typedef {import('../interface').Reference} Reference
 * @typedef {import('../interface').StrictTypeEncoder} StrictTypeEncoder
 * @typedef {import('../interface').TokenTypeEncoder} TokenTypeEncoder
 * @typedef {import('../interface').TokenOrNestedTokens} TokenOrNestedTokens
 */ /** @type {EncodeOptions} */ const defaultEncodeOptions = {
    float64: false,
    mapSorter,
    quickEncodeToken: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$jump$2e$js__$5b$client$5d$__$28$ecmascript$29$__["quickEncodeToken"]
};
function makeCborEncoders() {
    const encoders = [];
    encoders[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].uint.major] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$0uint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeUint"];
    encoders[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].negint.major] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$1negint$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeNegint"];
    encoders[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].bytes.major] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$2bytes$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeBytes"];
    encoders[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].string.major] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$3string$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeString"];
    encoders[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].array.major] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$4array$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeArray"];
    encoders[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].map.major] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$5map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeMap"];
    encoders[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].tag.major] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$6tag$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeTag"];
    encoders[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].float.major] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$7float$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeFloat"];
    return encoders;
}
const cborEncoders = makeCborEncoders();
const buf = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$bl$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Bl"]();
/** @implements {Reference} */ class Ref {
    /**
   * @param {object|any[]} obj
   * @param {Reference|undefined} parent
   */ constructor(obj, parent){
        this.obj = obj;
        this.parent = parent;
    }
    /**
   * @param {object|any[]} obj
   * @returns {boolean}
   */ includes(obj) {
        /** @type {Reference|undefined} */ let p = this;
        do {
            if (p.obj === obj) {
                return true;
            }
        }while (p = p.parent) // eslint-disable-line
        return false;
    }
    /**
   * @param {Reference|undefined} stack
   * @param {object|any[]} obj
   * @returns {Reference}
   */ static createCheck(stack, obj) {
        if (stack && stack.includes(obj)) {
            throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeErrPrefix"]} object contains circular references`);
        }
        return new Ref(obj, stack);
    }
}
const simpleTokens = {
    null: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].null, null),
    undefined: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].undefined, undefined),
    true: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].true, true),
    false: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].false, false),
    emptyArray: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].array, 0),
    emptyMap: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].map, 0)
};
/** @type {{[typeName: string]: StrictTypeEncoder}} */ const typeEncoders = {
    /**
   * @param {any} obj
   * @param {string} _typ
   * @param {EncodeOptions} _options
   * @param {Reference} [_refStack]
   * @returns {TokenOrNestedTokens}
   */ number (obj, _typ, _options, _refStack) {
        if (!Number.isInteger(obj) || !Number.isSafeInteger(obj)) {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].float, obj);
        } else if (obj >= 0) {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].uint, obj);
        } else {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].negint, obj);
        }
    },
    /**
   * @param {any} obj
   * @param {string} _typ
   * @param {EncodeOptions} _options
   * @param {Reference} [_refStack]
   * @returns {TokenOrNestedTokens}
   */ bigint (obj, _typ, _options, _refStack) {
        if (obj >= BigInt(0)) {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].uint, obj);
        } else {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].negint, obj);
        }
    },
    /**
   * @param {any} obj
   * @param {string} _typ
   * @param {EncodeOptions} _options
   * @param {Reference} [_refStack]
   * @returns {TokenOrNestedTokens}
   */ Uint8Array (obj, _typ, _options, _refStack) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].bytes, obj);
    },
    /**
   * @param {any} obj
   * @param {string} _typ
   * @param {EncodeOptions} _options
   * @param {Reference} [_refStack]
   * @returns {TokenOrNestedTokens}
   */ string (obj, _typ, _options, _refStack) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].string, obj);
    },
    /**
   * @param {any} obj
   * @param {string} _typ
   * @param {EncodeOptions} _options
   * @param {Reference} [_refStack]
   * @returns {TokenOrNestedTokens}
   */ boolean (obj, _typ, _options, _refStack) {
        return obj ? simpleTokens.true : simpleTokens.false;
    },
    /**
   * @param {any} _obj
   * @param {string} _typ
   * @param {EncodeOptions} _options
   * @param {Reference} [_refStack]
   * @returns {TokenOrNestedTokens}
   */ null (_obj, _typ, _options, _refStack) {
        return simpleTokens.null;
    },
    /**
   * @param {any} _obj
   * @param {string} _typ
   * @param {EncodeOptions} _options
   * @param {Reference} [_refStack]
   * @returns {TokenOrNestedTokens}
   */ undefined (_obj, _typ, _options, _refStack) {
        return simpleTokens.undefined;
    },
    /**
   * @param {any} obj
   * @param {string} _typ
   * @param {EncodeOptions} _options
   * @param {Reference} [_refStack]
   * @returns {TokenOrNestedTokens}
   */ ArrayBuffer (obj, _typ, _options, _refStack) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].bytes, new Uint8Array(obj));
    },
    /**
   * @param {any} obj
   * @param {string} _typ
   * @param {EncodeOptions} _options
   * @param {Reference} [_refStack]
   * @returns {TokenOrNestedTokens}
   */ DataView (obj, _typ, _options, _refStack) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].bytes, new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength));
    },
    /**
   * @param {any} obj
   * @param {string} _typ
   * @param {EncodeOptions} options
   * @param {Reference} [refStack]
   * @returns {TokenOrNestedTokens}
   */ Array (obj, _typ, options, refStack) {
        if (!obj.length) {
            if (options.addBreakTokens === true) {
                return [
                    simpleTokens.emptyArray,
                    new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].break)
                ];
            }
            return simpleTokens.emptyArray;
        }
        refStack = Ref.createCheck(refStack, obj);
        const entries = [];
        let i = 0;
        for (const e of obj){
            entries[i++] = objectToTokens(e, options, refStack);
        }
        if (options.addBreakTokens) {
            return [
                new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].array, obj.length),
                entries,
                new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].break)
            ];
        }
        return [
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].array, obj.length),
            entries
        ];
    },
    /**
   * @param {any} obj
   * @param {string} typ
   * @param {EncodeOptions} options
   * @param {Reference} [refStack]
   * @returns {TokenOrNestedTokens}
   */ Object (obj, typ, options, refStack) {
        // could be an Object or a Map
        const isMap = typ !== 'Object';
        // it's slightly quicker to use Object.keys() than Object.entries()
        const keys = isMap ? obj.keys() : Object.keys(obj);
        const length = isMap ? obj.size : keys.length;
        if (!length) {
            if (options.addBreakTokens === true) {
                return [
                    simpleTokens.emptyMap,
                    new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].break)
                ];
            }
            return simpleTokens.emptyMap;
        }
        refStack = Ref.createCheck(refStack, obj);
        /** @type {TokenOrNestedTokens[]} */ const entries = [];
        let i = 0;
        for (const key of keys){
            entries[i++] = [
                objectToTokens(key, options, refStack),
                objectToTokens(isMap ? obj.get(key) : obj[key], options, refStack)
            ];
        }
        sortMapEntries(entries, options);
        if (options.addBreakTokens) {
            return [
                new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].map, length),
                entries,
                new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].break)
            ];
        }
        return [
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].map, length),
            entries
        ];
    }
};
typeEncoders.Map = typeEncoders.Object;
typeEncoders.Buffer = typeEncoders.Uint8Array;
for (const typ of 'Uint8Clamped Uint16 Uint32 Int8 Int16 Int32 BigUint64 BigInt64 Float32 Float64'.split(' ')){
    typeEncoders[`${typ}Array`] = typeEncoders.DataView;
}
/**
 * @param {any} obj
 * @param {EncodeOptions} [options]
 * @param {Reference} [refStack]
 * @returns {TokenOrNestedTokens}
 */ function objectToTokens(obj, options = {}, refStack) {
    const typ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$is$2e$js__$5b$client$5d$__$28$ecmascript$29$__["is"])(obj);
    const customTypeEncoder = options && options.typeEncoders && /** @type {OptionalTypeEncoder} */ options.typeEncoders[typ] || typeEncoders[typ];
    if (typeof customTypeEncoder === 'function') {
        const tokens = customTypeEncoder(obj, typ, options, refStack);
        if (tokens != null) {
            return tokens;
        }
    }
    const typeEncoder = typeEncoders[typ];
    if (!typeEncoder) {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeErrPrefix"]} unsupported type: ${typ}`);
    }
    return typeEncoder(obj, typ, options, refStack);
}
/*
CBOR key sorting is a mess.

The canonicalisation recommendation from https://tools.ietf.org/html/rfc7049#section-3.9
includes the wording:

> The keys in every map must be sorted lowest value to highest.
> Sorting is performed on the bytes of the representation of the key
> data items without paying attention to the 3/5 bit splitting for
> major types.
> ...
>  *  If two keys have different lengths, the shorter one sorts
      earlier;
>  *  If two keys have the same length, the one with the lower value
      in (byte-wise) lexical order sorts earlier.

1. It is not clear what "bytes of the representation of the key" means: is it
   the CBOR representation, or the binary representation of the object itself?
   Consider the int and uint difference here.
2. It is not clear what "without paying attention to" means: do we include it
   and compare on that? Or do we omit the special prefix byte, (mostly) treating
   the key in its plain binary representation form.

The FIDO 2.0: Client To Authenticator Protocol spec takes the original CBOR
wording and clarifies it according to their understanding.
https://fidoalliance.org/specs/fido-v2.0-rd-20170927/fido-client-to-authenticator-protocol-v2.0-rd-20170927.html#message-encoding

> The keys in every map must be sorted lowest value to highest. Sorting is
> performed on the bytes of the representation of the key data items without
> paying attention to the 3/5 bit splitting for major types. The sorting rules
> are:
>  * If the major types are different, the one with the lower value in numerical
>    order sorts earlier.
>  * If two keys have different lengths, the shorter one sorts earlier;
>  * If two keys have the same length, the one with the lower value in
>    (byte-wise) lexical order sorts earlier.

Some other implementations, such as borc, do a full encode then do a
length-first, byte-wise-second comparison:
https://github.com/dignifiedquire/borc/blob/b6bae8b0bcde7c3976b0f0f0957208095c392a36/src/encoder.js#L358
https://github.com/dignifiedquire/borc/blob/b6bae8b0bcde7c3976b0f0f0957208095c392a36/src/utils.js#L143-L151

This has the benefit of being able to easily handle arbitrary keys, including
complex types (maps and arrays).

We'll opt for the FIDO approach, since it affords some efficies since we don't
need a full encode of each key to determine order and can defer to the types
to determine how to most efficiently order their values (i.e. int and uint
ordering can be done on the numbers, no need for byte-wise, for example).

Recommendation: stick to single key types or you'll get into trouble, and prefer
string keys because it's much simpler that way.
*/ /*
(UPDATE, Dec 2020)
https://tools.ietf.org/html/rfc8949 is the updated CBOR spec and clarifies some
of the questions above with a new recommendation for sorting order being much
closer to what would be expected in other environments (i.e. no length-first
weirdness).
This new sorting order is not yet implemented here but could be added as an
option. "Determinism" (canonicity) is system dependent and it's difficult to
change existing systems that are built with existing expectations. So if a new
ordering is introduced here, the old needs to be kept as well with the user
having the option.
*/ /**
 * @param {TokenOrNestedTokens[]} entries
 * @param {EncodeOptions} options
 */ function sortMapEntries(entries, options) {
    if (options.mapSorter) {
        entries.sort(options.mapSorter);
    }
}
/**
 * @param {(Token|Token[])[]} e1
 * @param {(Token|Token[])[]} e2
 * @returns {number}
 */ function mapSorter(e1, e2) {
    // the key position ([0]) could have a single token or an array
    // almost always it'll be a single token but complex key might get involved
    /* c8 ignore next 2 */ const keyToken1 = Array.isArray(e1[0]) ? e1[0][0] : e1[0];
    const keyToken2 = Array.isArray(e2[0]) ? e2[0][0] : e2[0];
    // different key types
    if (keyToken1.type !== keyToken2.type) {
        return keyToken1.type.compare(keyToken2.type);
    }
    const major = keyToken1.type.major;
    // TODO: handle case where cmp === 0 but there are more keyToken e. complex type)
    const tcmp = cborEncoders[major].compareTokens(keyToken1, keyToken2);
    /* c8 ignore next 5 */ if (tcmp === 0) {
        // duplicate key or complex type where the first token matched,
        // i.e. a map or array and we're only comparing the opening token
        console.warn('WARNING: complex key types used, CBOR key sorting guarantees are gone');
    }
    return tcmp;
}
/**
 * @param {Bl} buf
 * @param {TokenOrNestedTokens} tokens
 * @param {TokenTypeEncoder[]} encoders
 * @param {EncodeOptions} options
 */ function tokensToEncoded(buf, tokens, encoders, options) {
    if (Array.isArray(tokens)) {
        for (const token of tokens){
            tokensToEncoded(buf, token, encoders, options);
        }
    } else {
        encoders[tokens.type.major](buf, tokens, options);
    }
}
/**
 * @param {any} data
 * @param {TokenTypeEncoder[]} encoders
 * @param {EncodeOptions} options
 * @returns {Uint8Array}
 */ function encodeCustom(data, encoders, options) {
    const tokens = objectToTokens(data, options);
    if (!Array.isArray(tokens) && options.quickEncodeToken) {
        const quickBytes = options.quickEncodeToken(tokens);
        if (quickBytes) {
            return quickBytes;
        }
        const encoder = encoders[tokens.type.major];
        if (encoder.encodedSize) {
            const size = encoder.encodedSize(tokens, options);
            const buf = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$bl$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Bl"](size);
            encoder(buf, tokens, options);
            /* c8 ignore next 4 */ // this would be a problem with encodedSize() functions
            if (buf.chunks.length !== 1) {
                throw new Error(`Unexpected error: pre-calculated length for ${tokens} was wrong`);
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["asU8A"])(buf.chunks[0]);
        }
    }
    buf.reset();
    tokensToEncoded(buf, tokens, encoders, options);
    return buf.toBytes(true);
}
/**
 * @param {any} data
 * @param {EncodeOptions} [options]
 * @returns {Uint8Array}
 */ function encode(data, options) {
    options = Object.assign({}, defaultEncodeOptions, options);
    return encodeCustom(data, cborEncoders, options);
}
;
}}),
"[project]/node_modules/cborg/lib/decode.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Tokeniser": (()=>Tokeniser),
    "decode": (()=>decode),
    "decodeFirst": (()=>decodeFirst),
    "tokensToObject": (()=>tokensToObject)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/common.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/token.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$jump$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/jump.js [client] (ecmascript)");
;
;
;
/**
 * @typedef {import('./token.js').Token} Token
 * @typedef {import('../interface').DecodeOptions} DecodeOptions
 * @typedef {import('../interface').DecodeTokenizer} DecodeTokenizer
 */ const defaultDecodeOptions = {
    strict: false,
    allowIndefinite: true,
    allowUndefined: true,
    allowBigInt: true
};
/**
 * @implements {DecodeTokenizer}
 */ class Tokeniser {
    /**
   * @param {Uint8Array} data
   * @param {DecodeOptions} options
   */ constructor(data, options = {}){
        this._pos = 0;
        this.data = data;
        this.options = options;
    }
    pos() {
        return this._pos;
    }
    done() {
        return this._pos >= this.data.length;
    }
    next() {
        const byt = this.data[this._pos];
        let token = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$jump$2e$js__$5b$client$5d$__$28$ecmascript$29$__["quick"][byt];
        if (token === undefined) {
            const decoder = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$jump$2e$js__$5b$client$5d$__$28$ecmascript$29$__["jump"][byt];
            /* c8 ignore next 4 */ // if we're here then there's something wrong with our jump or quick lists!
            if (!decoder) {
                throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} no decoder for major type ${byt >>> 5} (byte 0x${byt.toString(16).padStart(2, '0')})`);
            }
            const minor = byt & 31;
            token = decoder(this.data, this._pos, minor, this.options);
        }
        // @ts-ignore we get to assume encodedLength is set (crossing fingers slightly)
        this._pos += token.encodedLength;
        return token;
    }
}
const DONE = Symbol.for('DONE');
const BREAK = Symbol.for('BREAK');
/**
 * @param {Token} token
 * @param {DecodeTokenizer} tokeniser
 * @param {DecodeOptions} options
 * @returns {any|BREAK|DONE}
 */ function tokenToArray(token, tokeniser, options) {
    const arr = [];
    for(let i = 0; i < token.value; i++){
        const value = tokensToObject(tokeniser, options);
        if (value === BREAK) {
            if (token.value === Infinity) {
                break;
            }
            throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} got unexpected break to lengthed array`);
        }
        if (value === DONE) {
            throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} found array but not enough entries (got ${i}, expected ${token.value})`);
        }
        arr[i] = value;
    }
    return arr;
}
/**
 * @param {Token} token
 * @param {DecodeTokenizer} tokeniser
 * @param {DecodeOptions} options
 * @returns {any|BREAK|DONE}
 */ function tokenToMap(token, tokeniser, options) {
    const useMaps = options.useMaps === true;
    const obj = useMaps ? undefined : {};
    const m = useMaps ? new Map() : undefined;
    for(let i = 0; i < token.value; i++){
        const key = tokensToObject(tokeniser, options);
        if (key === BREAK) {
            if (token.value === Infinity) {
                break;
            }
            throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} got unexpected break to lengthed map`);
        }
        if (key === DONE) {
            throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} found map but not enough entries (got ${i} [no key], expected ${token.value})`);
        }
        if (useMaps !== true && typeof key !== 'string') {
            throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} non-string keys not supported (got ${typeof key})`);
        }
        if (options.rejectDuplicateMapKeys === true) {
            // @ts-ignore
            if (useMaps && m.has(key) || !useMaps && key in obj) {
                throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} found repeat map key "${key}"`);
            }
        }
        const value = tokensToObject(tokeniser, options);
        if (value === DONE) {
            throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} found map but not enough entries (got ${i} [no value], expected ${token.value})`);
        }
        if (useMaps) {
            // @ts-ignore TODO reconsider this .. maybe needs to be strict about key types
            m.set(key, value);
        } else {
            // @ts-ignore TODO reconsider this .. maybe needs to be strict about key types
            obj[key] = value;
        }
    }
    // @ts-ignore c'mon man
    return useMaps ? m : obj;
}
/**
 * @param {DecodeTokenizer} tokeniser
 * @param {DecodeOptions} options
 * @returns {any|BREAK|DONE}
 */ function tokensToObject(tokeniser, options) {
    // should we support array as an argument?
    // check for tokenIter[Symbol.iterator] and replace tokenIter with what that returns?
    if (tokeniser.done()) {
        return DONE;
    }
    const token = tokeniser.next();
    if (token.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].break) {
        return BREAK;
    }
    if (token.type.terminal) {
        return token.value;
    }
    if (token.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].array) {
        return tokenToArray(token, tokeniser, options);
    }
    if (token.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].map) {
        return tokenToMap(token, tokeniser, options);
    }
    if (token.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].tag) {
        if (options.tags && typeof options.tags[token.value] === 'function') {
            const tagged = tokensToObject(tokeniser, options);
            return options.tags[token.value](tagged);
        }
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} tag not supported (${token.value})`);
    }
    /* c8 ignore next */ throw new Error('unsupported');
}
/**
 * @param {Uint8Array} data
 * @param {DecodeOptions} [options]
 * @returns {[any, Uint8Array]}
 */ function decodeFirst(data, options) {
    if (!(data instanceof Uint8Array)) {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} data to decode must be a Uint8Array`);
    }
    options = Object.assign({}, defaultDecodeOptions, options);
    const tokeniser = options.tokenizer || new Tokeniser(data, options);
    const decoded = tokensToObject(tokeniser, options);
    if (decoded === DONE) {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} did not find any content to decode`);
    }
    if (decoded === BREAK) {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} got unexpected break`);
    }
    return [
        decoded,
        data.subarray(tokeniser.pos())
    ];
}
/**
 * @param {Uint8Array} data
 * @param {DecodeOptions} [options]
 * @returns {any}
 */ function decode(data, options) {
    const [decoded, remainder] = decodeFirst(data, options);
    if (remainder.length > 0) {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} too many terminals, data makes no sense`);
    }
    return decoded;
}
;
}}),
"[project]/node_modules/cborg/cborg.js [client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$encode$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/encode.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$decode$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/decode.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/token.js [client] (ecmascript)");
;
;
;
;
}}),
"[project]/node_modules/cborg/cborg.js [client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$encode$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/encode.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$decode$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/decode.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/token.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$cborg$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/cborg/cborg.js [client] (ecmascript) <locals>");
}}),
"[project]/node_modules/cborg/lib/json/encode.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "encode": (()=>encode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/token.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$encode$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/encode.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/common.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/byte-utils.js [client] (ecmascript)");
;
;
;
;
/**
 * @typedef {import('../../interface').EncodeOptions} EncodeOptions
 * @typedef {import('../token').Token} Token
 * @typedef {import('../bl').Bl} Bl
 */ class JSONEncoder extends Array {
    constructor(){
        super();
        /** @type {{type:Type,elements:number}[]} */ this.inRecursive = [];
    }
    /**
   * @param {Bl} buf
   */ prefix(buf) {
        const recurs = this.inRecursive[this.inRecursive.length - 1];
        if (recurs) {
            if (recurs.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].array) {
                recurs.elements++;
                if (recurs.elements !== 1) {
                    buf.push([
                        44
                    ]) // ','
                    ;
                }
            }
            if (recurs.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].map) {
                recurs.elements++;
                if (recurs.elements !== 1) {
                    if (recurs.elements % 2 === 1) {
                        buf.push([
                            44
                        ]) // ','
                        ;
                    } else {
                        buf.push([
                            58
                        ]) // ':'
                        ;
                    }
                }
            }
        }
    }
    /**
   * @param {Bl} buf
   * @param {Token} token
   */ [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].uint.major](buf, token) {
        this.prefix(buf);
        const is = String(token.value);
        const isa = [];
        for(let i = 0; i < is.length; i++){
            isa[i] = is.charCodeAt(i);
        }
        buf.push(isa);
    }
    /**
   * @param {Bl} buf
   * @param {Token} token
   */ [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].negint.major](buf, token) {
        // @ts-ignore hack
        this[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].uint.major](buf, token);
    }
    /**
   * @param {Bl} _buf
   * @param {Token} _token
   */ [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].bytes.major](_buf, _token) {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeErrPrefix"]} unsupported type: Uint8Array`);
    }
    /**
   * @param {Bl} buf
   * @param {Token} token
   */ [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].string.major](buf, token) {
        this.prefix(buf);
        // buf.push(34) // '"'
        // encodeUtf8(token.value, byts)
        // buf.push(34) // '"'
        const byts = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["fromString"])(JSON.stringify(token.value));
        buf.push(byts.length > 32 ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["asU8A"])(byts) : byts);
    }
    /**
   * @param {Bl} buf
   * @param {Token} _token
   */ [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].array.major](buf, _token) {
        this.prefix(buf);
        this.inRecursive.push({
            type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].array,
            elements: 0
        });
        buf.push([
            91
        ]) // '['
        ;
    }
    /**
   * @param {Bl} buf
   * @param {Token} _token
   */ [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].map.major](buf, _token) {
        this.prefix(buf);
        this.inRecursive.push({
            type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].map,
            elements: 0
        });
        buf.push([
            123
        ]) // '{'
        ;
    }
    /**
   * @param {Bl} _buf
   * @param {Token} _token
   */ [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].tag.major](_buf, _token) {}
    /**
   * @param {Bl} buf
   * @param {Token} token
   */ [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].float.major](buf, token) {
        if (token.type.name === 'break') {
            const recurs = this.inRecursive.pop();
            if (recurs) {
                if (recurs.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].array) {
                    buf.push([
                        93
                    ]) // ']'
                    ;
                } else if (recurs.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].map) {
                    buf.push([
                        125
                    ]) // '}'
                    ;
                /* c8 ignore next 3 */ } else {
                    throw new Error('Unexpected recursive type; this should not happen!');
                }
                return;
            }
            /* c8 ignore next 2 */ throw new Error('Unexpected break; this should not happen!');
        }
        if (token.value === undefined) {
            throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeErrPrefix"]} unsupported type: undefined`);
        }
        this.prefix(buf);
        if (token.type.name === 'true') {
            buf.push([
                116,
                114,
                117,
                101
            ]) // 'true'
            ;
            return;
        } else if (token.type.name === 'false') {
            buf.push([
                102,
                97,
                108,
                115,
                101
            ]) // 'false'
            ;
            return;
        } else if (token.type.name === 'null') {
            buf.push([
                110,
                117,
                108,
                108
            ]) // 'null'
            ;
            return;
        }
        // number
        const is = String(token.value);
        const isa = [];
        let dp = false;
        for(let i = 0; i < is.length; i++){
            isa[i] = is.charCodeAt(i);
            if (!dp && (isa[i] === 46 || isa[i] === 101 || isa[i] === 69)) {
                dp = true;
            }
        }
        if (!dp) {
            isa.push(46) // '.'
            ;
            isa.push(48) // '0'
            ;
        }
        buf.push(isa);
    }
}
// The below code is mostly taken and modified from https://github.com/feross/buffer
// Licensed MIT. Copyright (c) Feross Aboukhadijeh
// function encodeUtf8 (string, byts) {
//   let codePoint
//   const length = string.length
//   let leadSurrogate = null
//   for (let i = 0; i < length; ++i) {
//     codePoint = string.charCodeAt(i)
//     // is surrogate component
//     if (codePoint > 0xd7ff && codePoint < 0xe000) {
//       // last char was a lead
//       if (!leadSurrogate) {
//         // no lead yet
//         /* c8 ignore next 9 */
//         if (codePoint > 0xdbff) {
//           // unexpected trail
//           byts.push(0xef, 0xbf, 0xbd)
//           continue
//         } else if (i + 1 === length) {
//           // unpaired lead
//           byts.push(0xef, 0xbf, 0xbd)
//           continue
//         }
//         // valid lead
//         leadSurrogate = codePoint
//         continue
//       }
//       // 2 leads in a row
//       /* c8 ignore next 5 */
//       if (codePoint < 0xdc00) {
//         byts.push(0xef, 0xbf, 0xbd)
//         leadSurrogate = codePoint
//         continue
//       }
//       // valid surrogate pair
//       codePoint = (leadSurrogate - 0xd800 << 10 | codePoint - 0xdc00) + 0x10000
//     /* c8 ignore next 4 */
//     } else if (leadSurrogate) {
//       // valid bmp char, but last char was a lead
//       byts.push(0xef, 0xbf, 0xbd)
//     }
//     leadSurrogate = null
//     // encode utf8
//     if (codePoint < 0x80) {
//       // special JSON escapes
//       switch (codePoint) {
//         case 8: // '\b'
//           byts.push(92, 98) // '\\b'
//           continue
//         case 9: // '\t'
//           byts.push(92, 116) // '\\t'
//           continue
//         case 10: // '\n'
//           byts.push(92, 110) // '\\n'
//           continue
//         case 12: // '\f'
//           byts.push(92, 102) // '\\f'
//           continue
//         case 13: // '\r'
//           byts.push(92, 114) // '\\r'
//           continue
//         case 34: // '"'
//           byts.push(92, 34) // '\\"'
//           continue
//         case 92: // '\\'
//           byts.push(92, 92) // '\\\\'
//           continue
//       }
//       byts.push(codePoint)
//     } else if (codePoint < 0x800) {
//       /* c8 ignore next 1 */
//       byts.push(
//         codePoint >> 0x6 | 0xc0,
//         codePoint & 0x3f | 0x80
//       )
//     } else if (codePoint < 0x10000) {
//       /* c8 ignore next 1 */
//       byts.push(
//         codePoint >> 0xc | 0xe0,
//         codePoint >> 0x6 & 0x3f | 0x80,
//         codePoint & 0x3f | 0x80
//       )
//     /* c8 ignore next 9 */
//     } else if (codePoint < 0x110000) {
//       byts.push(
//         codePoint >> 0x12 | 0xf0,
//         codePoint >> 0xc & 0x3f | 0x80,
//         codePoint >> 0x6 & 0x3f | 0x80,
//         codePoint & 0x3f | 0x80
//       )
//     } else {
//       /* c8 ignore next 2 */
//       throw new Error('Invalid code point')
//     }
//   }
// }
/**
 * @param {(Token|Token[])[]} e1
 * @param {(Token|Token[])[]} e2
 * @returns {number}
 */ function mapSorter(e1, e2) {
    if (Array.isArray(e1[0]) || Array.isArray(e2[0])) {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeErrPrefix"]} complex map keys are not supported`);
    }
    const keyToken1 = e1[0];
    const keyToken2 = e2[0];
    if (keyToken1.type !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].string || keyToken2.type !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].string) {
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeErrPrefix"]} non-string map keys are not supported`);
    }
    if (keyToken1 < keyToken2) {
        return -1;
    }
    if (keyToken1 > keyToken2) {
        return 1;
    }
    /* c8 ignore next 1 */ throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeErrPrefix"]} unexpected duplicate map keys, this is not supported`);
}
const defaultEncodeOptions = {
    addBreakTokens: true,
    mapSorter
};
/**
 * @param {any} data
 * @param {EncodeOptions} [options]
 * @returns {Uint8Array}
 */ function encode(data, options) {
    options = Object.assign({}, defaultEncodeOptions, options);
    // @ts-ignore TokenTypeEncoder[] requires compareTokens() on each encoder, we don't use them here
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$encode$2e$js__$5b$client$5d$__$28$ecmascript$29$__["encodeCustom"])(data, new JSONEncoder(), options);
}
;
}}),
"[project]/node_modules/cborg/lib/json/decode.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Tokenizer": (()=>Tokenizer),
    "decode": (()=>decode),
    "decodeFirst": (()=>decodeFirst)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$decode$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/decode.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/token.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/byte-utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/common.js [client] (ecmascript)");
;
;
;
;
/**
 * @typedef {import('../../interface').DecodeOptions} DecodeOptions
 * @typedef {import('../../interface').DecodeTokenizer} DecodeTokenizer
 */ /**
 * @implements {DecodeTokenizer}
 */ class Tokenizer {
    /**
   * @param {Uint8Array} data
   * @param {DecodeOptions} options
   */ constructor(data, options = {}){
        this._pos = 0;
        this.data = data;
        this.options = options;
        /** @type {string[]} */ this.modeStack = [
            'value'
        ];
        this.lastToken = '';
    }
    pos() {
        return this._pos;
    }
    /**
   * @returns {boolean}
   */ done() {
        return this._pos >= this.data.length;
    }
    /**
   * @returns {number}
   */ ch() {
        return this.data[this._pos];
    }
    /**
   * @returns {string}
   */ currentMode() {
        return this.modeStack[this.modeStack.length - 1];
    }
    skipWhitespace() {
        let c = this.ch();
        // @ts-ignore
        while(c === 32 /* ' ' */  || c === 9 /* '\t' */  || c === 13 /* '\r' */  || c === 10 /* '\n' */ ){
            c = this.data[++this._pos];
        }
    }
    /**
   * @param {number[]} str
   */ expect(str) {
        if (this.data.length - this._pos < str.length) {
            throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} unexpected end of input at position ${this._pos}`);
        }
        for(let i = 0; i < str.length; i++){
            if (this.data[this._pos++] !== str[i]) {
                throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} unexpected token at position ${this._pos}, expected to find '${String.fromCharCode(...str)}'`);
            }
        }
    }
    parseNumber() {
        const startPos = this._pos;
        let negative = false;
        let float = false;
        /**
     * @param {number[]} chars
     */ const swallow = (chars)=>{
            while(!this.done()){
                const ch = this.ch();
                if (chars.includes(ch)) {
                    this._pos++;
                } else {
                    break;
                }
            }
        };
        // lead
        if (this.ch() === 45) {
            negative = true;
            this._pos++;
        }
        if (this.ch() === 48) {
            this._pos++;
            if (this.ch() === 46) {
                this._pos++;
                float = true;
            } else {
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].uint, 0, this._pos - startPos);
            }
        }
        swallow([
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57
        ]) // DIGIT
        ;
        if (negative && this._pos === startPos + 1) {
            throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} unexpected token at position ${this._pos}`);
        }
        if (!this.done() && this.ch() === 46) {
            if (float) {
                throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} unexpected token at position ${this._pos}`);
            }
            float = true;
            this._pos++;
            swallow([
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57
            ]) // DIGIT
            ;
        }
        if (!this.done() && (this.ch() === 101 || this.ch() === 69)) {
            float = true;
            this._pos++;
            if (!this.done() && (this.ch() === 43 || this.ch() === 45)) {
                this._pos++;
            }
            swallow([
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57
            ]) // DIGIT
            ;
        }
        // @ts-ignore
        const numStr = String.fromCharCode.apply(null, this.data.subarray(startPos, this._pos));
        const num = parseFloat(numStr);
        if (float) {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].float, num, this._pos - startPos);
        }
        if (this.options.allowBigInt !== true || Number.isSafeInteger(num)) {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](num >= 0 ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].uint : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].negint, num, this._pos - startPos);
        }
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](num >= 0 ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].uint : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].negint, BigInt(numStr), this._pos - startPos);
    }
    /**
   * @returns {Token}
   */ parseString() {
        /* c8 ignore next 4 */ if (this.ch() !== 34) {
            // this would be a programming error
            throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} unexpected character at position ${this._pos}; this shouldn't happen`);
        }
        this._pos++;
        // check for simple fast-path, all printable ascii, no escapes
        // >0x10000 elements may fail fn.apply() (http://stackoverflow.com/a/22747272/680742)
        for(let i = this._pos, l = 0; i < this.data.length && l < 0x10000; i++, l++){
            const ch = this.data[i];
            if (ch === 92 || ch < 32 || ch >= 128) {
                break;
            }
            if (ch === 34) {
                // @ts-ignore
                const str = String.fromCharCode.apply(null, this.data.subarray(this._pos, i));
                this._pos = i + 1;
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].string, str, l);
            }
        }
        const startPos = this._pos;
        const chars = [];
        const readu4 = ()=>{
            if (this._pos + 4 >= this.data.length) {
                throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} unexpected end of unicode escape sequence at position ${this._pos}`);
            }
            let u4 = 0;
            for(let i = 0; i < 4; i++){
                let ch = this.ch();
                if (ch >= 48 && ch <= 57) {
                    ch -= 48;
                } else if (ch >= 97 && ch <= 102) {
                    ch = ch - 97 + 10;
                } else if (ch >= 65 && ch <= 70) {
                    ch = ch - 65 + 10;
                } else {
                    throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} unexpected unicode escape character at position ${this._pos}`);
                }
                u4 = u4 * 16 + ch;
                this._pos++;
            }
            return u4;
        };
        // mostly taken from feross/buffer and adjusted to fit
        const readUtf8Char = ()=>{
            const firstByte = this.ch();
            let codePoint = null;
            /* c8 ignore next 1 */ let bytesPerSequence = firstByte > 0xef ? 4 : firstByte > 0xdf ? 3 : firstByte > 0xbf ? 2 : 1;
            if (this._pos + bytesPerSequence > this.data.length) {
                throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} unexpected unicode sequence at position ${this._pos}`);
            }
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                /* c8 ignore next 6 */ // this case is dealt with by the caller function
                case 1:
                    if (firstByte < 0x80) {
                        codePoint = firstByte;
                    }
                    break;
                case 2:
                    secondByte = this.data[this._pos + 1];
                    if ((secondByte & 0xc0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1f) << 0x6 | secondByte & 0x3f;
                        if (tempCodePoint > 0x7f) {
                            codePoint = tempCodePoint;
                        }
                    }
                    break;
                case 3:
                    secondByte = this.data[this._pos + 1];
                    thirdByte = this.data[this._pos + 2];
                    if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80) {
                        tempCodePoint = (firstByte & 0xf) << 0xc | (secondByte & 0x3f) << 0x6 | thirdByte & 0x3f;
                        /* c8 ignore next 3 */ if (tempCodePoint > 0x7ff && (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)) {
                            codePoint = tempCodePoint;
                        }
                    }
                    break;
                case 4:
                    secondByte = this.data[this._pos + 1];
                    thirdByte = this.data[this._pos + 2];
                    fourthByte = this.data[this._pos + 3];
                    if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80 && (fourthByte & 0xc0) === 0x80) {
                        tempCodePoint = (firstByte & 0xf) << 0x12 | (secondByte & 0x3f) << 0xc | (thirdByte & 0x3f) << 0x6 | fourthByte & 0x3f;
                        if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {
                            codePoint = tempCodePoint;
                        }
                    }
            }
            /* c8 ignore next 5 */ if (codePoint === null) {
                // we did not generate a valid codePoint so insert a
                // replacement char (U+FFFD) and advance only 1 byte
                codePoint = 0xfffd;
                bytesPerSequence = 1;
            } else if (codePoint > 0xffff) {
                // encode to utf16 (surrogate pair dance)
                codePoint -= 0x10000;
                chars.push(codePoint >>> 10 & 0x3ff | 0xd800);
                codePoint = 0xdc00 | codePoint & 0x3ff;
            }
            chars.push(codePoint);
            this._pos += bytesPerSequence;
        };
        // TODO: could take the approach of a quick first scan for special chars like encoding/json/decode.go#unquoteBytes
        // and converting all of the ascii chars from the base array in bulk
        while(!this.done()){
            const ch = this.ch();
            let ch1;
            switch(ch){
                case 92:
                    this._pos++;
                    if (this.done()) {
                        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} unexpected string termination at position ${this._pos}`);
                    }
                    ch1 = this.ch();
                    this._pos++;
                    switch(ch1){
                        case 34:
                        case 39:
                        case 92:
                        case 47:
                            chars.push(ch1);
                            break;
                        case 98:
                            chars.push(8);
                            break;
                        case 116:
                            chars.push(9);
                            break;
                        case 110:
                            chars.push(10);
                            break;
                        case 102:
                            chars.push(12);
                            break;
                        case 114:
                            chars.push(13);
                            break;
                        case 117:
                            chars.push(readu4());
                            break;
                        default:
                            throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} unexpected string escape character at position ${this._pos}`);
                    }
                    break;
                case 34:
                    this._pos++;
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].string, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$byte$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeCodePointsArray"])(chars), this._pos - startPos);
                default:
                    if (ch < 32) {
                        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} invalid control character at position ${this._pos}`);
                    } else if (ch < 0x80) {
                        chars.push(ch);
                        this._pos++;
                    } else {
                        readUtf8Char();
                    }
            }
        }
        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} unexpected end of string at position ${this._pos}`);
    }
    /**
   * @returns {Token}
   */ parseValue() {
        switch(this.ch()){
            case 123:
                this.modeStack.push('obj-start');
                this._pos++;
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].map, Infinity, 1);
            case 91:
                this.modeStack.push('array-start');
                this._pos++;
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].array, Infinity, 1);
            case 34:
                {
                    return this.parseString();
                }
            case 110:
                this.expect([
                    110,
                    117,
                    108,
                    108
                ]) // 'null'
                ;
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].null, null, 4);
            case 102:
                this.expect([
                    102,
                    97,
                    108,
                    115,
                    101
                ]) // 'false'
                ;
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].false, false, 5);
            case 116:
                this.expect([
                    116,
                    114,
                    117,
                    101
                ]) // 'true'
                ;
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].true, true, 4);
            case 45:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
                return this.parseNumber();
            default:
                throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} unexpected character at position ${this._pos}`);
        }
    }
    /**
   * @returns {Token}
   */ next() {
        this.skipWhitespace();
        switch(this.currentMode()){
            case 'value':
                this.modeStack.pop();
                return this.parseValue();
            case 'array-value':
                {
                    this.modeStack.pop();
                    if (this.ch() === 93) {
                        this._pos++;
                        this.skipWhitespace();
                        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].break, undefined, 1);
                    }
                    if (this.ch() !== 44) {
                        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} unexpected character at position ${this._pos}, was expecting array delimiter but found '${String.fromCharCode(this.ch())}'`);
                    }
                    this._pos++;
                    this.modeStack.push('array-value');
                    this.skipWhitespace();
                    return this.parseValue();
                }
            case 'array-start':
                {
                    this.modeStack.pop();
                    if (this.ch() === 93) {
                        this._pos++;
                        this.skipWhitespace();
                        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].break, undefined, 1);
                    }
                    this.modeStack.push('array-value');
                    this.skipWhitespace();
                    return this.parseValue();
                }
            // @ts-ignore
            case 'obj-key':
                if (this.ch() === 125) {
                    this.modeStack.pop();
                    this._pos++;
                    this.skipWhitespace();
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].break, undefined, 1);
                }
                if (this.ch() !== 44) {
                    throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} unexpected character at position ${this._pos}, was expecting object delimiter but found '${String.fromCharCode(this.ch())}'`);
                }
                this._pos++;
                this.skipWhitespace();
            case 'obj-start':
                {
                    this.modeStack.pop();
                    if (this.ch() === 125) {
                        this._pos++;
                        this.skipWhitespace();
                        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Token"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$token$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Type"].break, undefined, 1);
                    }
                    const token = this.parseString();
                    this.skipWhitespace();
                    if (this.ch() !== 58) {
                        throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} unexpected character at position ${this._pos}, was expecting key/value delimiter ':' but found '${String.fromCharCode(this.ch())}'`);
                    }
                    this._pos++;
                    this.modeStack.push('obj-value');
                    return token;
                }
            case 'obj-value':
                {
                    this.modeStack.pop();
                    this.modeStack.push('obj-key');
                    this.skipWhitespace();
                    return this.parseValue();
                }
            /* c8 ignore next 2 */ default:
                throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$common$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeErrPrefix"]} unexpected parse state at position ${this._pos}; this shouldn't happen`);
        }
    }
}
/**
 * @param {Uint8Array} data
 * @param {DecodeOptions} [options]
 * @returns {any}
 */ function decode(data, options) {
    options = Object.assign({
        tokenizer: new Tokenizer(data, options)
    }, options);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$decode$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decode"])(data, options);
}
/**
 * @param {Uint8Array} data
 * @param {DecodeOptions} [options]
 * @returns {[any, Uint8Array]}
 */ function decodeFirst(data, options) {
    options = Object.assign({
        tokenizer: new Tokenizer(data, options)
    }, options);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$decode$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeFirst"])(data, options);
}
;
}}),
"[project]/node_modules/cborg/lib/json/json.js [client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$json$2f$encode$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/json/encode.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$json$2f$decode$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/json/decode.js [client] (ecmascript)");
;
;
;
}}),
"[project]/node_modules/cborg/lib/json/json.js [client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$json$2f$encode$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/json/encode.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$json$2f$decode$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/json/decode.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cborg$2f$lib$2f$json$2f$json$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/cborg/lib/json/json.js [client] (ecmascript) <locals>");
}}),
}]);

//# sourceMappingURL=node_modules_cborg_1666eb00._.js.map