{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/lib/core.js"],"sourcesContent":["\n/* eslint-env browser */\n\nimport { isMultiaddr } from '@multiformats/multiaddr'\nimport { isBrowser, isWebWorker, isNode } from 'ipfs-utils/src/env.js'\nimport parseDuration from 'parse-duration'\nimport { logger } from '@libp2p/logger'\nimport HTTP from 'ipfs-utils/src/http.js'\nimport mergeOpts from 'merge-options'\nimport { toUrlString } from 'ipfs-core-utils/to-url-string'\nimport getAgent from 'ipfs-core-utils/agent'\n\nconst log = logger('ipfs-http-client:lib:error-handler')\nconst merge = mergeOpts.bind({ ignoreUndefined: true })\n\nconst DEFAULT_PROTOCOL = isBrowser || isWebWorker ? location.protocol : 'http'\nconst DEFAULT_HOST = isBrowser || isWebWorker ? location.hostname : 'localhost'\nconst DEFAULT_PORT = isBrowser || isWebWorker ? location.port : '5001'\n\n/**\n * @typedef {import('ipfs-utils/src/types').HTTPOptions} HTTPOptions\n * @typedef {import('../types').Options} Options\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {Options|URL|Multiaddr|string} [options]\n * @returns {Options}\n */\nconst normalizeOptions = (options = {}) => {\n  let url\n  /** @type {Options} */\n  let opts = {}\n  let agent\n\n  if (typeof options === 'string' || isMultiaddr(options)) {\n    url = new URL(toUrlString(options))\n  } else if (options instanceof URL) {\n    url = options\n  } else if (typeof options.url === 'string' || isMultiaddr(options.url)) {\n    url = new URL(toUrlString(options.url))\n    opts = options\n  } else if (options.url instanceof URL) {\n    url = options.url\n    opts = options\n  } else {\n    opts = options || {}\n\n    const protocol = (opts.protocol || DEFAULT_PROTOCOL).replace(':', '')\n    const host = (opts.host || DEFAULT_HOST).split(':')[0]\n    const port = (opts.port || DEFAULT_PORT)\n\n    url = new URL(`${protocol}://${host}:${port}`)\n  }\n\n  if (opts.apiPath) {\n    url.pathname = opts.apiPath\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0'\n  }\n\n  if (isNode) {\n    const Agent = getAgent(url)\n\n    agent = opts.agent || new Agent({\n      keepAlive: true,\n      // Similar to browsers which limit connections to six per host\n      maxSockets: 6\n    })\n  }\n\n  return {\n    ...opts,\n    host: url.host,\n    protocol: url.protocol.replace(':', ''),\n    port: Number(url.port),\n    apiPath: url.pathname,\n    url,\n    agent\n  }\n}\n\n/**\n * @param {Response} response\n */\nexport const errorHandler = async (response) => {\n  let msg\n\n  try {\n    if ((response.headers.get('Content-Type') || '').startsWith('application/json')) {\n      const data = await response.json()\n      log(data)\n      msg = data.Message || data.message\n    } else {\n      msg = await response.text()\n    }\n  } catch (/** @type {any} */ err) {\n    log('Failed to parse error response', err)\n    // Failed to extract/parse error message from response\n    msg = err.message\n  }\n\n  /** @type {Error} */\n  let error = new HTTP.HTTPError(response)\n\n  if (msg) {\n    // This is what rs-ipfs returns where there's a timeout\n    if (msg.includes('deadline has elapsed')) {\n      error = new HTTP.TimeoutError()\n    }\n\n    // This is what go-ipfs returns where there's a timeout\n    if (msg && msg.includes('context deadline exceeded')) {\n      error = new HTTP.TimeoutError()\n    }\n  }\n\n  // This also gets returned\n  if (msg && msg.includes('request timed out')) {\n    error = new HTTP.TimeoutError()\n  }\n\n  // If we managed to extract a message from the response, use it\n  if (msg) {\n    error.message = msg\n  }\n\n  throw error\n}\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g\n\n/**\n * @param {string} str\n */\nconst kebabCase = (str) => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase()\n  })\n}\n\n/**\n * @param {string | number} value\n */\nconst parseTimeout = (value) => {\n  return typeof value === 'string' ? parseDuration(value) : value\n}\n\nexport class Client extends HTTP {\n  /**\n   * @param {Options|URL|Multiaddr|string} [options]\n   */\n  constructor (options = {}) {\n    const opts = normalizeOptions(options)\n\n    super({\n      timeout: parseTimeout(opts.timeout || 0) || undefined,\n      headers: opts.headers,\n      base: `${opts.url}`,\n      handleError: errorHandler,\n      transformSearchParams: (search) => {\n        const out = new URLSearchParams()\n\n        for (const [key, value] of search) {\n          if (\n            value !== 'undefined' &&\n            value !== 'null' &&\n            key !== 'signal'\n          ) {\n            out.append(kebabCase(key), value)\n          }\n\n          // @ts-expect-error server timeouts are strings\n          if (key === 'timeout' && !isNaN(value)) {\n            out.append(kebabCase(key), value)\n          }\n        }\n\n        return out\n      },\n      // @ts-expect-error this can be a https agent or a http agent\n      agent: opts.agent\n    })\n\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.get\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.put\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.delete\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.options\n\n    const fetch = this.fetch\n\n    /**\n     * @param {string | Request} resource\n     * @param {HTTPOptions} options\n     */\n    this.fetch = (resource, options = {}) => {\n      if (typeof resource === 'string' && !resource.startsWith('/')) {\n        resource = `${opts.url}/${resource}`\n      }\n\n      return fetch.call(this, resource, merge(options, {\n        method: 'POST'\n      }))\n    }\n  }\n}\n\nexport const HTTPError = HTTP.HTTPError\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/lib/configure.js"],"sourcesContent":["\n/* eslint-env browser */\n\nimport { Client } from './core.js'\n\n// Set default configuration and call create function with them\n/**\n * @typedef { import(\"../types\").Options } Options\n */\n\n/**\n * @template T\n * @typedef {(client: Client, clientOptions: Options) => T} Fn\n */\n\n/**\n * @template T\n * @typedef {(clientOptions: Options) => T} Factory\n */\n\n/**\n * @template T\n * @param {Fn<T>} fn\n * @returns {Factory<T>}\n */\nexport const configure = (fn) => {\n  return (options) => {\n    return fn(new Client(options), options)\n  }\n}\n"],"names":[],"mappings":"AACA,sBAAsB;;;AAEtB;;AAsBO,MAAM,YAAY,CAAC;IACxB,OAAO,CAAC;QACN,OAAO,GAAG,IAAI,wJAAA,CAAA,SAAM,CAAC,UAAU;IACjC;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/lib/mode-to-string.js"],"sourcesContent":["\n/**\n * @param {number | string | undefined} mode\n */\nexport function modeToString (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'string') {\n    return mode\n  }\n\n  return mode.toString(8).padStart(4, '0')\n}\n"],"names":[],"mappings":"AACA;;CAEC;;;AACM,SAAS,aAAc,IAAI;IAChC,IAAI,QAAQ,MAAM;QAChB,OAAO;IACT;IAEA,IAAI,OAAO,SAAS,UAAU;QAC5B,OAAO;IACT;IAEA,OAAO,KAAK,QAAQ,CAAC,GAAG,QAAQ,CAAC,GAAG;AACtC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 227, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/lib/parse-mtime.js"],"sourcesContent":["import errCode from 'err-code'\n\n/**\n * @param {any} input\n */\nexport function parseMtime (input) {\n  if (input == null) {\n    return undefined\n  }\n\n  /** @type {{ secs: number, nsecs?: number } | undefined} */\n  let mtime\n\n  // { secs, nsecs }\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    }\n  }\n\n  // UnixFS TimeSpec\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    }\n  }\n\n  // process.hrtime()\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    }\n  }\n\n  // Javascript Date\n  if (input instanceof Date) {\n    const ms = input.getTime()\n    const secs = Math.floor(ms / 1000)\n\n    mtime = {\n      secs: secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n\n  // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n\n    mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errCode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS')\n  }\n\n  return mtime\n}\n"],"names":[],"mappings":";;;AAAA;;AAKO,SAAS,WAAY,KAAK;IAC/B,IAAI,SAAS,MAAM;QACjB,OAAO;IACT;IAEA,yDAAyD,GACzD,IAAI;IAEJ,kBAAkB;IAClB,IAAI,MAAM,IAAI,IAAI,MAAM;QACtB,QAAQ;YACN,MAAM,MAAM,IAAI;YAChB,OAAO,MAAM,KAAK;QACpB;IACF;IAEA,kBAAkB;IAClB,IAAI,MAAM,OAAO,IAAI,MAAM;QACzB,QAAQ;YACN,MAAM,MAAM,OAAO;YACnB,OAAO,MAAM,qBAAqB;QACpC;IACF;IAEA,mBAAmB;IACnB,IAAI,MAAM,OAAO,CAAC,QAAQ;QACxB,QAAQ;YACN,MAAM,KAAK,CAAC,EAAE;YACd,OAAO,KAAK,CAAC,EAAE;QACjB;IACF;IAEA,kBAAkB;IAClB,IAAI,iBAAiB,MAAM;QACzB,MAAM,KAAK,MAAM,OAAO;QACxB,MAAM,OAAO,KAAK,KAAK,CAAC,KAAK;QAE7B,QAAQ;YACN,MAAM;YACN,OAAO,CAAC,KAAM,OAAO,IAAK,IAAI;QAChC;IACF;IAEA;;;;;;;;;;;;;EAaA,GAEA,IAAI,CAAC,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,SAAS;QACxD,OAAO;IACT;IAEA,IAAI,SAAS,QAAQ,MAAM,KAAK,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,KAAK,MAAM,KAAK,GAAG,SAAS,GAAG;QACxF,MAAM,CAAA,GAAA,gIAAA,CAAA,UAAO,AAAD,EAAE,IAAI,MAAM,uDAAuD;IACjF;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/lib/to-url-search-params.js"],"sourcesContent":["import { modeToString } from './mode-to-string.js'\nimport { parseMtime } from '../lib/parse-mtime.js'\n\n/**\n * @param {*} params\n * @returns {URLSearchParams}\n */\nexport function toUrlSearchParams ({ arg, searchParams, hashAlg, mtime, mode, ...options } = {}) {\n  if (searchParams) {\n    options = {\n      ...options,\n      ...searchParams\n    }\n  }\n\n  if (hashAlg) {\n    options.hash = hashAlg\n  }\n\n  if (mtime != null) {\n    mtime = parseMtime(mtime)\n\n    options.mtime = mtime.secs\n    options.mtimeNsecs = mtime.nsecs\n  }\n\n  if (mode != null) {\n    options.mode = modeToString(mode)\n  }\n\n  if (options.timeout && !isNaN(options.timeout)) {\n    // server API expects timeouts as strings\n    options.timeout = `${options.timeout}ms`\n  }\n\n  if (arg === undefined || arg === null) {\n    arg = []\n  } else if (!Array.isArray(arg)) {\n    arg = [arg]\n  }\n\n  const urlSearchParams = new URLSearchParams(options)\n\n  arg.forEach((/** @type {any} */ arg) => urlSearchParams.append('arg', arg))\n\n  return urlSearchParams\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAMO,SAAS,kBAAmB,EAAE,GAAG,EAAE,YAAY,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,SAAS,GAAG,CAAC,CAAC;IAC7F,IAAI,cAAc;QAChB,UAAU;YACR,GAAG,OAAO;YACV,GAAG,YAAY;QACjB;IACF;IAEA,IAAI,SAAS;QACX,QAAQ,IAAI,GAAG;IACjB;IAEA,IAAI,SAAS,MAAM;QACjB,QAAQ,CAAA,GAAA,kKAAA,CAAA,aAAU,AAAD,EAAE;QAEnB,QAAQ,KAAK,GAAG,MAAM,IAAI;QAC1B,QAAQ,UAAU,GAAG,MAAM,KAAK;IAClC;IAEA,IAAI,QAAQ,MAAM;QAChB,QAAQ,IAAI,GAAG,CAAA,GAAA,wKAAA,CAAA,eAAY,AAAD,EAAE;IAC9B;IAEA,IAAI,QAAQ,OAAO,IAAI,CAAC,MAAM,QAAQ,OAAO,GAAG;QAC9C,yCAAyC;QACzC,QAAQ,OAAO,GAAG,GAAG,QAAQ,OAAO,CAAC,EAAE,CAAC;IAC1C;IAEA,IAAI,QAAQ,aAAa,QAAQ,MAAM;QACrC,MAAM,EAAE;IACV,OAAO,IAAI,CAAC,MAAM,OAAO,CAAC,MAAM;QAC9B,MAAM;YAAC;SAAI;IACb;IAEA,MAAM,kBAAkB,IAAI,gBAAgB;IAE5C,IAAI,OAAO,CAAC,CAAC,gBAAgB,GAAG,MAAQ,gBAAgB,MAAM,CAAC,OAAO;IAEtE,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 340, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/bitswap/wantlist.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createWantlist = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlist\"]}\n   */\n  async function wantlist (options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlist\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;;;;AAOO,MAAM,iBAAiB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACtC;;GAEC,GACD,eAAe,SAAU,UAAU,CAAC,CAAC;QACnC,MAAM,MAAM,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,oBAAoB;YACpD,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B,EAAE,EAAE,IAAI;QAER,OAAO,CAAC,IAAI,IAAI,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC,4BAA4B,GAAG,IAAM,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI;IACpF;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 369, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/bitswap/wantlist-for-peer.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createWantlistForPeer = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer (peerId, options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        peer: peerId.toString()\n      }),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlistForPeer\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;;;;AAOO,MAAM,wBAAwB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAC7C;;GAEC,GACD,eAAe,gBAAiB,MAAM,EAAE,UAAU,CAAC,CAAC;QAClD,MAAM,MAAM,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,oBAAoB;YACpD,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,GAAG,OAAO;gBACV,MAAM,OAAO,QAAQ;YACvB;YACA,SAAS,QAAQ,OAAO;QAC1B,EAAE,EAAE,IAAI;QAER,OAAO,CAAC,IAAI,IAAI,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC,4BAA4B,GAAG,IAAM,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI;IACpF;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 401, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/bitswap/stat.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {BitswapAPI[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    const res = await api.post('bitswap/stat', {\n      searchParams: toUrlSearchParams(options),\n      signal: options.signal,\n      headers: options.headers\n    })\n\n    return toCoreInterface(await res.json())\n  }\n  return stat\n})\n\n/**\n * @param {any} res\n */\nfunction toCoreInterface (res) {\n  return {\n    provideBufLen: res.ProvideBufLen,\n    wantlist: (res.Wantlist || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/'])),\n    peers: (res.Peers || []).map((/** @type {string} */ str) => peerIdFromString(str)),\n    blocksReceived: BigInt(res.BlocksReceived),\n    dataReceived: BigInt(res.DataReceived),\n    blocksSent: BigInt(res.BlocksSent),\n    dataSent: BigInt(res.DataSent),\n    dupBlksReceived: BigInt(res.DupBlksReceived),\n    dupDataReceived: BigInt(res.DupDataReceived)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;AACA;;;;;AAOO,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAClC;;GAEC,GACD,eAAe,KAAM,UAAU,CAAC,CAAC;QAC/B,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,gBAAgB;YACzC,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,QAAQ,QAAQ,MAAM;YACtB,SAAS,QAAQ,OAAO;QAC1B;QAEA,OAAO,gBAAgB,MAAM,IAAI,IAAI;IACvC;IACA,OAAO;AACT;AAEA;;CAEC,GACD,SAAS,gBAAiB,GAAG;IAC3B,OAAO;QACL,eAAe,IAAI,aAAa;QAChC,UAAU,CAAC,IAAI,QAAQ,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC,4BAA4B,GAAG,IAAM,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI;QACzF,OAAO,CAAC,IAAI,KAAK,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC,mBAAmB,GAAG,MAAQ,CAAA,GAAA,0JAAA,CAAA,mBAAgB,AAAD,EAAE;QAC7E,gBAAgB,OAAO,IAAI,cAAc;QACzC,cAAc,OAAO,IAAI,YAAY;QACrC,YAAY,OAAO,IAAI,UAAU;QACjC,UAAU,OAAO,IAAI,QAAQ;QAC7B,iBAAiB,OAAO,IAAI,eAAe;QAC3C,iBAAiB,OAAO,IAAI,eAAe;IAC7C;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 447, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/bitswap/unwant.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createUnwant = configure(api => {\n  /**\n   * @type {BitswapAPI[\"unwant\"]}\n   */\n  async function unwant (cid, options = {}) {\n    const res = await api.post('bitswap/unwant', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return unwant\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,eAAe,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACpC;;GAEC,GACD,eAAe,OAAQ,GAAG,EAAE,UAAU,CAAC,CAAC;QACtC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,kBAAkB;YAC3C,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,IAAI,QAAQ;gBACjB,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,OAAO,IAAI,IAAI;IACjB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 476, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/bitswap/index.js"],"sourcesContent":["import { createWantlist } from './wantlist.js'\nimport { createWantlistForPeer } from './wantlist-for-peer.js'\nimport { createStat } from './stat.js'\nimport { createUnwant } from './unwant.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createBitswap (config) {\n  return {\n    wantlist: createWantlist(config),\n    wantlistForPeer: createWantlistForPeer(config),\n    unwant: createUnwant(config),\n    stat: createStat(config)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAKO,SAAS,cAAe,MAAM;IACnC,OAAO;QACL,UAAU,CAAA,GAAA,gKAAA,CAAA,iBAAc,AAAD,EAAE;QACzB,iBAAiB,CAAA,GAAA,+KAAA,CAAA,wBAAqB,AAAD,EAAE;QACvC,QAAQ,CAAA,GAAA,8JAAA,CAAA,eAAY,AAAD,EAAE;QACrB,MAAM,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAD,EAAE;IACnB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 501, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/block/get.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {BlockAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('block/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    return new Uint8Array(await res.arrayBuffer())\n  }\n  return get\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACjC;;GAEC,GACD,eAAe,IAAK,GAAG,EAAE,UAAU,CAAC,CAAC;QACnC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,aAAa;YACtC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,IAAI,QAAQ;gBACjB,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,OAAO,IAAI,WAAW,MAAM,IAAI,WAAW;IAC7C;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 530, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/lib/abort-signal.js"],"sourcesContent":["import { anySignal } from 'any-signal'\n\n/**\n * @param {any[]} signals\n * @returns {AbortSignal[]}\n */\nfunction filter (signals) {\n  return signals.filter(Boolean)\n}\n\n/**\n * @param  {...AbortSignal|undefined} signals\n */\nexport function abortSignal (...signals) {\n  return anySignal(filter(signals))\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA;;;CAGC,GACD,SAAS,OAAQ,OAAO;IACtB,OAAO,QAAQ,MAAM,CAAC;AACxB;AAKO,SAAS,YAAa,GAAG,OAAO;IACrC,OAAO,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD,EAAE,OAAO;AAC1B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 550, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/block/put.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nexport const createPut = configure(api => {\n  /**\n   * @type {BlockAPI[\"put\"]}\n   */\n  async function put (data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    let res\n    try {\n      const response = await api.post('block/put', {\n        signal: signal,\n        searchParams: toUrlSearchParams(options),\n        ...(\n          await multipartRequest([data], controller, options.headers)\n        )\n      })\n      res = await response.json()\n    } catch (/** @type {any} */ err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return put(data, { ...options, format: 'protobuf' })\n      } else if (options.format === 'dag-cbor') {\n        return put(data, { ...options, format: 'cbor' })\n      }\n\n      throw err\n    }\n\n    return CID.parse(res.Key)\n  }\n\n  return put\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;AAOO,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACjC;;GAEC,GACD,eAAe,IAAK,IAAI,EAAE,UAAU,CAAC,CAAC;QACpC,yCAAyC;QACzC,MAAM,aAAa,IAAI;QACvB,MAAM,SAAS,CAAA,GAAA,mKAAA,CAAA,cAAW,AAAD,EAAE,WAAW,MAAM,EAAE,QAAQ,MAAM;QAE5D,IAAI;QACJ,IAAI;YACF,MAAM,WAAW,MAAM,IAAI,IAAI,CAAC,aAAa;gBAC3C,QAAQ;gBACR,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAChC,GACE,MAAM,CAAA,GAAA,2KAAA,CAAA,mBAAgB,AAAD,EAAE;oBAAC;iBAAK,EAAE,YAAY,QAAQ,OAAO,CAAC;YAE/D;YACA,MAAM,MAAM,SAAS,IAAI;QAC3B,EAAE,OAAO,gBAAgB,GAAG,KAAK;YAC/B,kDAAkD;YAClD,sEAAsE;YACtE,IAAI,QAAQ,MAAM,KAAK,UAAU;gBAC/B,OAAO,IAAI,MAAM;oBAAE,GAAG,OAAO;oBAAE,QAAQ;gBAAW;YACpD,OAAO,IAAI,QAAQ,MAAM,KAAK,YAAY;gBACxC,OAAO,IAAI,MAAM;oBAAE,GAAG,OAAO;oBAAE,QAAQ;gBAAO;YAChD;YAEA,MAAM;QACR;QAEA,OAAO,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC,IAAI,GAAG;IAC1B;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 607, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/block/rm.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n * @typedef {import('ipfs-core-types/src/block').RmResult} RmResult\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {BlockAPI[\"rm\"]}\n   */\n  async function * rm (cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid]\n    }\n\n    const res = await api.post('block/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => cid.toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed)\n    }\n  }\n\n  return rm\n})\n\n/**\n * @param {*} removed\n */\nfunction toCoreInterface (removed) {\n  /** @type {RmResult} */\n  const out = {\n    cid: CID.parse(removed.Hash)\n  }\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error)\n  }\n\n  return out\n}\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;;;;AAQO,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAChC;;GAEC,GACD,gBAAiB,GAAI,GAAG,EAAE,UAAU,CAAC,CAAC;QACpC,IAAI,CAAC,MAAM,OAAO,CAAC,MAAM;YACvB,MAAM;gBAAC;aAAI;QACb;QAEA,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY;YACrC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,IAAI,GAAG,CAAC,CAAA,MAAO,IAAI,QAAQ;gBAChC,mBAAmB;gBACnB,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,WAAW,MAAM,WAAW,IAAI,MAAM,GAAI;YACxC,MAAM,gBAAgB;QACxB;IACF;IAEA,OAAO;AACT;AAEA;;CAEC,GACD,SAAS,gBAAiB,OAAO;IAC/B,qBAAqB,GACrB,MAAM,MAAM;QACV,KAAK,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC,QAAQ,IAAI;IAC7B;IAEA,IAAI,QAAQ,KAAK,EAAE;QACjB,IAAI,KAAK,GAAG,IAAI,MAAM,QAAQ,KAAK;IACrC;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 658, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/block/stat.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {BlockAPI[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    const res = await api.post('block/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return { cid: CID.parse(data.Key), size: data.Size }\n  }\n\n  return stat\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;;;;AAOO,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAClC;;GAEC,GACD,eAAe,KAAM,GAAG,EAAE,UAAU,CAAC,CAAC;QACpC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,cAAc;YACvC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,IAAI,QAAQ;gBACjB,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,OAAO;YAAE,KAAK,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC,KAAK,GAAG;YAAG,MAAM,KAAK,IAAI;QAAC;IACrD;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 694, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/block/index.js"],"sourcesContent":["import { createGet } from './get.js'\nimport { createPut } from './put.js'\nimport { createRm } from './rm.js'\nimport { createStat } from './stat.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createBlock (config) {\n  return {\n    get: createGet(config),\n    put: createPut(config),\n    rm: createRm(config),\n    stat: createStat(config)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAKO,SAAS,YAAa,MAAM;IACjC,OAAO;QACL,KAAK,CAAA,GAAA,yJAAA,CAAA,YAAS,AAAD,EAAE;QACf,KAAK,CAAA,GAAA,yJAAA,CAAA,YAAS,AAAD,EAAE;QACf,IAAI,CAAA,GAAA,wJAAA,CAAA,WAAQ,AAAD,EAAE;QACb,MAAM,CAAA,GAAA,0JAAA,CAAA,aAAU,AAAD,EAAE;IACnB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 719, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/bootstrap/add.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createAdd = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"add\"]}\n   */\n  async function add (addr, options = {}) {\n    const res = await api.post('bootstrap/add', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return add\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAAA;;;;AAOO,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACjC;;GAEC,GACD,eAAe,IAAK,IAAI,EAAE,UAAU,CAAC,CAAC;QACpC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,iBAAiB;YAC1C,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,IAAI;QAEhC,OAAO;YAAE,OAAO,MAAM,GAAG,CAAC,CAAC,mBAAmB,GAAG,KAAO,CAAA,GAAA,+KAAA,CAAA,YAAS,AAAD,EAAE;QAAK;IACzE;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 754, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/bootstrap/clear.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createClear = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"clear\"]}\n   */\n  async function clear (options = {}) {\n    const res = await api.post('bootstrap/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        all: true\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return clear\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAAA;;;;AAOO,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACnC;;GAEC,GACD,eAAe,MAAO,UAAU,CAAC,CAAC;QAChC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,gBAAgB;YACzC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,GAAG,OAAO;gBACV,KAAK;YACP;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,IAAI;QAEhC,OAAO;YAAE,OAAO,MAAM,GAAG,CAAC,CAAC,mBAAmB,GAAG,KAAO,CAAA,GAAA,+KAAA,CAAA,YAAS,AAAD,EAAE;QAAK;IACzE;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 789, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/bootstrap/list.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createList = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"list\"]}\n   */\n  async function list (options = {}) {\n    const res = await api.post('bootstrap/list', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return list\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAAA;;;;AAOO,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAClC;;GAEC,GACD,eAAe,KAAM,UAAU,CAAC,CAAC;QAC/B,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,kBAAkB;YAC3C,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QAEA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,IAAI;QAEhC,OAAO;YAAE,OAAO,MAAM,GAAG,CAAC,CAAC,mBAAmB,GAAG,KAAO,CAAA,GAAA,+KAAA,CAAA,YAAS,AAAD,EAAE;QAAK;IACzE;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 821, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/bootstrap/reset.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createReset = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"reset\"]}\n   */\n  async function reset (options = {}) {\n    const res = await api.post('bootstrap/add', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        default: true\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return reset\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAAA;;;;AAOO,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACnC;;GAEC,GACD,eAAe,MAAO,UAAU,CAAC,CAAC;QAChC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,iBAAiB;YAC1C,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,GAAG,OAAO;gBACV,SAAS;YACX;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,IAAI;QAEhC,OAAO;YAAE,OAAO,MAAM,GAAG,CAAC,CAAC,mBAAmB,GAAG,KAAO,CAAA,GAAA,+KAAA,CAAA,YAAS,AAAD,EAAE;QAAK;IACzE;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 856, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/bootstrap/rm.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"rm\"]}\n   */\n  async function rm (addr, options = {}) {\n    const res = await api.post('bootstrap/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return rm\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAAA;;;;AAOO,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAChC;;GAEC,GACD,eAAe,GAAI,IAAI,EAAE,UAAU,CAAC,CAAC;QACnC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,gBAAgB;YACzC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,IAAI;QAEhC,OAAO;YAAE,OAAO,MAAM,GAAG,CAAC,CAAC,mBAAmB,GAAG,KAAO,CAAA,GAAA,+KAAA,CAAA,YAAS,AAAD,EAAE;QAAK;IACzE;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 891, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/bootstrap/index.js"],"sourcesContent":["import { createAdd } from './add.js'\nimport { createClear } from './clear.js'\nimport { createList } from './list.js'\nimport { createReset } from './reset.js'\nimport { createRm } from './rm.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createBootstrap (config) {\n  return {\n    add: createAdd(config),\n    clear: createClear(config),\n    list: createList(config),\n    reset: createReset(config),\n    rm: createRm(config)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAKO,SAAS,gBAAiB,MAAM;IACrC,OAAO;QACL,KAAK,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE;QACf,OAAO,CAAA,GAAA,+JAAA,CAAA,cAAW,AAAD,EAAE;QACnB,MAAM,CAAA,GAAA,8JAAA,CAAA,aAAU,AAAD,EAAE;QACjB,OAAO,CAAA,GAAA,+JAAA,CAAA,cAAW,AAAD,EAAE;QACnB,IAAI,CAAA,GAAA,4JAAA,CAAA,WAAQ,AAAD,EAAE;IACf;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 919, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/config/profiles/apply.js"],"sourcesContent":["import { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config/profiles').API<HTTPClientExtraOptions>} ConfigProfilesAPI\n */\n\nexport const createApply = configure(api => {\n  /**\n   * @type {ConfigProfilesAPI[\"apply\"]}\n   */\n  async function apply (profile, options = {}) {\n    const res = await api.post('config/profile/apply', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: profile,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      original: data.OldCfg, updated: data.NewCfg\n    }\n  }\n\n  return apply\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACnC;;GAEC,GACD,eAAe,MAAO,OAAO,EAAE,UAAU,CAAC,CAAC;QACzC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,wBAAwB;YACjD,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,OAAO;YACL,UAAU,KAAK,MAAM;YAAE,SAAS,KAAK,MAAM;QAC7C;IACF;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 952, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/lib/object-to-camel.js"],"sourcesContent":["\n/**\n * Convert object properties to camel case.\n * NOT recursive!\n * e.g.\n * AgentVersion => agentVersion\n * ID => id\n *\n * @param {Record<string, any>} obj\n */\nexport function objectToCamel (obj) {\n  if (obj == null) {\n    return obj\n  }\n\n  const caps = /^[A-Z]+$/\n\n  /** @type {Record<string, any>} */\n  const output = {}\n\n  return Object.keys(obj).reduce((camelObj, k) => {\n    if (caps.test(k)) { // all caps\n      camelObj[k.toLowerCase()] = obj[k]\n    } else if (caps.test(k[0])) { // pascal\n      camelObj[k[0].toLowerCase() + k.slice(1)] = obj[k]\n    } else {\n      camelObj[k] = obj[k]\n    }\n    return camelObj\n  }, output)\n}\n"],"names":[],"mappings":"AACA;;;;;;;;CAQC;;;AACM,SAAS,cAAe,GAAG;IAChC,IAAI,OAAO,MAAM;QACf,OAAO;IACT;IAEA,MAAM,OAAO;IAEb,gCAAgC,GAChC,MAAM,SAAS,CAAC;IAEhB,OAAO,OAAO,IAAI,CAAC,KAAK,MAAM,CAAC,CAAC,UAAU;QACxC,IAAI,KAAK,IAAI,CAAC,IAAI;YAChB,QAAQ,CAAC,EAAE,WAAW,GAAG,GAAG,GAAG,CAAC,EAAE;QACpC,OAAO,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG;YAC1B,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,WAAW,KAAK,EAAE,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE;QACpD,OAAO;YACL,QAAQ,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE;QACtB;QACA,OAAO;IACT,GAAG;AACL","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 986, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/config/profiles/list.js"],"sourcesContent":["import { objectToCamel } from '../../lib/object-to-camel.js'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config/profiles').API<HTTPClientExtraOptions>} ConfigProfilesAPI\n */\n\nexport const createList = configure(api => {\n  /**\n   * @type {ConfigProfilesAPI[\"list\"]}\n   */\n  async function list (options = {}) {\n    const res = await api.post('config/profile/list', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n\n    return data.map((/** @type {Record<string, any>} */ profile) => objectToCamel(profile))\n  }\n  return list\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOO,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAClC;;GAEC,GACD,eAAe,KAAM,UAAU,CAAC,CAAC;QAC/B,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,uBAAuB;YAChD,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QAEA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,OAAO,KAAK,GAAG,CAAC,CAAC,gCAAgC,GAAG,UAAY,CAAA,GAAA,yKAAA,CAAA,gBAAa,AAAD,EAAE;IAChF;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1015, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/config/profiles/index.js"],"sourcesContent":["import { createApply } from './apply.js'\nimport { createList } from './list.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createProfiles (config) {\n  return {\n    apply: createApply(config),\n    list: createList(config)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAKO,SAAS,eAAgB,MAAM;IACpC,OAAO;QACL,OAAO,CAAA,GAAA,wKAAA,CAAA,cAAW,AAAD,EAAE;QACnB,MAAM,CAAA,GAAA,uKAAA,CAAA,aAAU,AAAD,EAAE;IACnB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1034, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/config/get.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {ConfigAPI[\"get\"]}\n   */\n  const get = async (key, options = {}) => {\n    if (!key) {\n      throw new Error('key argument is required')\n    }\n\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data.Value\n  }\n\n  return get\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACjC;;GAEC,GACD,MAAM,MAAM,OAAO,KAAK,UAAU,CAAC,CAAC;QAClC,IAAI,CAAC,KAAK;YACR,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,UAAU;YACnC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,OAAO,KAAK,KAAK;IACnB;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1067, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/config/get-all.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createGetAll = configure(api => {\n  /**\n   * @type {ConfigAPI[\"getAll\"]}\n   */\n  const getAll = async (options = {}) => {\n    const res = await api.post('config/show', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data\n  }\n\n  return getAll\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,eAAe,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACpC;;GAEC,GACD,MAAM,SAAS,OAAO,UAAU,CAAC,CAAC;QAChC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,eAAe;YACxC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,OAAO;IACT;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1096, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/config/replace.js"],"sourcesContent":["import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createReplace = configure(api => {\n  /**\n   * @type {ConfigAPI[\"replace\"]}\n   */\n  const replace = async (config, options = {}) => {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('config/replace', {\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest([uint8ArrayFromString(JSON.stringify(config))], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n\n  return replace\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAOO,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACrC;;GAEC,GACD,MAAM,UAAU,OAAO,QAAQ,UAAU,CAAC,CAAC;QACzC,yCAAyC;QACzC,MAAM,aAAa,IAAI;QACvB,MAAM,SAAS,CAAA,GAAA,mKAAA,CAAA,cAAW,AAAD,EAAE,WAAW,MAAM,EAAE,QAAQ,MAAM;QAE5D,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,kBAAkB;YAC3C;YACA,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,GACE,MAAM,CAAA,GAAA,2KAAA,CAAA,mBAAgB,AAAD,EAAE;gBAAC,CAAA,GAAA,wJAAA,CAAA,aAAoB,AAAD,EAAE,KAAK,SAAS,CAAC;aAAS,EAAE,YAAY,QAAQ,OAAO,CAAC;QAEvG;QAEA,MAAM,IAAI,IAAI;IAChB;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1133, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/config/set.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createSet = configure(api => {\n  /**\n   * @type {ConfigAPI[\"set\"]}\n   */\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type')\n    }\n\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    }\n\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n\n  return set\n})\n\n/**\n * @param {*} key\n * @param {*} value\n */\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return { arg: [key, value.toString()], bool: true }\n    case 'string':\n      return { arg: [key, value] }\n    default:\n      return { arg: [key, JSON.stringify(value)], json: true }\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACjC;;GAEC,GACD,MAAM,MAAM,OAAO,KAAK,OAAO,UAAU,CAAC,CAAC;QACzC,IAAI,OAAO,QAAQ,UAAU;YAC3B,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,SAAS;YACb,GAAG,OAAO;YACV,GAAG,YAAY,KAAK,MAAM;QAC5B;QAEA,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,UAAU;YACnC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QAEA,MAAM,IAAI,IAAI;IAChB;IAEA,OAAO;AACT;AAEA;;;CAGC,GACD,MAAM,cAAc,CAAC,KAAK;IACxB,OAAQ,OAAO;QACb,KAAK;YACH,OAAO;gBAAE,KAAK;oBAAC;oBAAK,MAAM,QAAQ;iBAAG;gBAAE,MAAM;YAAK;QACpD,KAAK;YACH,OAAO;gBAAE,KAAK;oBAAC;oBAAK;iBAAM;YAAC;QAC7B;YACE,OAAO;gBAAE,KAAK;oBAAC;oBAAK,KAAK,SAAS,CAAC;iBAAO;gBAAE,MAAM;YAAK;IAC3D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1196, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/config/index.js"],"sourcesContent":["import { createProfiles } from './profiles/index.js'\nimport { createGet } from './get.js'\nimport { createGetAll } from './get-all.js'\nimport { createReplace } from './replace.js'\nimport { createSet } from './set.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createConfig (config) {\n  return {\n    getAll: createGetAll(config),\n    get: createGet(config),\n    set: createSet(config),\n    replace: createReplace(config),\n    profiles: createProfiles(config)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAKO,SAAS,aAAc,MAAM;IAClC,OAAO;QACL,QAAQ,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE;QACrB,KAAK,CAAA,GAAA,0JAAA,CAAA,YAAS,AAAD,EAAE;QACf,KAAK,CAAA,GAAA,0JAAA,CAAA,YAAS,AAAD,EAAE;QACf,SAAS,CAAA,GAAA,8JAAA,CAAA,gBAAa,AAAD,EAAE;QACvB,UAAU,CAAA,GAAA,wKAAA,CAAA,iBAAc,AAAD,EAAE;IAC3B;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1224, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/dag/export.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nexport const createExport = configure(api => {\n  /**\n   * @type {DAGAPI[\"export\"]}\n   */\n  async function * dagExport (root, options = {}) {\n    const res = await api.post('dag/export', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: root.toString()\n      }),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return dagExport\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,eAAe,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACpC;;GAEC,GACD,gBAAiB,UAAW,IAAI,EAAE,UAAU,CAAC,CAAC;QAC5C,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,cAAc;YACvC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,KAAK,QAAQ;YACpB;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,OAAQ,IAAI,QAAQ;IACtB;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1252, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/lib/resolve.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * Retrieves IPLD Nodes along the `path` that is rooted at `cid`.\n *\n * @param {CID} cid - the CID where the resolving starts\n * @param {string} path - the path that should be resolved\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {(cid: CID, options?: AbortOptions) => Promise<Uint8Array>} getBlock\n * @param {AbortOptions} [options]\n */\nexport async function * resolve (cid, path, codecs, getBlock, options) {\n  /**\n   * @param {CID} cid\n   */\n  const load = async (cid) => {\n    const codec = await codecs.getCodec(cid.code)\n    const block = await getBlock(cid, options)\n\n    return codec.decode(block)\n  }\n\n  const parts = path.split('/').filter(Boolean)\n  let value = await load(cid)\n  let lastCid = cid\n\n  // End iteration if there isn't a CID to follow any more\n  while (parts.length) {\n    const key = parts.shift()\n\n    if (!key) {\n      throw errCode(new Error(`Could not resolve path \"${path}\"`), 'ERR_INVALID_PATH')\n    }\n\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      value = value[key]\n\n      yield {\n        value,\n        remainderPath: parts.join('/')\n      }\n    } else {\n      throw errCode(new Error(`no link named \"${key}\" under ${lastCid}`), 'ERR_NO_LINK')\n    }\n\n    const cid = CID.asCID(value)\n\n    if (cid) {\n      lastCid = cid\n      value = await load(value)\n    }\n  }\n\n  yield {\n    value,\n    remainderPath: ''\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAeO,gBAAiB,QAAS,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO;IACnE;;GAEC,GACD,MAAM,OAAO,OAAO;QAClB,MAAM,QAAQ,MAAM,OAAO,QAAQ,CAAC,IAAI,IAAI;QAC5C,MAAM,QAAQ,MAAM,SAAS,KAAK;QAElC,OAAO,MAAM,MAAM,CAAC;IACtB;IAEA,MAAM,QAAQ,KAAK,KAAK,CAAC,KAAK,MAAM,CAAC;IACrC,IAAI,QAAQ,MAAM,KAAK;IACvB,IAAI,UAAU;IAEd,wDAAwD;IACxD,MAAO,MAAM,MAAM,CAAE;QACnB,MAAM,MAAM,MAAM,KAAK;QAEvB,IAAI,CAAC,KAAK;YACR,MAAM,CAAA,GAAA,gIAAA,CAAA,UAAO,AAAD,EAAE,IAAI,MAAM,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC,GAAG;QAC/D;QAEA,IAAI,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,MAAM;YACpD,QAAQ,KAAK,CAAC,IAAI;YAElB,MAAM;gBACJ;gBACA,eAAe,MAAM,IAAI,CAAC;YAC5B;QACF,OAAO;YACL,MAAM,CAAA,GAAA,gIAAA,CAAA,UAAO,AAAD,EAAE,IAAI,MAAM,CAAC,eAAe,EAAE,IAAI,QAAQ,EAAE,SAAS,GAAG;QACtE;QAEA,MAAM,MAAM,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC;QAEtB,IAAI,KAAK;YACP,UAAU;YACV,QAAQ,MAAM,KAAK;QACrB;IACF;IAEA,MAAM;QACJ;QACA,eAAe;IACjB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1303, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/dag/get.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { resolve } from '../lib/resolve.js'\nimport first from 'it-first'\nimport last from 'it-last'\nimport errCode from 'err-code'\nimport { createGet as createBlockGet } from '../block/get.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createGet = (codecs, options) => {\n  const fn = configure((api, opts) => {\n    const getBlock = createBlockGet(opts)\n\n    /**\n     * @type {DAGAPI[\"get\"]}\n     */\n    const get = async (cid, options = {}) => {\n      if (options.path) {\n        const entry = options.localResolve\n          ? await first(resolve(cid, options.path, codecs, getBlock, options))\n          : await last(resolve(cid, options.path, codecs, getBlock, options))\n        /** @type {import('ipfs-core-types/src/dag').GetResult | undefined} - first and last will return undefined when empty */\n        const result = (entry)\n\n        if (!result) {\n          throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n        }\n\n        return result\n      }\n\n      const codec = await codecs.getCodec(cid.code)\n      const block = await getBlock(cid, options)\n      const node = codec.decode(block)\n\n      return {\n        value: node,\n        remainderPath: ''\n      }\n    }\n\n    return get\n  })\n\n  return fn(options)\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAWO,MAAM,YAAY,CAAC,QAAQ;IAChC,MAAM,KAAK,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAC,KAAK;QACzB,MAAM,WAAW,CAAA,GAAA,yJAAA,CAAA,YAAc,AAAD,EAAE;QAEhC;;KAEC,GACD,MAAM,MAAM,OAAO,KAAK,UAAU,CAAC,CAAC;YAClC,IAAI,QAAQ,IAAI,EAAE;gBAChB,MAAM,QAAQ,QAAQ,YAAY,GAC9B,MAAM,CAAA,GAAA,+IAAA,CAAA,UAAK,AAAD,EAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,KAAK,QAAQ,IAAI,EAAE,QAAQ,UAAU,YACzD,MAAM,CAAA,GAAA,8IAAA,CAAA,UAAI,AAAD,EAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,KAAK,QAAQ,IAAI,EAAE,QAAQ,UAAU;gBAC5D,sHAAsH,GACtH,MAAM,SAAU;gBAEhB,IAAI,CAAC,QAAQ;oBACX,MAAM,CAAA,GAAA,gIAAA,CAAA,UAAO,AAAD,EAAE,IAAI,MAAM,cAAc;gBACxC;gBAEA,OAAO;YACT;YAEA,MAAM,QAAQ,MAAM,OAAO,QAAQ,CAAC,IAAI,IAAI;YAC5C,MAAM,QAAQ,MAAM,SAAS,KAAK;YAClC,MAAM,OAAO,MAAM,MAAM,CAAC;YAE1B,OAAO;gBACL,OAAO;gBACP,eAAe;YACjB;QACF;QAEA,OAAO;IACT;IAEA,OAAO,GAAG;AACZ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1350, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/dag/import.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nexport const createImport = configure(api => {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  async function * dagImport (source, options = {}) {\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body } = await multipartRequest(source, controller, options.headers)\n\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams({ 'pin-roots': options.pinRoots })\n    })\n\n    for await (const { Root } of res.ndjson()) {\n      if (Root !== undefined) {\n        const { Cid: { '/': Cid }, PinErrorMsg } = Root\n\n        yield {\n          root: {\n            cid: CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        }\n      }\n    }\n  }\n\n  return dagImport\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AAAA;;;;;;AAOO,MAAM,eAAe,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACpC;;GAEC,GACD,gBAAiB,UAAW,MAAM,EAAE,UAAU,CAAC,CAAC;QAC9C,MAAM,aAAa,IAAI;QACvB,MAAM,SAAS,CAAA,GAAA,mKAAA,CAAA,cAAW,AAAD,EAAE,WAAW,MAAM,EAAE,QAAQ,MAAM;QAC5D,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,MAAM,CAAA,GAAA,2KAAA,CAAA,mBAAgB,AAAD,EAAE,QAAQ,YAAY,QAAQ,OAAO;QAEpF,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,cAAc;YACvC;YACA;YACA;YACA,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAAE,aAAa,QAAQ,QAAQ;YAAC;QAClE;QAEA,WAAW,MAAM,EAAE,IAAI,EAAE,IAAI,IAAI,MAAM,GAAI;YACzC,IAAI,SAAS,WAAW;gBACtB,MAAM,EAAE,KAAK,EAAE,KAAK,GAAG,EAAE,EAAE,WAAW,EAAE,GAAG;gBAE3C,MAAM;oBACJ,MAAM;wBACJ,KAAK,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC;wBACf,aAAa;oBACf;gBACF;YACF;QACF;IACF;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1399, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/dag/put.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createPut = (codecs, options) => {\n  const fn = configure((api) => {\n    /**\n     * @type {DAGAPI[\"put\"]}\n     */\n    const put = async (dagNode, options = {}) => {\n      const settings = {\n        storeCodec: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        ...options\n      }\n\n      let serialized\n\n      if (settings.inputCodec) {\n        // if you supply an inputCodec, we assume you're passing in a raw, encoded\n        // block using that codec, so we'll just pass that on to the server and let\n        // it deal with the decode/encode/store cycle\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded')\n        }\n        serialized = dagNode\n      } else {\n        // if you don't supply an inputCodec, we assume you've passed in a JavaScript\n        // object you want to have encoded using storeCodec, so we'll prepare it for\n        // you if we have the codec\n        const storeCodec = await codecs.getCodec(settings.storeCodec)\n        serialized = storeCodec.encode(dagNode)\n        // now we have a serialized form, the server should be told to receive it\n        // in that format\n        settings.inputCodec = settings.storeCodec\n      }\n\n      // allow aborting requests on body errors\n      const controller = new AbortController()\n      const signal = abortSignal(controller.signal, settings.signal)\n\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams(settings),\n        ...(\n          await multipartRequest([serialized], controller, settings.headers)\n        )\n      })\n      const data = await res.json()\n\n      return CID.parse(data.Cid['/'])\n    }\n\n    return put\n  })\n\n  return fn(options)\n}\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;AAWO,MAAM,YAAY,CAAC,QAAQ;IAChC,MAAM,KAAK,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAC;QACpB;;KAEC,GACD,MAAM,MAAM,OAAO,SAAS,UAAU,CAAC,CAAC;YACtC,MAAM,WAAW;gBACf,YAAY;gBACZ,SAAS;gBACT,GAAG,OAAO;YACZ;YAEA,IAAI;YAEJ,IAAI,SAAS,UAAU,EAAE;gBACvB,0EAA0E;gBAC1E,2EAA2E;gBAC3E,6CAA6C;gBAC7C,IAAI,CAAC,CAAC,mBAAmB,UAAU,GAAG;oBACpC,MAAM,IAAI,MAAM;gBAClB;gBACA,aAAa;YACf,OAAO;gBACL,6EAA6E;gBAC7E,4EAA4E;gBAC5E,2BAA2B;gBAC3B,MAAM,aAAa,MAAM,OAAO,QAAQ,CAAC,SAAS,UAAU;gBAC5D,aAAa,WAAW,MAAM,CAAC;gBAC/B,yEAAyE;gBACzE,iBAAiB;gBACjB,SAAS,UAAU,GAAG,SAAS,UAAU;YAC3C;YAEA,yCAAyC;YACzC,MAAM,aAAa,IAAI;YACvB,MAAM,SAAS,CAAA,GAAA,mKAAA,CAAA,cAAW,AAAD,EAAE,WAAW,MAAM,EAAE,SAAS,MAAM;YAE7D,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,WAAW;gBACpC,SAAS,SAAS,OAAO;gBACzB;gBACA,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAChC,GACE,MAAM,CAAA,GAAA,2KAAA,CAAA,mBAAgB,AAAD,EAAE;oBAAC;iBAAW,EAAE,YAAY,SAAS,OAAO,CAAC;YAEtE;YACA,MAAM,OAAO,MAAM,IAAI,IAAI;YAE3B,OAAO,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,IAAI;QAChC;QAEA,OAAO;IACT;IAEA,OAAO,GAAG;AACZ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1466, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/dag/resolve.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {DAGAPI[\"resolve\"]}\n   */\n  const resolve = async (ipfsPath, options = {}) => {\n    const res = await api.post('dag/resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${ipfsPath}${options.path ? `/${options.path}`.replace(/\\/[/]+/g, '/') : ''}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n\n    return { cid: CID.parse(data.Cid['/']), remainderPath: data.RemPath }\n  }\n\n  return resolve\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;;;;AAOO,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACrC;;GAEC,GACD,MAAM,UAAU,OAAO,UAAU,UAAU,CAAC,CAAC;QAC3C,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,eAAe;YACxC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,GAAG,WAAW,QAAQ,IAAI,GAAG,CAAC,CAAC,EAAE,QAAQ,IAAI,EAAE,CAAC,OAAO,CAAC,WAAW,OAAO,IAAI;gBACnF,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,OAAO;YAAE,KAAK,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,IAAI;YAAG,eAAe,KAAK,OAAO;QAAC;IACtE;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1502, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/dag/index.js"],"sourcesContent":["import { createExport } from './export.js'\nimport { createGet } from './get.js'\nimport { createImport } from './import.js'\nimport { createPut } from './put.js'\nimport { createResolve } from './resolve.js'\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} config\n */\nexport function createDag (codecs, config) {\n  return {\n    export: createExport(config),\n    get: createGet(codecs, config),\n    import: createImport(config),\n    put: createPut(codecs, config),\n    resolve: createResolve(config)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAMO,SAAS,UAAW,MAAM,EAAE,MAAM;IACvC,OAAO;QACL,QAAQ,CAAA,GAAA,0JAAA,CAAA,eAAY,AAAD,EAAE;QACrB,KAAK,CAAA,GAAA,uJAAA,CAAA,YAAS,AAAD,EAAE,QAAQ;QACvB,QAAQ,CAAA,GAAA,0JAAA,CAAA,eAAY,AAAD,EAAE;QACrB,KAAK,CAAA,GAAA,uJAAA,CAAA,YAAS,AAAD,EAAE,QAAQ;QACvB,SAAS,CAAA,GAAA,2JAAA,CAAA,gBAAa,AAAD,EAAE;IACzB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1530, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/dht/response-types.js"],"sourcesContent":["\n// Response types are defined here =\n// https://github.com/libp2p/go-libp2p-core/blob/6e566d10f4a5447317a66d64c7459954b969bdab/routing/query.go#L15-L24\nexport const SendingQuery = 0\nexport const PeerResponse = 1\nexport const FinalPeer = 2\nexport const QueryError = 3\nexport const Provider = 4\nexport const Value = 5\nexport const AddingPeer = 6\nexport const DialingPeer = 7\n"],"names":[],"mappings":"AACA,oCAAoC;AACpC,kHAAkH;;;;;;;;;;;AAC3G,MAAM,eAAe;AACrB,MAAM,eAAe;AACrB,MAAM,YAAY;AAClB,MAAM,aAAa;AACnB,MAAM,WAAW;AACjB,MAAM,QAAQ;AACd,MAAM,aAAa;AACnB,MAAM,cAAc","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1556, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/dht/map-event.js"],"sourcesContent":["import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport {\n  SendingQuery,\n  PeerResponse,\n  FinalPeer,\n  QueryError,\n  Provider,\n  Value,\n  AddingPeer,\n  DialingPeer\n} from './response-types.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {{Type: number, ID: string, Extra: string, Responses: {ID: string, Addrs: string[]}[]}} event\n * @returns {import('ipfs-core-types/src/dht').QueryEvent}\n */\nexport const mapEvent = (event) => {\n  if (event.Type === SendingQuery) {\n    return {\n      name: 'SENDING_QUERY',\n      type: event.Type\n    }\n  }\n\n  if (event.Type === PeerResponse) {\n    return {\n      from: peerIdFromString(event.ID),\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      // TODO: how to infer this from the go-ipfs response\n      messageType: 0,\n      // TODO: how to infer this from the go-ipfs response\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => multiaddr(addr)), protocols: [] })),\n      providers: (event.Responses || []).map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => multiaddr(addr)), protocols: [] }))\n      // TODO: how to infer this from the go-ipfs response\n      // record: ???\n    }\n  }\n\n  if (event.Type === FinalPeer) {\n    // dht.query ends with a FinalPeer event with no Responses\n    /** @type {import('@libp2p/interface-peer-info').PeerInfo} */\n    let peer = {\n      // @ts-expect-error go-ipfs does not return this\n      id: event.ID ?? peerIdFromString(event.ID),\n      /** @type {Multiaddr[]} */\n      multiaddrs: [],\n      protocols: []\n    }\n\n    if (event.Responses && event.Responses.length) {\n      // dht.findPeer has the result in the Responses field\n      peer = {\n        id: peerIdFromString(event.Responses[0].ID),\n        multiaddrs: event.Responses[0].Addrs.map(addr => multiaddr(addr)),\n        protocols: []\n      }\n    }\n\n    return {\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    }\n  }\n\n  if (event.Type === QueryError) {\n    return {\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    }\n  }\n\n  if (event.Type === Provider) {\n    return {\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => multiaddr(addr)), protocols: [] }))\n    }\n  }\n\n  if (event.Type === Value) {\n    return {\n      name: 'VALUE',\n      type: event.Type,\n      value: uint8ArrayFromString(event.Extra, 'base64pad')\n    }\n  }\n\n  if (event.Type === AddingPeer) {\n    const peers = event.Responses.map(({ ID }) => peerIdFromString(ID))\n\n    if (!peers.length) {\n      throw new Error('No peer found')\n    }\n\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    }\n  }\n\n  if (event.Type === DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: peerIdFromString(event.ID)\n    }\n  }\n\n  throw new Error('Unknown DHT event type')\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1669, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/dht/find-peer.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createFindPeer = configure(api => {\n  /**\n   * @type {DHTAPI[\"findPeer\"]}\n   */\n  async function * findPeer (peerId, options = {}) {\n    const res = await api.post('dht/findpeer', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return findPeer\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOO,MAAM,iBAAiB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACtC;;GAEC,GACD,gBAAiB,SAAU,MAAM,EAAE,UAAU,CAAC,CAAC;QAC7C,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,gBAAgB;YACzC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,WAAW,MAAM,SAAS,IAAI,MAAM,GAAI;YACtC,MAAM,CAAA,GAAA,gKAAA,CAAA,WAAQ,AAAD,EAAE;QACjB;IACF;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1702, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/dht/find-provs.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createFindProvs = configure(api => {\n  /**\n   * @type {DHTAPI[\"findProvs\"]}\n   */\n  async function * findProvs (cid, options = {}) {\n    const res = await api.post('dht/findprovs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return findProvs\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOO,MAAM,kBAAkB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACvC;;GAEC,GACD,gBAAiB,UAAW,GAAG,EAAE,UAAU,CAAC,CAAC;QAC3C,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,iBAAiB;YAC1C,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,IAAI,QAAQ;gBACjB,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,WAAW,MAAM,SAAS,IAAI,MAAM,GAAI;YACtC,MAAM,CAAA,GAAA,gKAAA,CAAA,WAAQ,AAAD,EAAE;QACjB;IACF;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1735, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/dht/get.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {DHTAPI[\"get\"]}\n   */\n  async function * get (key, options = {}) {\n    const res = await api.post('dht/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        // arg: base36.encode(key),\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return get\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAOO,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACjC;;GAEC,GACD,gBAAiB,IAAK,GAAG,EAAE,UAAU,CAAC,CAAC;QACrC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,WAAW;YACpC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,2BAA2B;gBAC3B,KAAK,eAAe,aAAa,CAAA,GAAA,sJAAA,CAAA,WAAkB,AAAD,EAAE,OAAO,IAAI,QAAQ;gBACvE,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,WAAW,MAAM,SAAS,IAAI,MAAM,GAAI;YACtC,MAAM,CAAA,GAAA,gKAAA,CAAA,WAAQ,AAAD,EAAE;QACjB;IACF;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1771, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/dht/provide.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n * @typedef {import('multiformats/cid').CID} CID\n */\n\nexport const createProvide = configure(api => {\n  /**\n   * @type {DHTAPI[\"provide\"]}\n   */\n  async function * provide (cids, options = { recursive: false }) {\n    /** @type {CID[]} */\n    const cidArr = Array.isArray(cids) ? cids : [cids]\n\n    const res = await api.post('dht/provide', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cidArr.map(cid => cid.toString()),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return provide\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAQO,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACrC;;GAEC,GACD,gBAAiB,QAAS,IAAI,EAAE,UAAU;QAAE,WAAW;IAAM,CAAC;QAC5D,kBAAkB,GAClB,MAAM,SAAS,MAAM,OAAO,CAAC,QAAQ,OAAO;YAAC;SAAK;QAElD,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,eAAe;YACxC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,OAAO,GAAG,CAAC,CAAA,MAAO,IAAI,QAAQ;gBACnC,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,WAAW,MAAM,SAAS,IAAI,MAAM,GAAI;YACtC,MAAM,CAAA,GAAA,gKAAA,CAAA,WAAQ,AAAD,EAAE;QACjB;IACF;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1809, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/dht/put.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createPut = configure(api => {\n  /**\n   * @type {DHTAPI[\"put\"]}\n   */\n  async function * put (key, value, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('dht/put', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key.toString(),\n        ...options\n      }),\n      ...(\n        await multipartRequest([value], controller, options.headers)\n      )\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return put\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOO,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACjC;;GAEC,GACD,gBAAiB,IAAK,GAAG,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;QAC5C,yCAAyC;QACzC,MAAM,aAAa,IAAI;QACvB,MAAM,SAAS,CAAA,GAAA,mKAAA,CAAA,cAAW,AAAD,EAAE,WAAW,MAAM,EAAE,QAAQ,MAAM;QAE5D,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,WAAW;YACpC;YACA,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,eAAe,aAAa,CAAA,GAAA,sJAAA,CAAA,WAAkB,AAAD,EAAE,OAAO,IAAI,QAAQ;gBACvE,GAAG,OAAO;YACZ;YACA,GACE,MAAM,CAAA,GAAA,2KAAA,CAAA,mBAAgB,AAAD,EAAE;gBAAC;aAAM,EAAE,YAAY,QAAQ,OAAO,CAAC;QAEhE;QAEA,WAAW,MAAM,SAAS,IAAI,MAAM,GAAI;YACtC,MAAM,CAAA,GAAA,gKAAA,CAAA,WAAQ,AAAD,EAAE;QACjB;IACF;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1853, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/dht/query.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createQuery = configure(api => {\n  /**\n   * @type {DHTAPI[\"query\"]}\n   */\n  async function * query (peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return query\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOO,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACnC;;GAEC,GACD,gBAAiB,MAAO,MAAM,EAAE,UAAU,CAAC,CAAC;QAC1C,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,aAAa;YACtC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,OAAO,QAAQ;gBACpB,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,WAAW,MAAM,SAAS,IAAI,MAAM,GAAI;YACtC,MAAM,CAAA,GAAA,gKAAA,CAAA,WAAQ,AAAD,EAAE;QACjB;IACF;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1886, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/dht/index.js"],"sourcesContent":["import { createFindPeer } from './find-peer.js'\nimport { createFindProvs } from './find-provs.js'\nimport { createGet } from './get.js'\nimport { createProvide } from './provide.js'\nimport { createPut } from './put.js'\nimport { createQuery } from './query.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createDht (config) {\n  return {\n    findPeer: createFindPeer(config),\n    findProvs: createFindProvs(config),\n    get: createGet(config),\n    provide: createProvide(config),\n    put: createPut(config),\n    query: createQuery(config)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAKO,SAAS,UAAW,MAAM;IAC/B,OAAO;QACL,UAAU,CAAA,GAAA,gKAAA,CAAA,iBAAc,AAAD,EAAE;QACzB,WAAW,CAAA,GAAA,iKAAA,CAAA,kBAAe,AAAD,EAAE;QAC3B,KAAK,CAAA,GAAA,uJAAA,CAAA,YAAS,AAAD,EAAE;QACf,SAAS,CAAA,GAAA,2JAAA,CAAA,gBAAa,AAAD,EAAE;QACvB,KAAK,CAAA,GAAA,uJAAA,CAAA,YAAS,AAAD,EAAE;QACf,OAAO,CAAA,GAAA,yJAAA,CAAA,cAAW,AAAD,EAAE;IACrB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1917, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/diag/cmds.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/diag').API<HTTPClientExtraOptions>} DiagAPI\n */\n\nexport const createCmds = configure(api => {\n  /**\n   * @type {DiagAPI[\"cmds\"]}\n   */\n  async function cmds (options = {}) {\n    const res = await api.post('diag/cmds', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return cmds\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAClC;;GAEC,GACD,eAAe,KAAM,UAAU,CAAC,CAAC;QAC/B,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,aAAa;YACtC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QAEA,OAAO,IAAI,IAAI;IACjB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1943, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/diag/net.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/diag').API<HTTPClientExtraOptions>} DiagAPI\n */\n\nexport const createNet = configure(api => {\n  /**\n   * @type {DiagAPI[\"net\"]}\n   */\n  async function net (options = {}) {\n    const res = await api.post('diag/net', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    return res.json()\n  }\n  return net\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACjC;;GAEC,GACD,eAAe,IAAK,UAAU,CAAC,CAAC;QAC9B,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY;YACrC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QACA,OAAO,IAAI,IAAI;IACjB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1969, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/diag/sys.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/diag').API<HTTPClientExtraOptions>} DiagAPI\n */\n\nexport const createSys = configure(api => {\n  /**\n   * @type {DiagAPI[\"sys\"]}\n   */\n  async function sys (options = {}) {\n    const res = await api.post('diag/sys', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return sys\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACjC;;GAEC,GACD,eAAe,IAAK,UAAU,CAAC,CAAC;QAC9B,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY;YACrC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QAEA,OAAO,IAAI,IAAI;IACjB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1995, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/diag/index.js"],"sourcesContent":["import { createCmds } from './cmds.js'\nimport { createNet } from './net.js'\nimport { createSys } from './sys.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createDiag (config) {\n  return {\n    cmds: createCmds(config),\n    net: createNet(config),\n    sys: createSys(config)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAKO,SAAS,WAAY,MAAM;IAChC,OAAO;QACL,MAAM,CAAA,GAAA,yJAAA,CAAA,aAAU,AAAD,EAAE;QACjB,KAAK,CAAA,GAAA,wJAAA,CAAA,YAAS,AAAD,EAAE;QACf,KAAK,CAAA,GAAA,wJAAA,CAAA,YAAS,AAAD,EAAE;IACjB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2017, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/files/chmod.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createChmod = configure(api => {\n  /**\n   * @type {FilesAPI[\"chmod\"]}\n   */\n  async function chmod (path, mode, options = {}) {\n    const res = await api.post('files/chmod', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        mode,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return chmod\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACnC;;GAEC,GACD,eAAe,MAAO,IAAI,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;QAC5C,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,eAAe;YACxC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL;gBACA,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,MAAM,IAAI,IAAI;IAChB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2047, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/files/cp.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createCp = configure(api => {\n  /**\n   * @type {FilesAPI[\"cp\"]}\n   */\n  async function cp (sources, destination, options = {}) {\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const sourceArr = Array.isArray(sources) ? sources : [sources]\n\n    const res = await api.post('files/cp', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sourceArr.concat(destination).map(src => CID.asCID(src) ? `/ipfs/${src}` : src),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return cp\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;;;;AAOO,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAChC;;GAEC,GACD,eAAe,GAAI,OAAO,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;QACnD,2DAA2D,GAC3D,MAAM,YAAY,MAAM,OAAO,CAAC,WAAW,UAAU;YAAC;SAAQ;QAE9D,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY;YACrC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,UAAU,MAAM,CAAC,aAAa,GAAG,CAAC,CAAA,MAAO,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,GAAG;gBAChF,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,MAAM,IAAI,IAAI;IAChB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2082, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/files/flush.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createFlush = configure(api => {\n  /**\n   * @type {FilesAPI[\"flush\"]}\n   */\n  async function flush (path, options = {}) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.flush requires a path')\n    }\n\n    const res = await api.post('files/flush', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return CID.parse(data.Cid)\n  }\n  return flush\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;;;;AAOO,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACnC;;GAEC,GACD,eAAe,MAAO,IAAI,EAAE,UAAU,CAAC,CAAC;QACtC,IAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;YACrC,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,eAAe;YACxC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,OAAO,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC,KAAK,GAAG;IAC3B;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2118, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/lib/object-to-camel-with-metadata.js"],"sourcesContent":["import { objectToCamel } from './object-to-camel.js'\n\n/**\n * @param {Record<string, any>} entry\n */\nexport function objectToCamelWithMetadata (entry) {\n  const file = objectToCamel(entry)\n\n  if (Object.prototype.hasOwnProperty.call(file, 'mode')) {\n    file.mode = parseInt(file.mode, 8)\n  }\n\n  if (Object.prototype.hasOwnProperty.call(file, 'mtime')) {\n    file.mtime = {\n      secs: file.mtime,\n      nsecs: file.mtimeNsecs || 0\n    }\n\n    delete file.mtimeNsecs\n  }\n\n  return file\n}\n"],"names":[],"mappings":";;;AAAA;;AAKO,SAAS,0BAA2B,KAAK;IAC9C,MAAM,OAAO,CAAA,GAAA,yKAAA,CAAA,gBAAa,AAAD,EAAE;IAE3B,IAAI,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,SAAS;QACtD,KAAK,IAAI,GAAG,SAAS,KAAK,IAAI,EAAE;IAClC;IAEA,IAAI,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,UAAU;QACvD,KAAK,KAAK,GAAG;YACX,MAAM,KAAK,KAAK;YAChB,OAAO,KAAK,UAAU,IAAI;QAC5B;QAEA,OAAO,KAAK,UAAU;IACxB;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2143, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/files/ls.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\nexport const createLs = configure(api => {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path')\n    }\n\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.asCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(objectToCamelWithMetadata(entry))\n        }\n      } else {\n        yield toCoreInterface(objectToCamelWithMetadata(result))\n      }\n    }\n  }\n  return ls\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash)\n  }\n\n  delete entry.hash\n\n  entry.type = entry.type === 1 ? 'directory' : 'file'\n\n  return entry\n}\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;AACA;;;;;AAMO,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAChC;;GAEC,GACD,gBAAiB,GAAI,IAAI,EAAE,UAAU,CAAC,CAAC;QACrC,IAAI,CAAC,MAAM;YACT,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY;YACrC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,GAAG;gBACzC,yEAAyE;gBACzE,MAAM;gBACN,GAAG,OAAO;gBACV,QAAQ;YACV;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,WAAW,MAAM,UAAU,IAAI,MAAM,GAAI;YACvC,mDAAmD;YACnD,IAAI,aAAa,QAAQ;gBACvB,KAAK,MAAM,SAAS,OAAO,OAAO,IAAI,EAAE,CAAE;oBACxC,MAAM,gBAAgB,CAAA,GAAA,6LAAA,CAAA,4BAAyB,AAAD,EAAE;gBAClD;YACF,OAAO;gBACL,MAAM,gBAAgB,CAAA,GAAA,6LAAA,CAAA,4BAAyB,AAAD,EAAE;YAClD;QACF;IACF;IACA,OAAO;AACT;AAEA;;CAEC,GACD,SAAS,gBAAiB,KAAK;IAC7B,IAAI,MAAM,IAAI,EAAE;QACd,MAAM,GAAG,GAAG,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC,MAAM,IAAI;IAClC;IAEA,OAAO,MAAM,IAAI;IAEjB,MAAM,IAAI,GAAG,MAAM,IAAI,KAAK,IAAI,cAAc;IAE9C,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2202, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/files/mkdir.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createMkdir = configure(api => {\n  /**\n   * @type {FilesAPI[\"mkdir\"]}\n   */\n  async function mkdir (path, options = {}) {\n    const res = await api.post('files/mkdir', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return mkdir\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACnC;;GAEC,GACD,eAAe,MAAO,IAAI,EAAE,UAAU,CAAC,CAAC;QACtC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,eAAe;YACxC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,MAAM,IAAI,IAAI;IAChB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2231, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/files/mv.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createMv = configure(api => {\n  /**\n   * @type {FilesAPI[\"mv\"]}\n   */\n  async function mv (sources, destination, options = {}) {\n    if (!Array.isArray(sources)) {\n      sources = [sources]\n    }\n\n    const res = await api.post('files/mv', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sources.concat(destination),\n        ...options\n      }),\n      headers: options.headers\n    })\n    await res.text()\n  }\n\n  return mv\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAChC;;GAEC,GACD,eAAe,GAAI,OAAO,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;QACnD,IAAI,CAAC,MAAM,OAAO,CAAC,UAAU;YAC3B,UAAU;gBAAC;aAAQ;QACrB;QAEA,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY;YACrC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,QAAQ,MAAM,CAAC;gBACpB,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QACA,MAAM,IAAI,IAAI;IAChB;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2265, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/files/read.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n// @ts-expect-error no types\nimport toIterable from 'stream-to-it/source.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createRead = configure(api => {\n  /**\n   * @type {FilesAPI[\"read\"]}\n   */\n  async function * read (path, options = {}) {\n    const res = await api.post('files/read', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        count: options.length,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    yield * toIterable(res.body)\n  }\n  return read\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA,4BAA4B;AAC5B;;;;AAOO,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAClC;;GAEC,GACD,gBAAiB,KAAM,IAAI,EAAE,UAAU,CAAC,CAAC;QACvC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,cAAc;YACvC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,OAAO,QAAQ,MAAM;gBACrB,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,OAAQ,CAAA,GAAA,wIAAA,CAAA,UAAU,AAAD,EAAE,IAAI,IAAI;IAC7B;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2298, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/files/rm.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport HTTP from 'ipfs-utils/src/http.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {FilesAPI[\"rm\"]}\n   */\n  async function rm (path, options = {}) {\n    const res = await api.post('files/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const body = await res.text()\n    // we don't expect text body to be ever present\n    // (if so, it means an error such as https://github.com/ipfs/go-ipfs/issues/8606)\n    if (body !== '') {\n      /** @type {Error} */\n      const error = new HTTP.HTTPError(res)\n      error.message = body\n      throw error\n    }\n  }\n  return rm\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOO,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAChC;;GAEC,GACD,eAAe,GAAI,IAAI,EAAE,UAAU,CAAC,CAAC;QACnC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY;YACrC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,+CAA+C;QAC/C,iFAAiF;QACjF,IAAI,SAAS,IAAI;YACf,kBAAkB,GAClB,MAAM,QAAQ,IAAI,wIAAA,CAAA,UAAI,CAAC,SAAS,CAAC;YACjC,MAAM,OAAO,GAAG;YAChB,MAAM;QACR;IACF;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2336, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/files/stat.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {FilesAPI[\"stat\"]}\n   */\n  async function stat (path, options = {}) {\n    const res = await api.post('files/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    data.WithLocality = data.WithLocality || false\n    return toCoreInterface(objectToCamelWithMetadata(data))\n  }\n  return stat\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  entry.cid = CID.parse(entry.hash)\n  delete entry.hash\n  return entry\n}\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;AACA;;;;;AAOO,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAClC;;GAEC,GACD,eAAe,KAAM,IAAI,EAAE,UAAU,CAAC,CAAC;QACrC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,cAAc;YACvC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,KAAK,YAAY,GAAG,KAAK,YAAY,IAAI;QACzC,OAAO,gBAAgB,CAAA,GAAA,6LAAA,CAAA,4BAAyB,AAAD,EAAE;IACnD;IACA,OAAO;AACT;AAEA;;CAEC,GACD,SAAS,gBAAiB,KAAK;IAC7B,MAAM,GAAG,GAAG,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC,MAAM,IAAI;IAChC,OAAO,MAAM,IAAI;IACjB,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2379, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/files/touch.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createTouch = configure(api => {\n  /**\n   * @type {FilesAPI[\"touch\"]}\n   */\n  async function touch (path, options = {}) {\n    const res = await api.post('files/touch', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return touch\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACnC;;GAEC,GACD,eAAe,MAAO,IAAI,EAAE,UAAU,CAAC,CAAC;QACtC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,eAAe;YACxC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,MAAM,IAAI,IAAI;IAChB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2408, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/files/write.js"],"sourcesContent":["import { modeToString } from '../lib/mode-to-string.js'\nimport { parseMtime } from '../lib/parse-mtime.js'\nimport { configure } from '../lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createWrite = configure(api => {\n  /**\n   * @type {FilesAPI[\"write\"]}\n   */\n  async function write (path, input, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('files/write', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(\n        await multipartRequest([{\n          content: input,\n          path: 'arg',\n          mode: modeToString(options.mode),\n          mtime: parseMtime(options.mtime)\n        }], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return write\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOO,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACnC;;GAEC,GACD,eAAe,MAAO,IAAI,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;QAC7C,yCAAyC;QACzC,MAAM,aAAa,IAAI;QACvB,MAAM,SAAS,CAAA,GAAA,mKAAA,CAAA,cAAW,AAAD,EAAE,WAAW,MAAM,EAAE,QAAQ,MAAM;QAE5D,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,eAAe;YACxC;YACA,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,gBAAgB;gBAChB,OAAO,QAAQ,MAAM;gBACrB,GAAG,OAAO;YACZ;YACA,GACE,MAAM,CAAA,GAAA,2KAAA,CAAA,mBAAgB,AAAD,EAAE;gBAAC;oBACtB,SAAS;oBACT,MAAM;oBACN,MAAM,CAAA,GAAA,wKAAA,CAAA,eAAY,AAAD,EAAE,QAAQ,IAAI;oBAC/B,OAAO,CAAA,GAAA,kKAAA,CAAA,aAAU,AAAD,EAAE,QAAQ,KAAK;gBACjC;aAAE,EAAE,YAAY,QAAQ,OAAO,CAAC;QAEpC;QAEA,MAAM,IAAI,IAAI;IAChB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2457, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/files/index.js"],"sourcesContent":["import { createChmod } from './chmod.js'\nimport { createCp } from './cp.js'\nimport { createFlush } from './flush.js'\nimport { createLs } from './ls.js'\nimport { createMkdir } from './mkdir.js'\nimport { createMv } from './mv.js'\nimport { createRead } from './read.js'\nimport { createRm } from './rm.js'\nimport { createStat } from './stat.js'\nimport { createTouch } from './touch.js'\nimport { createWrite } from './write.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createFiles (config) {\n  return {\n    chmod: createChmod(config),\n    cp: createCp(config),\n    flush: createFlush(config),\n    ls: createLs(config),\n    mkdir: createMkdir(config),\n    mv: createMv(config),\n    read: createRead(config),\n    rm: createRm(config),\n    stat: createStat(config),\n    touch: createTouch(config),\n    write: createWrite(config)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAKO,SAAS,YAAa,MAAM;IACjC,OAAO;QACL,OAAO,CAAA,GAAA,2JAAA,CAAA,cAAW,AAAD,EAAE;QACnB,IAAI,CAAA,GAAA,wJAAA,CAAA,WAAQ,AAAD,EAAE;QACb,OAAO,CAAA,GAAA,2JAAA,CAAA,cAAW,AAAD,EAAE;QACnB,IAAI,CAAA,GAAA,wJAAA,CAAA,WAAQ,AAAD,EAAE;QACb,OAAO,CAAA,GAAA,2JAAA,CAAA,cAAW,AAAD,EAAE;QACnB,IAAI,CAAA,GAAA,wJAAA,CAAA,WAAQ,AAAD,EAAE;QACb,MAAM,CAAA,GAAA,0JAAA,CAAA,aAAU,AAAD,EAAE;QACjB,IAAI,CAAA,GAAA,wJAAA,CAAA,WAAQ,AAAD,EAAE;QACb,MAAM,CAAA,GAAA,0JAAA,CAAA,aAAU,AAAD,EAAE;QACjB,OAAO,CAAA,GAAA,2JAAA,CAAA,cAAW,AAAD,EAAE;QACnB,OAAO,CAAA,GAAA,2JAAA,CAAA,cAAW,AAAD,EAAE;IACrB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2503, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/key/export.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport errCode from 'err-code'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createExport = configure(api => {\n  /**\n   * @type {KeyAPI[\"export\"]}\n   */\n  const exportKey = async (name, password, options = {}) => {\n    throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED')\n  }\n\n  return exportKey\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,eAAe,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACpC;;GAEC,GACD,MAAM,YAAY,OAAO,MAAM,UAAU,UAAU,CAAC,CAAC;QACnD,MAAM,CAAA,GAAA,gIAAA,CAAA,UAAO,AAAD,EAAE,IAAI,MAAM,oBAAoB;IAC9C;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2524, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/key/gen.js"],"sourcesContent":["import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createGen = configure(api => {\n  /**\n   * @type {KeyAPI[\"gen\"]}\n   */\n  async function gen (name, options) {\n    const opts = options ?? { type: 'Ed25519' }\n\n    const res = await api.post('key/gen', {\n      signal: opts.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...opts\n      }),\n      headers: opts.headers\n    })\n    const data = await res.json()\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(data)\n  }\n  return gen\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOO,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACjC;;GAEC,GACD,eAAe,IAAK,IAAI,EAAE,OAAO;QAC/B,MAAM,OAAO,WAAW;YAAE,MAAM;QAAU;QAE1C,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,WAAW;YACpC,QAAQ,KAAK,MAAM;YACnB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,GAAG,IAAI;YACT;YACA,SAAS,KAAK,OAAO;QACvB;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,8CAA8C;QAC9C,OAAO,CAAA,GAAA,yKAAA,CAAA,gBAAa,AAAD,EAAE;IACvB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2560, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/key/import.js"],"sourcesContent":["import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createImport = configure(api => {\n  /**\n   * @type {KeyAPI[\"import\"]}\n   */\n  async function importKey (name, pem, password, options = {}) {\n    const res = await api.post('key/import', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        pem,\n        password,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(data)\n  }\n  return importKey\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOO,MAAM,eAAe,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACpC;;GAEC,GACD,eAAe,UAAW,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QACzD,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,cAAc;YACvC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL;gBACA;gBACA,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,8CAA8C;QAC9C,OAAO,CAAA,GAAA,yKAAA,CAAA,gBAAa,AAAD,EAAE;IACvB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2595, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/key/info.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport errCode from 'err-code'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createInfo = configure(api => {\n  /**\n   * @type {KeyAPI[\"info\"]}\n   */\n  const info = async (name, options = {}) => {\n    throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED')\n  }\n\n  return info\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAClC;;GAEC,GACD,MAAM,OAAO,OAAO,MAAM,UAAU,CAAC,CAAC;QACpC,MAAM,CAAA,GAAA,gIAAA,CAAA,UAAO,AAAD,EAAE,IAAI,MAAM,oBAAoB;IAC9C;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2616, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/key/list.js"],"sourcesContent":["import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createList = configure(api => {\n  /**\n   * @type {KeyAPI[\"list\"]}\n   */\n  async function list (options = {}) {\n    const res = await api.post('key/list', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return (data.Keys || []).map((/** @type {any} **/ k) => objectToCamel(k))\n  }\n  return list\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOO,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAClC;;GAEC,GACD,eAAe,KAAM,UAAU,CAAC,CAAC;QAC/B,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY;YACrC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,OAAO,CAAC,KAAK,IAAI,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC,iBAAiB,GAAG,IAAM,CAAA,GAAA,yKAAA,CAAA,gBAAa,AAAD,EAAE;IACxE;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2645, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/key/rename.js"],"sourcesContent":["import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createRename = configure(api => {\n  /**\n   * @type {KeyAPI[\"rename\"]}\n   */\n  async function rename (oldName, newName, options = {}) {\n    const res = await api.post('key/rename', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          oldName,\n          newName\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return rename\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOO,MAAM,eAAe,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACpC;;GAEC,GACD,eAAe,OAAQ,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;QACnD,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,cAAc;YACvC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;oBACH;oBACA;iBACD;gBACD,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,8CAA8C;QAC9C,OAAO,CAAA,GAAA,yKAAA,CAAA,gBAAa,AAAD,EAAE,MAAM,IAAI,IAAI;IACrC;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2680, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/key/rm.js"],"sourcesContent":["import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {KeyAPI[\"rm\"]}\n   */\n  async function rm (name, options = {}) {\n    const res = await api.post('key/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(data.Keys[0])\n  }\n  return rm\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOO,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAChC;;GAEC,GACD,eAAe,GAAI,IAAI,EAAE,UAAU,CAAC,CAAC;QACnC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,UAAU;YACnC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,8CAA8C;QAC9C,OAAO,CAAA,GAAA,yKAAA,CAAA,gBAAa,AAAD,EAAE,KAAK,IAAI,CAAC,EAAE;IACnC;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2713, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/key/index.js"],"sourcesContent":["import { createExport } from './export.js'\nimport { createGen } from './gen.js'\nimport { createImport } from './import.js'\nimport { createInfo } from './info.js'\nimport { createList } from './list.js'\nimport { createRename } from './rename.js'\nimport { createRm } from './rm.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createKey (config) {\n  return {\n    export: createExport(config),\n    gen: createGen(config),\n    import: createImport(config),\n    info: createInfo(config),\n    list: createList(config),\n    rename: createRename(config),\n    rm: createRm(config)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAKO,SAAS,UAAW,MAAM;IAC/B,OAAO;QACL,QAAQ,CAAA,GAAA,0JAAA,CAAA,eAAY,AAAD,EAAE;QACrB,KAAK,CAAA,GAAA,uJAAA,CAAA,YAAS,AAAD,EAAE;QACf,QAAQ,CAAA,GAAA,0JAAA,CAAA,eAAY,AAAD,EAAE;QACrB,MAAM,CAAA,GAAA,wJAAA,CAAA,aAAU,AAAD,EAAE;QACjB,MAAM,CAAA,GAAA,wJAAA,CAAA,aAAU,AAAD,EAAE;QACjB,QAAQ,CAAA,GAAA,0JAAA,CAAA,eAAY,AAAD,EAAE;QACrB,IAAI,CAAA,GAAA,sJAAA,CAAA,WAAQ,AAAD,EAAE;IACf;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2747, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/log/level.js"],"sourcesContent":["import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/log').API<HTTPClientExtraOptions>} LogAPI\n */\n\nexport const createLevel = configure(api => {\n  /**\n   * @type {LogAPI[\"level\"]}\n   */\n  async function level (subsystem, level, options = {}) {\n    const res = await api.post('log/level', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          subsystem,\n          level\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    return objectToCamel(await res.json())\n  }\n  return level\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOO,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACnC;;GAEC,GACD,eAAe,MAAO,SAAS,EAAE,MAAK,EAAE,UAAU,CAAC,CAAC;QAClD,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,aAAa;YACtC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;oBACH;oBACA;iBACD;gBACD,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,OAAO,CAAA,GAAA,yKAAA,CAAA,gBAAa,AAAD,EAAE,MAAM,IAAI,IAAI;IACrC;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2781, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/log/ls.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/log').API<HTTPClientExtraOptions>} LogAPI\n */\n\nexport const createLs = configure(api => {\n  /**\n   * @type {LogAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    const res = await api.post('log/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n    return data.Strings\n  }\n  return ls\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAChC;;GAEC,GACD,eAAe,GAAI,UAAU,CAAC,CAAC;QAC7B,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,UAAU;YACnC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QAEA,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,OAAO,KAAK,OAAO;IACrB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2808, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/log/tail.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/log').API<HTTPClientExtraOptions>} LogAPI\n */\n\nexport const createTail = configure(api => {\n  /**\n   * @type {LogAPI[\"tail\"]}\n   */\n  async function * tail (options = {}) {\n    const res = await api.post('log/tail', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    yield * res.ndjson()\n  }\n  return tail\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAClC;;GAEC,GACD,gBAAiB,KAAM,UAAU,CAAC,CAAC;QACjC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY;YACrC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QAEA,OAAQ,IAAI,MAAM;IACpB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2834, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/log/index.js"],"sourcesContent":["import { createLevel } from './level.js'\nimport { createLs } from './ls.js'\nimport { createTail } from './tail.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createLog (config) {\n  return {\n    level: createLevel(config),\n    ls: createLs(config),\n    tail: createTail(config)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAKO,SAAS,UAAW,MAAM;IAC/B,OAAO;QACL,OAAO,CAAA,GAAA,yJAAA,CAAA,cAAW,AAAD,EAAE;QACnB,IAAI,CAAA,GAAA,sJAAA,CAAA,WAAQ,AAAD,EAAE;QACb,MAAM,CAAA,GAAA,wJAAA,CAAA,aAAU,AAAD,EAAE;IACnB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2856, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/name/publish.js"],"sourcesContent":["import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name').API<HTTPClientExtraOptions>} NameAPI\n */\n\nexport const createPublish = configure(api => {\n  /**\n   * @type {NameAPI[\"publish\"]}\n   */\n  async function publish (path, options = {}) {\n    const res = await api.post('name/publish', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${path}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return publish\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOO,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACrC;;GAEC,GACD,eAAe,QAAS,IAAI,EAAE,UAAU,CAAC,CAAC;QACxC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,gBAAgB;YACzC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,GAAG,MAAM;gBACd,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,8CAA8C;QAC9C,OAAO,CAAA,GAAA,yKAAA,CAAA,gBAAa,AAAD,EAAE,MAAM,IAAI,IAAI;IACrC;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2888, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/name/resolve.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name').API<HTTPClientExtraOptions>} NameAPI\n */\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {NameAPI[\"resolve\"]}\n   */\n  async function * resolve (path, options = {}) {\n    const res = await api.post('name/resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        stream: true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      yield result.Path\n    }\n  }\n  return resolve\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACrC;;GAEC,GACD,gBAAiB,QAAS,IAAI,EAAE,UAAU,CAAC,CAAC;QAC1C,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,gBAAgB;YACzC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,QAAQ;gBACR,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,WAAW,MAAM,UAAU,IAAI,MAAM,GAAI;YACvC,MAAM,OAAO,IAAI;QACnB;IACF;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2920, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/name/pubsub/cancel.js"],"sourcesContent":["import { objectToCamel } from '../../lib/object-to-camel.js'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name/pubsub').API<HTTPClientExtraOptions>} NamePubsubAPI\n */\n\nexport const createCancel = configure(api => {\n  /**\n   * @type {NamePubsubAPI[\"cancel\"]}\n   */\n  async function cancel (name, options = {}) {\n    const res = await api.post('name/pubsub/cancel', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return cancel\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOO,MAAM,eAAe,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACpC;;GAEC,GACD,eAAe,OAAQ,IAAI,EAAE,UAAU,CAAC,CAAC;QACvC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,sBAAsB;YAC/C,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,8CAA8C;QAC9C,OAAO,CAAA,GAAA,yKAAA,CAAA,gBAAa,AAAD,EAAE,MAAM,IAAI,IAAI;IACrC;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2952, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/name/pubsub/state.js"],"sourcesContent":["import { objectToCamel } from '../../lib/object-to-camel.js'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name/pubsub').API<HTTPClientExtraOptions>} NamePubsubAPI\n */\n\nexport const createState = configure(api => {\n  /**\n   * @type {NamePubsubAPI[\"state\"]}\n   */\n  async function state (options = {}) {\n    const res = await api.post('name/pubsub/state', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return state\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOO,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACnC;;GAEC,GACD,eAAe,MAAO,UAAU,CAAC,CAAC;QAChC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,qBAAqB;YAC9C,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QAEA,8CAA8C;QAC9C,OAAO,CAAA,GAAA,yKAAA,CAAA,gBAAa,AAAD,EAAE,MAAM,IAAI,IAAI;IACrC;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2981, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/name/pubsub/subs.js"],"sourcesContent":["import { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name/pubsub').API<HTTPClientExtraOptions>} NamePubsubAPI\n */\n\nexport const createSubs = configure(api => {\n  /**\n   * @type {NamePubsubAPI[\"subs\"]}\n   */\n  async function subs (options = {}) {\n    const res = await api.post('name/pubsub/subs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data.Strings || []\n  }\n  return subs\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAClC;;GAEC,GACD,eAAe,KAAM,UAAU,CAAC,CAAC;QAC/B,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,oBAAoB;YAC7C,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,OAAO,KAAK,OAAO,IAAI,EAAE;IAC3B;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3008, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/name/pubsub/index.js"],"sourcesContent":["import { createCancel } from './cancel.js'\nimport { createState } from './state.js'\nimport { createSubs } from './subs.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createPubsub (config) {\n  return {\n    cancel: createCancel(config),\n    state: createState(config),\n    subs: createSubs(config)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAKO,SAAS,aAAc,MAAM;IAClC,OAAO;QACL,QAAQ,CAAA,GAAA,qKAAA,CAAA,eAAY,AAAD,EAAE;QACrB,OAAO,CAAA,GAAA,oKAAA,CAAA,cAAW,AAAD,EAAE;QACnB,MAAM,CAAA,GAAA,mKAAA,CAAA,aAAU,AAAD,EAAE;IACnB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3030, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/name/index.js"],"sourcesContent":["import { createPublish } from './publish.js'\nimport { createResolve } from './resolve.js'\nimport { createPubsub } from './pubsub/index.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createName (config) {\n  return {\n    publish: createPublish(config),\n    resolve: createResolve(config),\n    pubsub: createPubsub(config)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAKO,SAAS,WAAY,MAAM;IAChC,OAAO;QACL,SAAS,CAAA,GAAA,4JAAA,CAAA,gBAAa,AAAD,EAAE;QACvB,SAAS,CAAA,GAAA,4JAAA,CAAA,gBAAa,AAAD,EAAE;QACvB,QAAQ,CAAA,GAAA,oKAAA,CAAA,eAAY,AAAD,EAAE;IACvB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3052, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/object/data.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createData = configure(api => {\n  /**\n   * @type {ObjectAPI[\"data\"]}\n   */\n  async function data (cid, options = {}) {\n    const res = await api.post('object/data', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.arrayBuffer()\n\n    return new Uint8Array(data, 0, data.byteLength)\n  }\n  return data\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;;;;AAOO,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAClC;;GAEC,GACD,eAAe,KAAM,GAAG,EAAE,UAAU,CAAC,CAAC;QACpC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,eAAe;YACxC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,GAAG,eAAe,aAAa,sJAAA,CAAA,MAAG,CAAC,MAAM,CAAC,OAAO,KAAK;gBAC3D,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QACA,MAAM,QAAO,MAAM,IAAI,WAAW;QAElC,OAAO,IAAI,WAAW,OAAM,GAAG,MAAK,UAAU;IAChD;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3085, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/object/get.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('object/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map((/** @type {any} */ link) => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    }\n  }\n  return get\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;AACA;;;;;AAOO,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACjC;;GAEC,GACD,eAAe,IAAK,GAAG,EAAE,UAAU,CAAC,CAAC;QACnC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,cAAc;YACvC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,GAAG,eAAe,aAAa,sJAAA,CAAA,MAAG,CAAC,MAAM,CAAC,OAAO,KAAK;gBAC3D,cAAc;gBACd,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,OAAO;YACL,MAAM,CAAA,GAAA,wJAAA,CAAA,aAAoB,AAAD,EAAE,KAAK,IAAI,EAAE;YACtC,OAAO,CAAC,KAAK,KAAK,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC,gBAAgB,GAAG,OAAS,CAAC;oBAC1D,MAAM,KAAK,IAAI;oBACf,MAAM,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC,KAAK,IAAI;oBACzB,OAAO,KAAK,IAAI;gBAClB,CAAC;QACH;IACF;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3128, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/object/links.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createLinks = configure(api => {\n  /**\n   * @type {ObjectAPI[\"links\"]}\n   */\n  async function links (cid, options = {}) {\n    const res = await api.post('object/links', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return (data.Links || []).map((/** @type {any} */ l) => ({\n      Name: l.Name,\n      Tsize: l.Size,\n      Hash: CID.parse(l.Hash)\n    }))\n  }\n  return links\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;;;;AAOO,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACnC;;GAEC,GACD,eAAe,MAAO,GAAG,EAAE,UAAU,CAAC,CAAC;QACrC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,gBAAgB;YACzC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,GAAG,eAAe,aAAa,sJAAA,CAAA,MAAG,CAAC,MAAM,CAAC,OAAO,KAAK;gBAC3D,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,OAAO,CAAC,KAAK,KAAK,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC,gBAAgB,GAAG,IAAM,CAAC;gBACvD,MAAM,EAAE,IAAI;gBACZ,OAAO,EAAE,IAAI;gBACb,MAAM,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC,EAAE,IAAI;YACxB,CAAC;IACH;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3165, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/object/new.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createNew = configure(api => {\n  /**\n   * @type {ObjectAPI[\"new\"]}\n   */\n  async function newObject (options = {}) {\n    const res = await api.post('object/new', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.template,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return newObject\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;;;;AAOO,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACjC;;GAEC,GACD,eAAe,UAAW,UAAU,CAAC,CAAC;QACpC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,cAAc;YACvC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,QAAQ,QAAQ;gBACrB,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAE/B,OAAO,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC;IACnB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3198, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/object/put.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { createPut as createDagPut } from '../dag/put.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createPut = (codecs, options) => {\n  const fn = configure((api) => {\n    const dagPut = createDagPut(codecs, options)\n\n    /**\n     * @type {ObjectAPI[\"put\"]}\n     */\n    async function put (obj, options = {}) {\n      return dagPut(obj, {\n        ...options,\n        storeCodec: 'dag-pb',\n        hashAlg: 'sha2-256',\n        version: 1\n      })\n    }\n    return put\n  })\n\n  return fn(options)\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAWO,MAAM,YAAY,CAAC,QAAQ;IAChC,MAAM,KAAK,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAC;QACpB,MAAM,SAAS,CAAA,GAAA,uJAAA,CAAA,YAAY,AAAD,EAAE,QAAQ;QAEpC;;KAEC,GACD,eAAe,IAAK,GAAG,EAAE,UAAU,CAAC,CAAC;YACnC,OAAO,OAAO,KAAK;gBACjB,GAAG,OAAO;gBACV,YAAY;gBACZ,SAAS;gBACT,SAAS;YACX;QACF;QACA,OAAO;IACT;IAEA,OAAO,GAAG;AACZ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3228, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/object/stat.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {ObjectAPI[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    const res = await api.post('object/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const output = await res.json()\n\n    return {\n      ...output,\n      Hash: CID.parse(output.Hash)\n    }\n  }\n  return stat\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;;;;AAOO,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAClC;;GAEC,GACD,eAAe,KAAM,GAAG,EAAE,UAAU,CAAC,CAAC;QACpC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,eAAe;YACxC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,GAAG,KAAK;gBACb,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,MAAM,SAAS,MAAM,IAAI,IAAI;QAE7B,OAAO;YACL,GAAG,MAAM;YACT,MAAM,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC,OAAO,IAAI;QAC7B;IACF;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3264, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/object/patch/add-link.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createAddLink = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"addLink\"]}\n   */\n  async function addLink (cid, dLink, options = {}) {\n    const res = await api.post('object/patch/add-link', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`,\n          // @ts-expect-error loose types\n          dLink.Name || dLink.name || '',\n          // @ts-expect-error loose types\n          (dLink.Hash || dLink.cid || '').toString() || null\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n\n  return addLink\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;;;;AAOO,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACrC;;GAEC,GACD,eAAe,QAAS,GAAG,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;QAC9C,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,yBAAyB;YAClD,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;oBACH,GAAG,KAAK;oBACR,+BAA+B;oBAC/B,MAAM,IAAI,IAAI,MAAM,IAAI,IAAI;oBAC5B,+BAA+B;oBAC/B,CAAC,MAAM,IAAI,IAAI,MAAM,GAAG,IAAI,EAAE,EAAE,QAAQ,MAAM;iBAC/C;gBACD,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAE/B,OAAO,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC;IACnB;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3303, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/object/patch/append-data.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\nimport { abortSignal } from '../../lib/abort-signal.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createAppendData = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"appendData\"]}\n   */\n  async function appendData (cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('object/patch/append-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid}`,\n        ...options\n      }),\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return appendData\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;AAOO,MAAM,mBAAmB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACxC;;GAEC,GACD,eAAe,WAAY,GAAG,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;QAChD,yCAAyC;QACzC,MAAM,aAAa,IAAI;QACvB,MAAM,SAAS,CAAA,GAAA,mKAAA,CAAA,cAAW,AAAD,EAAE,WAAW,MAAM,EAAE,QAAQ,MAAM;QAE5D,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,4BAA4B;YACrD;YACA,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,GAAG,KAAK;gBACb,GAAG,OAAO;YACZ;YACA,GACE,MAAM,CAAA,GAAA,2KAAA,CAAA,mBAAgB,AAAD,EAAE;gBAAC;aAAK,EAAE,YAAY,QAAQ,OAAO,CAAC;QAE/D;QAEA,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAE/B,OAAO,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC;IACnB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3345, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/object/patch/rm-link.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createRmLink = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"rmLink\"]}\n   */\n  async function rmLink (cid, dLink, options = {}) {\n    const res = await api.post('object/patch/rm-link', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`,\n          // @ts-expect-error loose types\n          dLink.Name || dLink.name || null\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return rmLink\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;;;;AAOO,MAAM,eAAe,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACpC;;GAEC,GACD,eAAe,OAAQ,GAAG,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;QAC7C,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,wBAAwB;YACjD,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;oBACH,GAAG,KAAK;oBACR,+BAA+B;oBAC/B,MAAM,IAAI,IAAI,MAAM,IAAI,IAAI;iBAC7B;gBACD,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAE/B,OAAO,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC;IACnB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3382, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/object/patch/set-data.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\nimport { abortSignal } from '../../lib/abort-signal.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createSetData = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"setData\"]}\n   */\n  async function setData (cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('object/patch/set-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`\n        ],\n        ...options\n      }),\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return setData\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;AAOO,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACrC;;GAEC,GACD,eAAe,QAAS,GAAG,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;QAC7C,yCAAyC;QACzC,MAAM,aAAa,IAAI;QACvB,MAAM,SAAS,CAAA,GAAA,mKAAA,CAAA,cAAW,AAAD,EAAE,WAAW,MAAM,EAAE,QAAQ,MAAM;QAE5D,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,yBAAyB;YAClD;YACA,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;oBACH,GAAG,KAAK;iBACT;gBACD,GAAG,OAAO;YACZ;YACA,GACE,MAAM,CAAA,GAAA,2KAAA,CAAA,mBAAgB,AAAD,EAAE;gBAAC;aAAK,EAAE,YAAY,QAAQ,OAAO,CAAC;QAE/D;QAEA,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAE/B,OAAO,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC;IACnB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3426, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/object/patch/index.js"],"sourcesContent":["import { createAddLink } from './add-link.js'\nimport { createAppendData } from './append-data.js'\nimport { createRmLink } from './rm-link.js'\nimport { createSetData } from './set-data.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createPatch (config) {\n  return {\n    addLink: createAddLink(config),\n    appendData: createAppendData(config),\n    rmLink: createRmLink(config),\n    setData: createSetData(config)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAKO,SAAS,YAAa,MAAM;IACjC,OAAO;QACL,SAAS,CAAA,GAAA,2KAAA,CAAA,gBAAa,AAAD,EAAE;QACvB,YAAY,CAAA,GAAA,8KAAA,CAAA,mBAAgB,AAAD,EAAE;QAC7B,QAAQ,CAAA,GAAA,0KAAA,CAAA,eAAY,AAAD,EAAE;QACrB,SAAS,CAAA,GAAA,2KAAA,CAAA,gBAAa,AAAD,EAAE;IACzB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3451, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/object/index.js"],"sourcesContent":["import { createData } from './data.js'\nimport { createGet } from './get.js'\nimport { createLinks } from './links.js'\nimport { createNew } from './new.js'\nimport { createPut } from './put.js'\nimport { createStat } from './stat.js'\nimport { createPatch } from './patch/index.js'\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} config\n */\nexport function createObject (codecs, config) {\n  return {\n    data: createData(config),\n    get: createGet(config),\n    links: createLinks(config),\n    new: createNew(config),\n    put: createPut(codecs, config),\n    stat: createStat(config),\n    patch: createPatch(config)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAMO,SAAS,aAAc,MAAM,EAAE,MAAM;IAC1C,OAAO;QACL,MAAM,CAAA,GAAA,2JAAA,CAAA,aAAU,AAAD,EAAE;QACjB,KAAK,CAAA,GAAA,0JAAA,CAAA,YAAS,AAAD,EAAE;QACf,OAAO,CAAA,GAAA,4JAAA,CAAA,cAAW,AAAD,EAAE;QACnB,KAAK,CAAA,GAAA,0JAAA,CAAA,YAAS,AAAD,EAAE;QACf,KAAK,CAAA,GAAA,0JAAA,CAAA,YAAS,AAAD,EAAE,QAAQ;QACvB,MAAM,CAAA,GAAA,2JAAA,CAAA,aAAU,AAAD,EAAE;QACjB,OAAO,CAAA,GAAA,qKAAA,CAAA,cAAW,AAAD,EAAE;IACrB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3485, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pin/add-all.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nexport const createAddAll = configure(api => {\n  /**\n   * @type {PinAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    for await (const { path, recursive, metadata } of normaliseInput(source)) {\n      const res = await api.post('pin/add', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: path,\n          recursive,\n          metadata: metadata ? JSON.stringify(metadata) : undefined,\n          stream: true\n        }),\n        headers: options.headers\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          for (const cid of pin.Pins) {\n            yield CID.parse(cid)\n          }\n          continue\n        }\n\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return addAll\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;AACA;;;;;AAOO,MAAM,eAAe,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACpC;;GAEC,GACD,gBAAiB,OAAQ,MAAM,EAAE,UAAU,CAAC,CAAC;QAC3C,WAAW,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAA,GAAA,sKAAA,CAAA,iBAAc,AAAD,EAAE,QAAS;YACxE,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,WAAW;gBACpC,QAAQ,QAAQ,MAAM;gBACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;oBAC9B,GAAG,OAAO;oBACV,KAAK;oBACL;oBACA,UAAU,WAAW,KAAK,SAAS,CAAC,YAAY;oBAChD,QAAQ;gBACV;gBACA,SAAS,QAAQ,OAAO;YAC1B;YAEA,WAAW,MAAM,OAAO,IAAI,MAAM,GAAI;gBACpC,IAAI,IAAI,IAAI,EAAE;oBACZ,KAAK,MAAM,OAAO,IAAI,IAAI,CAAE;wBAC1B,MAAM,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC;oBAClB;oBACA;gBACF;gBAEA,MAAM,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC;YAClB;QACF;IACF;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3532, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pin/add.js"],"sourcesContent":["import { createAddAll } from './add-all.js'\nimport last from 'it-last'\nimport { configure } from '../lib/configure.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createAdd (config) {\n  const all = createAddAll(config)\n\n  return configure(() => {\n    /**\n     * @type {PinAPI[\"add\"]}\n     */\n    async function add (path, options = {}) {\n      // @ts-expect-error last can return undefined\n      return last(all([{\n        path,\n        ...options\n      }], options))\n    }\n    return add\n  })(config)\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAUO,SAAS,UAAW,MAAM;IAC/B,MAAM,MAAM,CAAA,GAAA,8JAAA,CAAA,eAAY,AAAD,EAAE;IAEzB,OAAO,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE;QACf;;KAEC,GACD,eAAe,IAAK,IAAI,EAAE,UAAU,CAAC,CAAC;YACpC,6CAA6C;YAC7C,OAAO,CAAA,GAAA,8IAAA,CAAA,UAAI,AAAD,EAAE,IAAI;gBAAC;oBACf;oBACA,GAAG,OAAO;gBACZ;aAAE,EAAE;QACN;QACA,OAAO;IACT,GAAG;AACL","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3564, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pin/ls.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {string} type\n * @param {string} cid\n * @param {Record<string, string>} metadata\n */\nfunction toPin (type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  }\n\n  if (metadata) {\n    pin.metadata = metadata\n  }\n\n  return pin\n}\n\nexport const createLs = configure(api => {\n  /**\n   * @type {PinAPI[\"ls\"]}\n   */\n  async function * ls (options = {}) {\n    /** @type {any[]} */\n    let paths = []\n\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths]\n    }\n\n    const res = await api.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        arg: paths.map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) { // non-streaming response\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata)\n        }\n        return\n      }\n\n      yield toPin(pin.Type, pin.Cid, pin.Metadata)\n    }\n  }\n  return ls\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;;;;AAEA;;;CAGC,GAED;;;;CAIC,GACD,SAAS,MAAO,IAAI,EAAE,GAAG,EAAE,QAAQ;IACjC,uDAAuD,GACvD,MAAM,MAAM;QACV;QACA,KAAK,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC;IACjB;IAEA,IAAI,UAAU;QACZ,IAAI,QAAQ,GAAG;IACjB;IAEA,OAAO;AACT;AAEO,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAChC;;GAEC,GACD,gBAAiB,GAAI,UAAU,CAAC,CAAC;QAC/B,kBAAkB,GAClB,IAAI,QAAQ,EAAE;QAEd,IAAI,QAAQ,KAAK,EAAE;YACjB,QAAQ,MAAM,OAAO,CAAC,QAAQ,KAAK,IAAI,QAAQ,KAAK,GAAG;gBAAC,QAAQ,KAAK;aAAC;QACxE;QAEA,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,UAAU;YACnC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,GAAG,OAAO;gBACV,KAAK,MAAM,GAAG,CAAC,CAAA,OAAQ,GAAG,MAAM;gBAChC,QAAQ;YACV;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,WAAW,MAAM,OAAO,IAAI,MAAM,GAAI;YACpC,IAAI,IAAI,IAAI,EAAE;gBACZ,KAAK,MAAM,OAAO,OAAO,IAAI,CAAC,IAAI,IAAI,EAAG;oBACvC,MAAM,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ;gBAC7D;gBACA;YACF;YAEA,MAAM,MAAM,IAAI,IAAI,EAAE,IAAI,GAAG,EAAE,IAAI,QAAQ;QAC7C;IACF;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3628, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pin/rm-all.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nexport const createRmAll = configure(api => {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  async function * rmAll (source, options = {}) {\n    for await (const { path, recursive } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams)\n      searchParams.append('arg', `${path}`)\n\n      if (recursive != null) searchParams.set('recursive', String(recursive))\n\n      const res = await api.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${path}`,\n          recursive\n        })\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          yield * pin.Pins.map((/** @type {string} */ cid) => CID.parse(cid))\n          continue\n        }\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return rmAll\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;AACA;;;;;AAOO,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACnC;;GAEC,GACD,gBAAiB,MAAO,MAAM,EAAE,UAAU,CAAC,CAAC;QAC1C,WAAW,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,CAAA,GAAA,sKAAA,CAAA,iBAAc,AAAD,EAAE,QAAS;YAC9D,MAAM,eAAe,IAAI,gBAAgB,QAAQ,YAAY;YAC7D,aAAa,MAAM,CAAC,OAAO,GAAG,MAAM;YAEpC,IAAI,aAAa,MAAM,aAAa,GAAG,CAAC,aAAa,OAAO;YAE5D,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,UAAU;gBACnC,QAAQ,QAAQ,MAAM;gBACtB,SAAS,QAAQ,OAAO;gBACxB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;oBAC9B,GAAG,OAAO;oBACV,KAAK,GAAG,MAAM;oBACd;gBACF;YACF;YAEA,WAAW,MAAM,OAAO,IAAI,MAAM,GAAI;gBACpC,IAAI,IAAI,IAAI,EAAE;oBACZ,OAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,mBAAmB,GAAG,MAAQ,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC;oBAC9D;gBACF;gBACA,MAAM,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC;YAClB;QACF;IACF;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3674, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pin/rm.js"],"sourcesContent":["import { createRmAll } from './rm-all.js'\nimport last from 'it-last'\nimport { configure } from '../lib/configure.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {import('../types').Options} config\n */\nexport const createRm = (config) => {\n  const all = createRmAll(config)\n\n  return configure(() => {\n    /**\n     * @type {PinAPI[\"rm\"]}\n     */\n    async function rm (path, options = {}) {\n      // @ts-expect-error last can return undefined\n      return last(all([{\n        path,\n        ...options\n      }], options))\n    }\n    return rm\n  })(config)\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAUO,MAAM,WAAW,CAAC;IACvB,MAAM,MAAM,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD,EAAE;IAExB,OAAO,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE;QACf;;KAEC,GACD,eAAe,GAAI,IAAI,EAAE,UAAU,CAAC,CAAC;YACnC,6CAA6C;YAC7C,OAAO,CAAA,GAAA,8IAAA,CAAA,UAAI,AAAD,EAAE,IAAI;gBAAC;oBACf;oBACA,GAAG,OAAO;gBACZ;aAAE,EAAE;QACN;QACA,OAAO;IACT,GAAG;AACL","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3706, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pin/remote/utils.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n */\n\n/**\n * @param {object} json\n * @param {string} json.Name\n * @param {string} json.Cid\n * @param {Status} json.Status\n * @returns {Pin}\n */\nexport const decodePin = ({ Name: name, Status: status, Cid: cid }) => {\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  }\n}\n\n/**\n * @param {any} service\n * @returns {string}\n */\nexport const encodeService = (service) => {\n  if (typeof service === 'string' && service !== '') {\n    return service\n  } else {\n    throw new TypeError('service name must be passed')\n  }\n}\n\n/**\n * @param {any} cid\n * @returns {string}\n */\nexport const encodeCID = (cid) => {\n  if (CID.asCID(cid)) {\n    return cid.toString()\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid}`)\n  }\n}\n\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\nexport const encodeQuery = ({ service, cid, name, status, all }) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  })\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value))\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value)\n    }\n  }\n\n  return query\n}\n\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\nexport const encodeAddParams = ({ cid, service, background, name, origins }) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  })\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString())\n    }\n  }\n\n  return params\n}\n"],"names":[],"mappings":";;;;;;;AAAA;AAAA;AACA;;;AAiBO,MAAM,YAAY,CAAC,EAAE,MAAM,IAAI,EAAE,QAAQ,MAAM,EAAE,KAAK,GAAG,EAAE;IAChE,OAAO;QACL,KAAK,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC;QACf;QACA;IACF;AACF;AAMO,MAAM,gBAAgB,CAAC;IAC5B,IAAI,OAAO,YAAY,YAAY,YAAY,IAAI;QACjD,OAAO;IACT,OAAO;QACL,MAAM,IAAI,UAAU;IACtB;AACF;AAMO,MAAM,YAAY,CAAC;IACxB,IAAI,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC,MAAM;QAClB,OAAO,IAAI,QAAQ;IACrB,OAAO;QACL,MAAM,IAAI,UAAU,CAAC,iCAAiC,EAAE,OAAO,KAAK;IACtE;AACF;AAMO,MAAM,cAAc,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE;IAC7D,MAAM,QAAQ,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;QAC9B,SAAS,cAAc;QACvB;QACA,OAAO,MAAM,OAAO;IACtB;IAEA,IAAI,KAAK;QACP,KAAK,MAAM,SAAS,IAAK;YACvB,MAAM,MAAM,CAAC,OAAO,UAAU;QAChC;IACF;IAEA,IAAI,QAAQ;QACV,KAAK,MAAM,SAAS,OAAQ;YAC1B,MAAM,MAAM,CAAC,UAAU;QACzB;IACF;IAEA,OAAO;AACT;AAMO,MAAM,kBAAkB,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE;IACzE,MAAM,SAAS,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;QAC/B,KAAK,UAAU;QACf,SAAS,cAAc;QACvB;QACA,YAAY,aAAa,OAAO;IAClC;IAEA,IAAI,SAAS;QACX,KAAK,MAAM,UAAU,QAAS;YAC5B,OAAO,MAAM,CAAC,UAAU,OAAO,QAAQ;QACzC;IACF;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3777, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pin/remote/add.js"],"sourcesContent":["import { encodeAddParams, decodePin } from './utils.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createAdd (client) {\n  /**\n   * @type {RemotePiningAPI[\"add\"]}\n   */\n  async function add (cid, { timeout, signal, headers, ...query }) {\n    const response = await client.post('pin/remote/add', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeAddParams({ cid, ...query })\n    })\n\n    return decodePin(await response.json())\n  }\n\n  return add\n}\n"],"names":[],"mappings":";;;AAAA;;AAUO,SAAS,UAAW,MAAM;IAC/B;;GAEC,GACD,eAAe,IAAK,GAAG,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO;QAC7D,MAAM,WAAW,MAAM,OAAO,IAAI,CAAC,kBAAkB;YACnD;YACA;YACA;YACA,cAAc,CAAA,GAAA,mKAAA,CAAA,kBAAe,AAAD,EAAE;gBAAE;gBAAK,GAAG,KAAK;YAAC;QAChD;QAEA,OAAO,CAAA,GAAA,mKAAA,CAAA,YAAS,AAAD,EAAE,MAAM,SAAS,IAAI;IACtC;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3805, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pin/remote/ls.js"],"sourcesContent":["import { encodeQuery, decodePin } from './utils.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createLs (client) {\n  /**\n   * @type {RemotePiningAPI[\"ls\"]}\n   */\n  async function * ls ({ timeout, signal, headers, ...query }) {\n    const response = await client.post('pin/remote/ls', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery(query)\n    })\n\n    for await (const pin of response.ndjson()) {\n      yield decodePin(pin)\n    }\n  }\n\n  return ls\n}\n"],"names":[],"mappings":";;;AAAA;;AAUO,SAAS,SAAU,MAAM;IAC9B;;GAEC,GACD,gBAAiB,GAAI,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO;QACzD,MAAM,WAAW,MAAM,OAAO,IAAI,CAAC,iBAAiB;YAClD;YACA;YACA;YACA,cAAc,CAAA,GAAA,mKAAA,CAAA,cAAW,AAAD,EAAE;QAC5B;QAEA,WAAW,MAAM,OAAO,SAAS,MAAM,GAAI;YACzC,MAAM,CAAA,GAAA,mKAAA,CAAA,YAAS,AAAD,EAAE;QAClB;IACF;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3832, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pin/remote/rm.js"],"sourcesContent":["import { encodeQuery } from './utils.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createRm (client) {\n  /**\n   * @type {RemotePiningAPI[\"rm\"]}\n   */\n  async function rm ({ timeout, signal, headers, ...query }) {\n    await client.post('pin/remote/rm', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery({\n        ...query,\n        all: false\n      })\n    })\n  }\n\n  return rm\n}\n"],"names":[],"mappings":";;;AAAA;;AAUO,SAAS,SAAU,MAAM;IAC9B;;GAEC,GACD,eAAe,GAAI,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO;QACvD,MAAM,OAAO,IAAI,CAAC,iBAAiB;YACjC;YACA;YACA;YACA,cAAc,CAAA,GAAA,mKAAA,CAAA,cAAW,AAAD,EAAE;gBACxB,GAAG,KAAK;gBACR,KAAK;YACP;QACF;IACF;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3859, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pin/remote/rm-all.js"],"sourcesContent":["import { encodeQuery } from './utils.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createRmAll (client) {\n  /**\n   * @type {RemotePiningAPI[\"rmAll\"]}\n   */\n  async function rmAll ({ timeout, signal, headers, ...query }) {\n    await client.post('pin/remote/rm', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery({\n        ...query,\n        all: true\n      })\n    })\n  }\n\n  return rmAll\n}\n"],"names":[],"mappings":";;;AAAA;;AAUO,SAAS,YAAa,MAAM;IACjC;;GAEC,GACD,eAAe,MAAO,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO;QAC1D,MAAM,OAAO,IAAI,CAAC,iBAAiB;YACjC;YACA;YACA;YACA,cAAc,CAAA,GAAA,mKAAA,CAAA,cAAW,AAAD,EAAE;gBACxB,GAAG,KAAK;gBACR,KAAK;YACP;QACF;IACF;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3886, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pin/remote/service/utils.js"],"sourcesContent":["/**\n * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinServiceWithStat} RemotePinServiceWithStat\n */\n\n/**\n * @param {URL} url\n */\nexport function encodeEndpoint (url) {\n  const href = String(url)\n  if (href === 'undefined') {\n    throw Error('endpoint is required')\n  }\n  // Workaround trailing `/` issue in go-ipfs\n  // @see https://github.com/ipfs/go-ipfs/issues/7826\n  return href[href.length - 1] === '/' ? href.slice(0, -1) : href\n}\n\n/**\n * @param {any} json\n * @returns {RemotePinServiceWithStat}\n */\nexport function decodeRemoteService (json) {\n  return {\n    service: json.Service,\n    endpoint: new URL(json.ApiEndpoint),\n    ...(json.Stat && { stat: decodeStat(json.Stat) })\n  }\n}\n\n/**\n * @param {any} json\n * @returns {import('ipfs-core-types/src/pin/remote/service').Stat}\n */\nexport function decodeStat (json) {\n  switch (json.Status) {\n    case 'valid': {\n      const { Pinning, Pinned, Queued, Failed } = json.PinCount\n      return {\n        status: 'valid',\n        pinCount: {\n          queued: Queued,\n          pinning: Pinning,\n          pinned: Pinned,\n          failed: Failed\n        }\n      }\n    }\n    case 'invalid': {\n      return { status: 'invalid' }\n    }\n    default: {\n      return { status: json.Status }\n    }\n  }\n}\n"],"names":[],"mappings":"AAAA;;CAEC,GAED;;CAEC;;;;;AACM,SAAS,eAAgB,GAAG;IACjC,MAAM,OAAO,OAAO;IACpB,IAAI,SAAS,aAAa;QACxB,MAAM,MAAM;IACd;IACA,2CAA2C;IAC3C,mDAAmD;IACnD,OAAO,IAAI,CAAC,KAAK,MAAM,GAAG,EAAE,KAAK,MAAM,KAAK,KAAK,CAAC,GAAG,CAAC,KAAK;AAC7D;AAMO,SAAS,oBAAqB,IAAI;IACvC,OAAO;QACL,SAAS,KAAK,OAAO;QACrB,UAAU,IAAI,IAAI,KAAK,WAAW;QAClC,GAAI,KAAK,IAAI,IAAI;YAAE,MAAM,WAAW,KAAK,IAAI;QAAE,CAAC;IAClD;AACF;AAMO,SAAS,WAAY,IAAI;IAC9B,OAAQ,KAAK,MAAM;QACjB,KAAK;YAAS;gBACZ,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,QAAQ;gBACzD,OAAO;oBACL,QAAQ;oBACR,UAAU;wBACR,QAAQ;wBACR,SAAS;wBACT,QAAQ;wBACR,QAAQ;oBACV;gBACF;YACF;QACA,KAAK;YAAW;gBACd,OAAO;oBAAE,QAAQ;gBAAU;YAC7B;QACA;YAAS;gBACP,OAAO;oBAAE,QAAQ,KAAK,MAAM;gBAAC;YAC/B;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3948, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pin/remote/service/add.js"],"sourcesContent":["import { toUrlSearchParams } from '../../../lib/to-url-search-params.js'\nimport { encodeEndpoint } from './utils.js'\n\n/**\n * @typedef {import('../../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI\n */\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\nexport function createAdd (client) {\n  /**\n   * @type {RemotePiningServiceAPI[\"add\"]}\n   */\n  async function add (name, options) {\n    const { endpoint, key, headers, timeout, signal } = options\n\n    await client.post('pin/remote/service/add', {\n      timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [name, encodeEndpoint(endpoint), key]\n      }),\n      headers\n    })\n  }\n\n  return add\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAUO,SAAS,UAAW,MAAM;IAC/B;;GAEC,GACD,eAAe,IAAK,IAAI,EAAE,OAAO;QAC/B,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG;QAEpD,MAAM,OAAO,IAAI,CAAC,0BAA0B;YAC1C;YACA;YACA,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;oBAAC;oBAAM,CAAA,GAAA,8KAAA,CAAA,iBAAc,AAAD,EAAE;oBAAW;iBAAI;YAC5C;YACA;QACF;IACF;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3981, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pin/remote/service/ls.js"],"sourcesContent":["import { toUrlSearchParams } from '../../../lib/to-url-search-params.js'\nimport { decodeRemoteService } from './utils.js'\n\n/**\n * @typedef {import('../../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI\n */\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\nexport function createLs (client) {\n  /**\n   * @type {RemotePiningServiceAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    // @ts-expect-error cannot derive option type from typedef\n    const { stat, headers, timeout, signal } = options\n\n    const response = await client.post('pin/remote/service/ls', {\n      timeout,\n      signal,\n      headers,\n      searchParams: stat === true ? toUrlSearchParams({ stat }) : undefined\n    })\n\n    /** @type {{RemoteServices: object[]}} */\n    const { RemoteServices } = await response.json()\n\n    return RemoteServices.map(decodeRemoteService)\n  }\n\n  return ls\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAUO,SAAS,SAAU,MAAM;IAC9B;;GAEC,GACD,eAAe,GAAI,UAAU,CAAC,CAAC;QAC7B,0DAA0D;QAC1D,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG;QAE3C,MAAM,WAAW,MAAM,OAAO,IAAI,CAAC,yBAAyB;YAC1D;YACA;YACA;YACA,cAAc,SAAS,OAAO,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAAE;YAAK,KAAK;QAC9D;QAEA,uCAAuC,GACvC,MAAM,EAAE,cAAc,EAAE,GAAG,MAAM,SAAS,IAAI;QAE9C,OAAO,eAAe,GAAG,CAAC,8KAAA,CAAA,sBAAmB;IAC/C;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4013, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pin/remote/service/rm.js"],"sourcesContent":["import { toUrlSearchParams } from '../../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI\n */\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\nexport function createRm (client) {\n  /**\n   * @type {RemotePiningServiceAPI[\"rm\"]}\n   */\n  async function rm (name, options = {}) {\n    await client.post('pin/remote/service/rm', {\n      signal: options.signal,\n      headers: options.headers,\n      searchParams: toUrlSearchParams({\n        arg: name\n      })\n    })\n  }\n\n  return rm\n}\n"],"names":[],"mappings":";;;AAAA;;AAUO,SAAS,SAAU,MAAM;IAC9B;;GAEC,GACD,eAAe,GAAI,IAAI,EAAE,UAAU,CAAC,CAAC;QACnC,MAAM,OAAO,IAAI,CAAC,yBAAyB;YACzC,QAAQ,QAAQ,MAAM;YACtB,SAAS,QAAQ,OAAO;YACxB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;YACP;QACF;IACF;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4038, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pin/remote/service/index.js"],"sourcesContent":["import { Client } from '../../../lib/core.js'\nimport { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRm } from './rm.js'\n\n/**\n * @param {import('../../../types').Options} config\n */\nexport function createService (config) {\n  const client = new Client(config)\n\n  return {\n    add: createAdd(client),\n    ls: createLs(client),\n    rm: createRm(client)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAKO,SAAS,cAAe,MAAM;IACnC,MAAM,SAAS,IAAI,wJAAA,CAAA,SAAM,CAAC;IAE1B,OAAO;QACL,KAAK,CAAA,GAAA,4KAAA,CAAA,YAAS,AAAD,EAAE;QACf,IAAI,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;QACb,IAAI,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;IACf;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4063, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pin/remote/index.js"],"sourcesContent":["import { Client } from '../../lib/core.js'\nimport { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRm } from './rm.js'\nimport { createRmAll } from './rm-all.js'\nimport { createService } from './service/index.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createRemote (config) {\n  const client = new Client(config)\n\n  return {\n    add: createAdd(client),\n    ls: createLs(client),\n    rm: createRm(client),\n    rmAll: createRmAll(client),\n    service: createService(config)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAKO,SAAS,aAAc,MAAM;IAClC,MAAM,SAAS,IAAI,wJAAA,CAAA,SAAM,CAAC;IAE1B,OAAO;QACL,KAAK,CAAA,GAAA,iKAAA,CAAA,YAAS,AAAD,EAAE;QACf,IAAI,CAAA,GAAA,gKAAA,CAAA,WAAQ,AAAD,EAAE;QACb,IAAI,CAAA,GAAA,gKAAA,CAAA,WAAQ,AAAD,EAAE;QACb,OAAO,CAAA,GAAA,uKAAA,CAAA,cAAW,AAAD,EAAE;QACnB,SAAS,CAAA,GAAA,8KAAA,CAAA,gBAAa,AAAD,EAAE;IACzB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4094, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pin/index.js"],"sourcesContent":["import { createAddAll } from './add-all.js'\nimport { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRmAll } from './rm-all.js'\nimport { createRm } from './rm.js'\nimport { createRemote } from './remote/index.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createPin (config) {\n  return {\n    addAll: createAddAll(config),\n    add: createAdd(config),\n    ls: createLs(config),\n    rmAll: createRmAll(config),\n    rm: createRm(config),\n    remote: createRemote(config)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAKO,SAAS,UAAW,MAAM;IAC/B,OAAO;QACL,QAAQ,CAAA,GAAA,8JAAA,CAAA,eAAY,AAAD,EAAE;QACrB,KAAK,CAAA,GAAA,uJAAA,CAAA,YAAS,AAAD,EAAE;QACf,IAAI,CAAA,GAAA,sJAAA,CAAA,WAAQ,AAAD,EAAE;QACb,OAAO,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD,EAAE;QACnB,IAAI,CAAA,GAAA,sJAAA,CAAA,WAAQ,AAAD,EAAE;QACb,QAAQ,CAAA,GAAA,mKAAA,CAAA,eAAY,AAAD,EAAE;IACvB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4125, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/lib/http-rpc-wire-format.js"],"sourcesContent":["import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { base64url } from 'multiformats/bases/base64'\n\n/* HTTP RPC:\n * - wraps binary data in multibase. base64url is used to avoid issues\n *   when a binary data is passed as search param in URL.\n *   Historical context: https://github.com/ipfs/go-ipfs/issues/7939\n *   Multibase wrapping introduced in: https://github.com/ipfs/go-ipfs/pull/8183\n */\n\n/**\n * @param {Array<string>} strings\n * @returns {Array<string>} strings\n */\nconst rpcArrayToTextArray = strings => {\n  if (Array.isArray(strings)) {\n    return strings.map(rpcToText)\n  }\n  return strings\n}\n\n/**\n * @param {string} mb\n * @returns {string}\n */\nconst rpcToText = mb => uint8ArrayToString(rpcToBytes(mb))\n\n/**\n * @param {string} mb\n * @returns {Uint8Array}\n */\nconst rpcToBytes = mb => base64url.decode(mb)\n\n/**\n * @param {string} mb\n * @returns {bigint}\n */\nconst rpcToBigInt = mb => BigInt(`0x${uint8ArrayToString(base64url.decode(mb), 'base16')}`)\n\n/**\n * @param {string} text\n * @returns {string}\n */\nconst textToUrlSafeRpc = text => base64url.encode(uint8ArrayFromString(text))\n\nexport { rpcArrayToTextArray, rpcToText, rpcToBytes, rpcToBigInt, textToUrlSafeRpc }\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;;;;AAEA;;;;;CAKC,GAED;;;CAGC,GACD,MAAM,sBAAsB,CAAA;IAC1B,IAAI,MAAM,OAAO,CAAC,UAAU;QAC1B,OAAO,QAAQ,GAAG,CAAC;IACrB;IACA,OAAO;AACT;AAEA;;;CAGC,GACD,MAAM,YAAY,CAAA,KAAM,CAAA,GAAA,sJAAA,CAAA,WAAkB,AAAD,EAAE,WAAW;AAEtD;;;CAGC,GACD,MAAM,aAAa,CAAA,KAAM,kJAAA,CAAA,YAAS,CAAC,MAAM,CAAC;AAE1C;;;CAGC,GACD,MAAM,cAAc,CAAA,KAAM,OAAO,CAAC,EAAE,EAAE,CAAA,GAAA,sJAAA,CAAA,WAAkB,AAAD,EAAE,kJAAA,CAAA,YAAS,CAAC,MAAM,CAAC,KAAK,WAAW;AAE1F;;;CAGC,GACD,MAAM,mBAAmB,CAAA,OAAQ,kJAAA,CAAA,YAAS,CAAC,MAAM,CAAC,CAAA,GAAA,wJAAA,CAAA,aAAoB,AAAD,EAAE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4175, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pubsub/ls.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { rpcArrayToTextArray } from '../lib/http-rpc-wire-format.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nexport const createLs = configure(api => {\n  /**\n   * @type {PubsubAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    const { Strings } = await (await api.post('pubsub/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return rpcArrayToTextArray(Strings) || []\n  }\n  return ls\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOO,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAChC;;GAEC,GACD,eAAe,GAAI,UAAU,CAAC,CAAC;QAC7B,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,aAAa;YACrD,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B,EAAE,EAAE,IAAI;QAER,OAAO,CAAA,GAAA,iLAAA,CAAA,sBAAmB,AAAD,EAAE,YAAY,EAAE;IAC3C;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4203, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pubsub/peers.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { textToUrlSafeRpc } from '../lib/http-rpc-wire-format.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nexport const createPeers = configure(api => {\n  /**\n   * @type {PubsubAPI[\"peers\"]}\n   */\n  async function peers (topic, options = {}) {\n    const res = await api.post('pubsub/peers', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: textToUrlSafeRpc(topic),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Strings } = await res.json()\n\n    return Strings || []\n  }\n  return peers\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOO,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACnC;;GAEC,GACD,eAAe,MAAO,KAAK,EAAE,UAAU,CAAC,CAAC;QACvC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,gBAAgB;YACzC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,CAAA,GAAA,iLAAA,CAAA,mBAAgB,AAAD,EAAE;gBACtB,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI;QAElC,OAAO,WAAW,EAAE;IACtB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4235, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pubsub/publish.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { textToUrlSafeRpc } from '../lib/http-rpc-wire-format.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nexport const createPublish = configure(api => {\n  /**\n   * @type {PubsubAPI[\"publish\"]}\n   */\n  async function publish (topic, data, options = {}) {\n    const searchParams = toUrlSearchParams({\n      arg: textToUrlSafeRpc(topic),\n      ...options\n    })\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('pubsub/pub', {\n      signal,\n      searchParams,\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return publish\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAOO,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACrC;;GAEC,GACD,eAAe,QAAS,KAAK,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;QAC/C,MAAM,eAAe,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YACrC,KAAK,CAAA,GAAA,iLAAA,CAAA,mBAAgB,AAAD,EAAE;YACtB,GAAG,OAAO;QACZ;QAEA,yCAAyC;QACzC,MAAM,aAAa,IAAI;QACvB,MAAM,SAAS,CAAA,GAAA,mKAAA,CAAA,cAAW,AAAD,EAAE,WAAW,MAAM,EAAE,QAAQ,MAAM;QAE5D,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,cAAc;YACvC;YACA;YACA,GACE,MAAM,CAAA,GAAA,2KAAA,CAAA,mBAAgB,AAAD,EAAE;gBAAC;aAAK,EAAE,YAAY,QAAQ,OAAO,CAAC;QAE/D;QAEA,MAAM,IAAI,IAAI;IAChB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4276, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pubsub/subscribe.js"],"sourcesContent":["import { logger } from '@libp2p/logger'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { textToUrlSafeRpc, rpcToText, rpcToBytes, rpcToBigInt } from '../lib/http-rpc-wire-format.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\nconst log = logger('ipfs-http-client:pubsub:subscribe')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('@libp2p/interface-pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker').SubscriptionTracker} subsTracker\n */\nexport const createSubscribe = (options, subsTracker) => {\n  return configure((api) => {\n    /**\n     * @type {PubsubAPI[\"subscribe\"]}\n     */\n    async function subscribe (topic, handler, options = {}) { // eslint-disable-line require-await\n      options.signal = subsTracker.subscribe(topic, handler, options.signal)\n\n      /** @type {(value?: any) => void} */\n      let done\n      /** @type {(error: Error) => void} */\n      let fail\n\n      const result = new Promise((resolve, reject) => {\n        done = resolve\n        fail = reject\n      })\n\n      // In Firefox, the initial call to fetch does not resolve until some data\n      // is received. If this doesn't happen within 1 second assume success\n      const ffWorkaround = setTimeout(() => done(), 1000)\n\n      // Do this async to not block Firefox\n      api.post('pubsub/sub', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: textToUrlSafeRpc(topic),\n          ...options\n        }),\n        headers: options.headers\n      })\n        .catch((err) => {\n          // Initial subscribe fail, ensure we clean up\n          subsTracker.unsubscribe(topic, handler)\n\n          fail(err)\n        })\n        .then((response) => {\n          clearTimeout(ffWorkaround)\n\n          if (!response) {\n            // if there was no response, the subscribe failed\n            return\n          }\n\n          readMessages(response, {\n            onMessage: (message) => {\n              if (!handler) {\n                return\n              }\n\n              if (typeof handler === 'function') {\n                handler(message)\n                return\n              }\n\n              if (typeof handler.handleEvent === 'function') {\n                handler.handleEvent(message)\n              }\n            },\n            onEnd: () => subsTracker.unsubscribe(topic, handler),\n            onError: options.onError\n          })\n\n          done()\n        })\n\n      return result\n    }\n    return subscribe\n  })(options)\n}\n\n/**\n * @param {import('ipfs-utils/src/types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\nasync function readMessages (response, { onMessage, onEnd, onError }) {\n  onError = onError || log\n\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue\n        }\n\n        if (msg.from != null && msg.seqno != null) {\n          onMessage({\n            type: 'signed',\n            from: peerIdFromString(msg.from),\n            data: rpcToBytes(msg.data),\n            sequenceNumber: rpcToBigInt(msg.seqno),\n            topic: rpcToText(msg.topicIDs[0]),\n            key: rpcToBytes(msg.key ?? 'u'),\n            signature: rpcToBytes(msg.signature ?? 'u')\n          })\n        } else {\n          onMessage({\n            type: 'unsigned',\n            data: rpcToBytes(msg.data),\n            topic: rpcToText(msg.topicIDs[0])\n          })\n        }\n      } catch (/** @type {any} */ err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`\n        onError(err, false, msg) // Not fatal\n      }\n    }\n  } catch (/** @type {any} */ err) {\n    if (!isAbortError(err)) {\n      onError(err, true) // Fatal\n    }\n  } finally {\n    onEnd()\n  }\n}\n\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true\n    // It is `abort` in Electron instead of `aborted`\n    case 'abort':\n      return true\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError'\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4414, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pubsub/unsubscribe.js"],"sourcesContent":["\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker').SubscriptionTracker} subsTracker\n */\nexport const createUnsubscribe = (options, subsTracker) => {\n  /**\n   * @type {PubsubAPI[\"unsubscribe\"]}\n   */\n  async function unsubscribe (topic, handler) {\n    subsTracker.unsubscribe(topic, handler)\n  }\n  return unsubscribe\n}\n"],"names":[],"mappings":"AACA;;;;CAIC,GAED;;;CAGC;;;AACM,MAAM,oBAAoB,CAAC,SAAS;IACzC;;GAEC,GACD,eAAe,YAAa,KAAK,EAAE,OAAO;QACxC,YAAY,WAAW,CAAC,OAAO;IACjC;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4438, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pubsub/subscription-tracker.js"],"sourcesContent":["\n/**\n * @typedef {import('@libp2p/interface-pubsub').Message} Message\n * @typedef {import('@libp2p/interfaces/events').EventHandler<Message>} MessageHandlerFn\n *\n * @typedef {object} Subscription\n * @property {MessageHandlerFn} handler\n * @property {AbortController} controller\n */\n\nexport class SubscriptionTracker {\n  constructor () {\n    /** @type {Map<string, Subscription[]>} */\n    this._subs = new Map()\n  }\n\n  /**\n   * @param {string} topic\n   * @param {MessageHandlerFn} handler\n   * @param {AbortSignal} [signal]\n   */\n  subscribe (topic, handler, signal) {\n    const topicSubs = this._subs.get(topic) || []\n\n    if (topicSubs.find(s => s.handler === handler)) {\n      throw new Error(`Already subscribed to ${topic} with this handler`)\n    }\n\n    // Create controller so a call to unsubscribe can cancel the request\n    const controller = new AbortController()\n\n    this._subs.set(topic, [{ handler, controller }].concat(topicSubs))\n\n    // If there is an external signal, forward the abort event\n    if (signal) {\n      signal.addEventListener('abort', () => this.unsubscribe(topic, handler))\n    }\n\n    return controller.signal\n  }\n\n  /**\n   * @param {string} topic\n   * @param {MessageHandlerFn} [handler]\n   */\n  unsubscribe (topic, handler) {\n    const subs = this._subs.get(topic) || []\n    let unsubs\n\n    if (handler) {\n      this._subs.set(topic, subs.filter(s => s.handler !== handler))\n      unsubs = subs.filter(s => s.handler === handler)\n    } else {\n      this._subs.set(topic, [])\n      unsubs = subs\n    }\n\n    if (!(this._subs.get(topic) || []).length) {\n      this._subs.delete(topic)\n    }\n\n    unsubs.forEach(s => s.controller.abort())\n  }\n}\n"],"names":[],"mappings":"AACA;;;;;;;CAOC;;;AAEM,MAAM;IACX,aAAe;QACb,wCAAwC,GACxC,IAAI,CAAC,KAAK,GAAG,IAAI;IACnB;IAEA;;;;GAIC,GACD,UAAW,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE;QACjC,MAAM,YAAY,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE;QAE7C,IAAI,UAAU,IAAI,CAAC,CAAA,IAAK,EAAE,OAAO,KAAK,UAAU;YAC9C,MAAM,IAAI,MAAM,CAAC,sBAAsB,EAAE,MAAM,kBAAkB,CAAC;QACpE;QAEA,oEAAoE;QACpE,MAAM,aAAa,IAAI;QAEvB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO;YAAC;gBAAE;gBAAS;YAAW;SAAE,CAAC,MAAM,CAAC;QAEvD,0DAA0D;QAC1D,IAAI,QAAQ;YACV,OAAO,gBAAgB,CAAC,SAAS,IAAM,IAAI,CAAC,WAAW,CAAC,OAAO;QACjE;QAEA,OAAO,WAAW,MAAM;IAC1B;IAEA;;;GAGC,GACD,YAAa,KAAK,EAAE,OAAO,EAAE;QAC3B,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE;QACxC,IAAI;QAEJ,IAAI,SAAS;YACX,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,KAAK,MAAM,CAAC,CAAA,IAAK,EAAE,OAAO,KAAK;YACrD,SAAS,KAAK,MAAM,CAAC,CAAA,IAAK,EAAE,OAAO,KAAK;QAC1C,OAAO;YACL,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE;YACxB,SAAS;QACX;QAEA,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,MAAM,EAAE;YACzC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QACpB;QAEA,OAAO,OAAO,CAAC,CAAA,IAAK,EAAE,UAAU,CAAC,KAAK;IACxC;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4500, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/pubsub/index.js"],"sourcesContent":["import { createLs } from './ls.js'\nimport { createPeers } from './peers.js'\nimport { createPublish } from './publish.js'\nimport { createSubscribe } from './subscribe.js'\nimport { createUnsubscribe } from './unsubscribe.js'\nimport { SubscriptionTracker } from './subscription-tracker.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createPubsub (config) {\n  const subscriptionTracker = new SubscriptionTracker()\n\n  return {\n    ls: createLs(config),\n    peers: createPeers(config),\n    publish: createPublish(config),\n    subscribe: createSubscribe(config, subscriptionTracker),\n    unsubscribe: createUnsubscribe(config, subscriptionTracker)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAKO,SAAS,aAAc,MAAM;IAClC,MAAM,sBAAsB,IAAI,8KAAA,CAAA,sBAAmB;IAEnD,OAAO;QACL,IAAI,CAAA,GAAA,yJAAA,CAAA,WAAQ,AAAD,EAAE;QACb,OAAO,CAAA,GAAA,4JAAA,CAAA,cAAW,AAAD,EAAE;QACnB,SAAS,CAAA,GAAA,8JAAA,CAAA,gBAAa,AAAD,EAAE;QACvB,WAAW,CAAA,GAAA,gKAAA,CAAA,kBAAe,AAAD,EAAE,QAAQ;QACnC,aAAa,CAAA,GAAA,kKAAA,CAAA,oBAAiB,AAAD,EAAE,QAAQ;IACzC;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4531, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/refs/local.js"],"sourcesContent":["import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nexport const createLocal = configure(api => {\n  /**\n   * @type {RefsAPI[\"local\"]}\n   */\n  async function * refsLocal (options = {}) {\n    const res = await api.post('refs/local', {\n      signal: options.signal,\n      transform: objectToCamel,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    yield * res.ndjson()\n  }\n  return refsLocal\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOO,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACnC;;GAEC,GACD,gBAAiB,UAAW,UAAU,CAAC,CAAC;QACtC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,cAAc;YACvC,QAAQ,QAAQ,MAAM;YACtB,WAAW,yKAAA,CAAA,gBAAa;YACxB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QAEA,OAAQ,IAAI,MAAM;IACpB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4560, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/refs/index.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { createLocal } from './local.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nexport const createRefs = configure((api, opts) => {\n  /**\n   * @type {RefsAPI[\"refs\"]}\n   */\n  const refs = async function * (args, options = {}) {\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const argsArr = Array.isArray(args) ? args : [args]\n\n    const res = await api.post('refs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: argsArr.map(arg => `${arg instanceof Uint8Array ? CID.decode(arg) : arg}`),\n        ...options\n      }),\n      headers: options.headers,\n      transform: objectToCamel\n    })\n\n    yield * res.ndjson()\n  }\n\n  return Object.assign(refs, {\n    local: createLocal(opts)\n  })\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;AAOO,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAC,KAAK;IACxC;;GAEC,GACD,MAAM,OAAO,gBAAkB,IAAI,EAAE,UAAU,CAAC,CAAC;QAC/C,2DAA2D,GAC3D,MAAM,UAAU,MAAM,OAAO,CAAC,QAAQ,OAAO;YAAC;SAAK;QAEnD,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,QAAQ;YACjC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,QAAQ,GAAG,CAAC,CAAA,MAAO,GAAG,eAAe,aAAa,sJAAA,CAAA,MAAG,CAAC,MAAM,CAAC,OAAO,KAAK;gBAC9E,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;YACxB,WAAW,yKAAA,CAAA,gBAAa;QAC1B;QAEA,OAAQ,IAAI,MAAM;IACpB;IAEA,OAAO,OAAO,MAAM,CAAC,MAAM;QACzB,OAAO,CAAA,GAAA,0JAAA,CAAA,cAAW,AAAD,EAAE;IACrB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4602, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/repo/gc.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI\n */\n\nexport const createGc = configure(api => {\n  /**\n   * @type {RepoAPI[\"gc\"]}\n   */\n  async function * gc (options = {}) {\n    const res = await api.post('repo/gc', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: (res) => {\n        return {\n          err: res.Error ? new Error(res.Error) : null,\n          cid: (res.Key || {})['/'] ? CID.parse(res.Key['/']) : null\n        }\n      }\n    })\n\n    yield * res.ndjson()\n  }\n  return gc\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;;;;AAOO,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAChC;;GAEC,GACD,gBAAiB,GAAI,UAAU,CAAC,CAAC;QAC/B,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,WAAW;YACpC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;YACxB,WAAW,CAAC;gBACV,OAAO;oBACL,KAAK,IAAI,KAAK,GAAG,IAAI,MAAM,IAAI,KAAK,IAAI;oBACxC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,IAAI,IAAI;gBACxD;YACF;QACF;QAEA,OAAQ,IAAI,MAAM;IACpB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4637, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/repo/stat.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {RepoAPI[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    const res = await api.post('repo/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      numObjects: BigInt(data.NumObjects),\n      repoSize: BigInt(data.RepoSize),\n      repoPath: data.RepoPath,\n      version: data.Version,\n      storageMax: BigInt(data.StorageMax)\n    }\n  }\n  return stat\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAClC;;GAEC,GACD,eAAe,KAAM,UAAU,CAAC,CAAC;QAC/B,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,aAAa;YACtC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,OAAO;YACL,YAAY,OAAO,KAAK,UAAU;YAClC,UAAU,OAAO,KAAK,QAAQ;YAC9B,UAAU,KAAK,QAAQ;YACvB,SAAS,KAAK,OAAO;YACrB,YAAY,OAAO,KAAK,UAAU;QACpC;IACF;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4670, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/repo/version.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI\n */\n\nexport const createVersion = configure(api => {\n  /**\n   * @type {RepoAPI[\"version\"]}\n   */\n  async function version (options = {}) {\n    const res = await (await api.post('repo/version', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return res.Version\n  }\n  return version\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACrC;;GAEC,GACD,eAAe,QAAS,UAAU,CAAC,CAAC;QAClC,MAAM,MAAM,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,gBAAgB;YAChD,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B,EAAE,EAAE,IAAI;QAER,OAAO,IAAI,OAAO;IACpB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4696, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/repo/index.js"],"sourcesContent":["import { createGc } from './gc.js'\nimport { createStat } from './stat.js'\nimport { createVersion } from './version.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createRepo (config) {\n  return {\n    gc: createGc(config),\n    stat: createStat(config),\n    version: createVersion(config)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAKO,SAAS,WAAY,MAAM;IAChC,OAAO;QACL,IAAI,CAAA,GAAA,uJAAA,CAAA,WAAQ,AAAD,EAAE;QACb,MAAM,CAAA,GAAA,yJAAA,CAAA,aAAU,AAAD,EAAE;QACjB,SAAS,CAAA,GAAA,4JAAA,CAAA,gBAAa,AAAD,EAAE;IACzB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4718, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/stats/bw.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/stats').API<HTTPClientExtraOptions>} StatsAPI\n */\n\nexport const createBw = configure(api => {\n  /**\n   * @type {StatsAPI[\"bw\"]}\n   */\n  async function * bw (options = {}) {\n    const res = await api.post('stats/bw', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: (stats) => ({\n        totalIn: BigInt(stats.TotalIn),\n        totalOut: BigInt(stats.TotalOut),\n        rateIn: parseFloat(stats.RateIn),\n        rateOut: parseFloat(stats.RateOut)\n      })\n    })\n\n    yield * res.ndjson()\n  }\n  return bw\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAChC;;GAEC,GACD,gBAAiB,GAAI,UAAU,CAAC,CAAC;QAC/B,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY;YACrC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;YACxB,WAAW,CAAC,QAAU,CAAC;oBACrB,SAAS,OAAO,MAAM,OAAO;oBAC7B,UAAU,OAAO,MAAM,QAAQ;oBAC/B,QAAQ,WAAW,MAAM,MAAM;oBAC/B,SAAS,WAAW,MAAM,OAAO;gBACnC,CAAC;QACH;QAEA,OAAQ,IAAI,MAAM;IACpB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4750, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/stats/index.js"],"sourcesContent":["import { createStat as createBitswap } from '../bitswap/stat.js'\nimport { createStat as createRepo } from '../repo/stat.js'\nimport { createBw } from './bw.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createStats (config) {\n  return {\n    bitswap: createBitswap(config),\n    repo: createRepo(config),\n    bw: createBw(config)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAKO,SAAS,YAAa,MAAM;IACjC,OAAO;QACL,SAAS,CAAA,GAAA,4JAAA,CAAA,aAAa,AAAD,EAAE;QACvB,MAAM,CAAA,GAAA,yJAAA,CAAA,aAAU,AAAD,EAAE;QACjB,IAAI,CAAA,GAAA,wJAAA,CAAA,WAAQ,AAAD,EAAE;IACf;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4772, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/swarm/addrs.js"],"sourcesContent":["import { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createAddrs = configure(api => {\n  /**\n   * @type {SwarmAPI[\"addrs\"]}\n   */\n  async function addrs (options = {}) {\n    const res = await api.post('swarm/addrs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Addrs: Record<string, string[]> }} */\n    const { Addrs } = await res.json()\n\n    return Object.keys(Addrs).map(id => ({\n      id: peerIdFromString(id),\n      addrs: (Addrs[id] || []).map(a => multiaddr(a))\n    }))\n  }\n  return addrs\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;AACA;;;;;AAOO,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACnC;;GAEC,GACD,eAAe,MAAO,UAAU,CAAC,CAAC;QAChC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,eAAe;YACxC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QAEA,gDAAgD,GAChD,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,IAAI;QAEhC,OAAO,OAAO,IAAI,CAAC,OAAO,GAAG,CAAC,CAAA,KAAM,CAAC;gBACnC,IAAI,CAAA,GAAA,0JAAA,CAAA,mBAAgB,AAAD,EAAE;gBACrB,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,EAAE,EAAE,GAAG,CAAC,CAAA,IAAK,CAAA,GAAA,+KAAA,CAAA,YAAS,AAAD,EAAE;YAC9C,CAAC;IACH;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4807, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/swarm/connect.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createConnect = configure(api => {\n  /**\n   * @type {SwarmAPI[\"connect\"]}\n   */\n  async function connect (addr, options = {}) {\n    const res = await api.post('swarm/connect', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Strings } = await res.json()\n\n    return Strings || []\n  }\n  return connect\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACrC;;GAEC,GACD,eAAe,QAAS,IAAI,EAAE,UAAU,CAAC,CAAC;QACxC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,iBAAiB;YAC1C,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QACA,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI;QAElC,OAAO,WAAW,EAAE;IACtB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4837, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/swarm/disconnect.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createDisconnect = configure(api => {\n  /**\n   * @type {SwarmAPI[\"disconnect\"]}\n   */\n  async function disconnect (addr, options = {}) {\n    const res = await api.post('swarm/disconnect', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Strings } = await res.json()\n\n    return Strings || []\n  }\n  return disconnect\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,mBAAmB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACxC;;GAEC,GACD,eAAe,WAAY,IAAI,EAAE,UAAU,CAAC,CAAC;QAC3C,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,oBAAoB;YAC7C,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QACA,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI;QAElC,OAAO,WAAW,EAAE;IACtB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4867, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/swarm/local-addrs.js"],"sourcesContent":["import { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createLocalAddrs = configure(api => {\n  /**\n   * @type {SwarmAPI[\"localAddrs\"]}\n   */\n  async function localAddrs (options = {}) {\n    const res = await api.post('swarm/addrs/local', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Strings: string[] }} */\n    const { Strings } = await res.json()\n\n    return (Strings || []).map(a => multiaddr(a))\n  }\n  return localAddrs\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;;;;AAOO,MAAM,mBAAmB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACxC;;GAEC,GACD,eAAe,WAAY,UAAU,CAAC,CAAC;QACrC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,qBAAqB;YAC9C,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QAEA,kCAAkC,GAClC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI;QAElC,OAAO,CAAC,WAAW,EAAE,EAAE,GAAG,CAAC,CAAA,IAAK,CAAA,GAAA,+KAAA,CAAA,YAAS,AAAD,EAAE;IAC5C;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4897, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/swarm/peers.js"],"sourcesContent":["import { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createPeers = configure(api => {\n  /**\n   * @type {SwarmAPI[\"peers\"]}\n   */\n  async function peers (options = {}) {\n    const res = await api.post('swarm/peers', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Peers: { Peer: string, Addr: string, Muxer?: string, Latency?: string, Streams?: string[], Direction?: 0 | 1 }[] }} */\n    const { Peers } = await res.json()\n\n    return (Peers || []).map(peer => {\n      return {\n        addr: multiaddr(peer.Addr),\n        peer: peerIdFromString(peer.Peer),\n        muxer: peer.Muxer,\n        latency: peer.Latency,\n        streams: peer.Streams,\n        direction: peer.Direction == null ? undefined : peer.Direction === 0 ? 'inbound' : 'outbound'\n      }\n    })\n  }\n  return peers\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;AACA;;;;;AAOO,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACnC;;GAEC,GACD,eAAe,MAAO,UAAU,CAAC,CAAC;QAChC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,eAAe;YACxC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QAEA,iIAAiI,GACjI,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,IAAI;QAEhC,OAAO,CAAC,SAAS,EAAE,EAAE,GAAG,CAAC,CAAA;YACvB,OAAO;gBACL,MAAM,CAAA,GAAA,+KAAA,CAAA,YAAS,AAAD,EAAE,KAAK,IAAI;gBACzB,MAAM,CAAA,GAAA,0JAAA,CAAA,mBAAgB,AAAD,EAAE,KAAK,IAAI;gBAChC,OAAO,KAAK,KAAK;gBACjB,SAAS,KAAK,OAAO;gBACrB,SAAS,KAAK,OAAO;gBACrB,WAAW,KAAK,SAAS,IAAI,OAAO,YAAY,KAAK,SAAS,KAAK,IAAI,YAAY;YACrF;QACF;IACF;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4938, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/swarm/index.js"],"sourcesContent":["import { createAddrs } from './addrs.js'\nimport { createConnect } from './connect.js'\nimport { createDisconnect } from './disconnect.js'\nimport { createLocalAddrs } from './local-addrs.js'\nimport { createPeers } from './peers.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createSwarm (config) {\n  return {\n    addrs: createAddrs(config),\n    connect: createConnect(config),\n    disconnect: createDisconnect(config),\n    localAddrs: createLocalAddrs(config),\n    peers: createPeers(config)\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAKO,SAAS,YAAa,MAAM;IACjC,OAAO;QACL,OAAO,CAAA,GAAA,2JAAA,CAAA,cAAW,AAAD,EAAE;QACnB,SAAS,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAAE;QACvB,YAAY,CAAA,GAAA,gKAAA,CAAA,mBAAgB,AAAD,EAAE;QAC7B,YAAY,CAAA,GAAA,oKAAA,CAAA,mBAAgB,AAAD,EAAE;QAC7B,OAAO,CAAA,GAAA,2JAAA,CAAA,cAAW,AAAD,EAAE;IACrB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4966, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/add-all.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { abortSignal } from './lib/abort-signal.js'\n\n/**\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult\n */\n\nexport const createAddAll = configure((api) => {\n  /**\n   * @type {RootAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body, total, parts } =\n      await multipartRequest(source, controller, options.headers)\n\n    // In browser response body only starts streaming once upload is\n    // complete, at which point all the progress updates are invalid. If\n    // length of the content is computable we can interpret progress from\n    // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n    // in which case we disable progress updates to be written out.\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function'\n      ? createProgressHandler(total, parts, options.progress)\n      : [undefined, undefined]\n\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      onUploadProgress,\n      signal,\n      headers,\n      body\n    })\n\n    for await (let file of res.ndjson()) {\n      file = objectToCamel(file)\n\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file)\n      } else if (progressFn) {\n        progressFn(file.bytes || 0, file.name)\n      }\n    }\n  }\n  return addAll\n})\n\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\n */\nconst createProgressHandler = (total, parts, progress) =>\n  parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined]\n\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {IPFSUtilsHttpUploadProgressFn}\n */\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0\n  const count = parts.length\n  return ({ loaded, total }) => {\n    // Derive position from the current progress.\n    const position = Math.floor(loaded / total * size)\n    while (index < count) {\n      const { start, end, name } = parts[index]\n      // If within current part range report progress and break the loop\n      if (position < end) {\n        progress(position - start, name)\n        break\n      // If passed current part range report final byte for the chunk and\n      // move to next one.\n      } else {\n        progress(end - start, name)\n        index += 1\n      }\n    }\n  }\n}\n\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\nfunction toCoreInterface ({ name, hash, size, mode, mtime, mtimeNsecs }) {\n  /** @type {AddResult} */\n  const output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  }\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8)\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    }\n  }\n\n  return output\n}\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAUO,MAAM,eAAe,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAC;IACrC;;GAEC,GACD,gBAAiB,OAAQ,MAAM,EAAE,UAAU,CAAC,CAAC;QAC3C,yCAAyC;QACzC,MAAM,aAAa,IAAI;QACvB,MAAM,SAAS,CAAA,GAAA,mKAAA,CAAA,cAAW,AAAD,EAAE,WAAW,MAAM,EAAE,QAAQ,MAAM;QAC5D,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GACnC,MAAM,CAAA,GAAA,2KAAA,CAAA,mBAAgB,AAAD,EAAE,QAAQ,YAAY,QAAQ,OAAO;QAE5D,gEAAgE;QAChE,oEAAoE;QACpE,qEAAqE;QACrE,wEAAwE;QACxE,+DAA+D;QAC/D,MAAM,CAAC,YAAY,iBAAiB,GAAG,OAAO,QAAQ,QAAQ,KAAK,aAC/D,sBAAsB,OAAO,OAAO,QAAQ,QAAQ,IACpD;YAAC;YAAW;SAAU;QAE1B,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO;YAChC,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,mBAAmB;gBACnB,GAAG,OAAO;gBACV,UAAU,QAAQ;YACpB;YACA;YACA;YACA;YACA;QACF;QAEA,WAAW,IAAI,QAAQ,IAAI,MAAM,GAAI;YACnC,OAAO,CAAA,GAAA,yKAAA,CAAA,gBAAa,AAAD,EAAE;YAErB,IAAI,KAAK,IAAI,KAAK,WAAW;gBAC3B,MAAM,gBAAgB;YACxB,OAAO,IAAI,YAAY;gBACrB,WAAW,KAAK,KAAK,IAAI,GAAG,KAAK,IAAI;YACvC;QACF;IACF;IACA,OAAO;AACT;AAEA;;;;;;;;CAQC,GACD,MAAM,wBAAwB,CAAC,OAAO,OAAO,WAC3C,QAAQ;QAAC;QAAW,uBAAuB,OAAO,OAAO;KAAU,GAAG;QAAC;QAAU;KAAU;AAE7F;;;;;;;;CAQC,GACD,MAAM,yBAAyB,CAAC,MAAM,OAAO;IAC3C,IAAI,QAAQ;IACZ,MAAM,QAAQ,MAAM,MAAM;IAC1B,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE;QACvB,6CAA6C;QAC7C,MAAM,WAAW,KAAK,KAAK,CAAC,SAAS,QAAQ;QAC7C,MAAO,QAAQ,MAAO;YACpB,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,MAAM;YACzC,kEAAkE;YAClE,IAAI,WAAW,KAAK;gBAClB,SAAS,WAAW,OAAO;gBAC3B;YACF,mEAAmE;YACnE,oBAAoB;YACpB,OAAO;gBACL,SAAS,MAAM,OAAO;gBACtB,SAAS;YACX;QACF;IACF;AACF;AAEA;;;;;;;;CAQC,GACD,SAAS,gBAAiB,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE;IACrE,sBAAsB,GACtB,MAAM,SAAS;QACb,MAAM;QACN,KAAK,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC;QACf,MAAM,SAAS;IACjB;IAEA,IAAI,QAAQ,MAAM;QAChB,OAAO,IAAI,GAAG,SAAS,MAAM;IAC/B;IAEA,IAAI,SAAS,MAAM;QACjB,OAAO,KAAK,GAAG;YACb,MAAM;YACN,OAAO,cAAc;QACvB;IACF;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5096, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/add.js"],"sourcesContent":["import { createAddAll } from './add-all.js'\nimport last from 'it-last'\nimport { configure } from './lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-single'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nexport function createAdd (options) {\n  const all = createAddAll(options)\n  return configure(() => {\n    /**\n     * @type {RootAPI[\"add\"]}\n     */\n    async function add (input, options = {}) {\n      // @ts-expect-error - last may return undefined if source is empty\n      return await last(all(normaliseInput(input), options))\n    }\n    return add\n  })(options)\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAUO,SAAS,UAAW,OAAO;IAChC,MAAM,MAAM,CAAA,GAAA,uJAAA,CAAA,eAAY,AAAD,EAAE;IACzB,OAAO,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE;QACf;;KAEC,GACD,eAAe,IAAK,KAAK,EAAE,UAAU,CAAC,CAAC;YACrC,kEAAkE;YAClE,OAAO,MAAM,CAAA,GAAA,8IAAA,CAAA,UAAI,AAAD,EAAE,IAAI,CAAA,GAAA,iLAAA,CAAA,iBAAc,AAAD,EAAE,QAAQ;QAC/C;QACA,OAAO;IACT,GAAG;AACL","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5125, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/cat.js"],"sourcesContent":["import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createCat = configure(api => {\n  /**\n   * @type {RootAPI[\"cat\"]}\n   */\n  async function * cat (path, options = {}) {\n    const res = await api.post('cat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return cat\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACjC;;GAEC,GACD,gBAAiB,IAAK,IAAI,EAAE,UAAU,CAAC,CAAC;QACtC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO;YAChC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,KAAK,QAAQ;gBAClB,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,OAAQ,IAAI,QAAQ;IACtB;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5154, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/commands.js"],"sourcesContent":["import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createCommands = configure(api => {\n  /**\n   * @type {RootAPI[\"commands\"]}\n   */\n  const commands = async (options = {}) => {\n    const res = await api.post('commands', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return commands\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,iBAAiB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACtC;;GAEC,GACD,MAAM,WAAW,OAAO,UAAU,CAAC,CAAC;QAClC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY;YACrC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QAEA,OAAO,IAAI,IAAI;IACjB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5180, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/dns.js"],"sourcesContent":["import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createDns = configure(api => {\n  /**\n   * @type {RootAPI[\"dns\"]}\n   */\n  const dns = async (domain, options = {}) => {\n    const res = await api.post('dns', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: domain,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data.Path\n  }\n\n  return dns\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACjC;;GAEC,GACD,MAAM,MAAM,OAAO,QAAQ,UAAU,CAAC,CAAC;QACrC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO;YAChC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,OAAO,KAAK,IAAI;IAClB;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5210, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/get-endpoint-config.js"],"sourcesContent":["import { configure } from './lib/configure.js'\n\nexport const createGetEndpointConfig = configure(api => {\n  return () => {\n    const url = new URL(api.opts.base || '')\n    return {\n      host: url.hostname,\n      port: url.port,\n      protocol: url.protocol,\n      pathname: url.pathname,\n      'api-path': url.pathname\n    }\n  }\n})\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,0BAA0B,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAC/C,OAAO;QACL,MAAM,MAAM,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI;QACrC,OAAO;YACL,MAAM,IAAI,QAAQ;YAClB,MAAM,IAAI,IAAI;YACd,UAAU,IAAI,QAAQ;YACtB,UAAU,IAAI,QAAQ;YACtB,YAAY,IAAI,QAAQ;QAC1B;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5233, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/get.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {RootAPI[\"get\"]}\n   */\n  async function * get (path, options = {}) {\n    /** @type {Record<string, any>} */\n    const opts = {\n      arg: `${path instanceof Uint8Array ? CID.decode(path) : path}`,\n      ...options\n    }\n\n    if (opts.compressionLevel) {\n      opts['compression-level'] = opts.compressionLevel\n      delete opts.compressionLevel\n    }\n\n    const res = await api.post('get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(opts),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return get\n})\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;;;;AAOO,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACjC;;GAEC,GACD,gBAAiB,IAAK,IAAI,EAAE,UAAU,CAAC,CAAC;QACtC,gCAAgC,GAChC,MAAM,OAAO;YACX,KAAK,GAAG,gBAAgB,aAAa,sJAAA,CAAA,MAAG,CAAC,MAAM,CAAC,QAAQ,MAAM;YAC9D,GAAG,OAAO;QACZ;QAEA,IAAI,KAAK,gBAAgB,EAAE;YACzB,IAAI,CAAC,oBAAoB,GAAG,KAAK,gBAAgB;YACjD,OAAO,KAAK,gBAAgB;QAC9B;QAEA,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO;YAChC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QAEA,OAAQ,IAAI,QAAQ;IACtB;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5270, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/id.js"],"sourcesContent":["import { objectToCamel } from './lib/object-to-camel.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createId = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  async function id (options = {}) {\n    const res = await api.post('id', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    const output = {\n      ...objectToCamel(data)\n    }\n\n    output.id = peerIdFromString(output.id)\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map((/** @type {string} */ ma) => multiaddr(ma))\n    }\n\n    // @ts-expect-error server output is not typed\n    return output\n  }\n  return id\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AAAA;AACA;AACA;AACA;;;;;;AAOO,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAChC;;GAEC,GACD,eAAe,GAAI,UAAU,CAAC,CAAC;QAC7B,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,MAAM;YAC/B,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,QAAQ,MAAM,GAAG,QAAQ,MAAM,CAAC,QAAQ,KAAK;gBAClD,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,MAAM,SAAS;YACb,GAAG,CAAA,GAAA,yKAAA,CAAA,gBAAa,AAAD,EAAE,KAAK;QACxB;QAEA,OAAO,EAAE,GAAG,CAAA,GAAA,0JAAA,CAAA,mBAAgB,AAAD,EAAE,OAAO,EAAE;QAEtC,IAAI,OAAO,SAAS,EAAE;YACpB,OAAO,SAAS,GAAG,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,mBAAmB,GAAG,KAAO,CAAA,GAAA,+KAAA,CAAA,YAAS,AAAD,EAAE;QAClF;QAEA,8CAA8C;QAC9C,OAAO;IACT;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5315, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/is-online.js"],"sourcesContent":["import { createId } from './id.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nexport const createIsOnline = options => {\n  const id = createId(options)\n\n  /**\n   * @type {RootAPI[\"isOnline\"]}\n   */\n  async function isOnline (options = {}) {\n    const res = await id(options)\n\n    return Boolean(res && res.addresses && res.addresses.length)\n  }\n  return isOnline\n}\n"],"names":[],"mappings":";;;AAAA;;AAUO,MAAM,iBAAiB,CAAA;IAC5B,MAAM,KAAK,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE;IAEpB;;GAEC,GACD,eAAe,SAAU,UAAU,CAAC,CAAC;QACnC,MAAM,MAAM,MAAM,GAAG;QAErB,OAAO,QAAQ,OAAO,IAAI,SAAS,IAAI,IAAI,SAAS,CAAC,MAAM;IAC7D;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5336, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/ls.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { createStat } from './files/stat.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createLs = configure((api, opts) => {\n  /**\n   * @type {RootAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    const pathStr = `${path instanceof Uint8Array ? CID.decode(path) : path}`\n\n    /**\n     * @param {*} link\n     */\n    async function mapLink (link) {\n      let hash = link.Hash\n\n      if (hash.includes('/')) {\n        // the hash is a path, but we need the CID\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`\n        const stats = await createStat(opts)(ipfsPath)\n\n        hash = stats.cid\n      } else {\n        hash = CID.parse(hash)\n      }\n\n      /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: hash,\n        type: typeOf(link)\n      }\n\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8)\n      }\n\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = {\n          secs: link.Mtime\n        }\n\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs\n        }\n      }\n\n      return entry\n    }\n\n    const res = await api.post('ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let result of res.ndjson()) {\n      result = result.Objects\n\n      if (!result) {\n        throw new Error('expected .Objects in results')\n      }\n\n      result = result[0]\n      if (!result) {\n        throw new Error('expected one array in results.Objects')\n      }\n\n      const links = result.Links\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links')\n      }\n\n      if (!links.length) {\n        // no links, this is a file, yield a single result\n        yield mapLink(result)\n\n        return\n      }\n\n      yield * links.map(mapLink)\n    }\n  }\n  return ls\n})\n\n/**\n * @param {any} link\n */\nfunction typeOf (link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir'\n    case 2:\n      return 'file'\n    default:\n      return 'file'\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;AACA;;;;;AAOO,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAC,KAAK;IACtC;;GAEC,GACD,gBAAiB,GAAI,IAAI,EAAE,UAAU,CAAC,CAAC;QACrC,MAAM,UAAU,GAAG,gBAAgB,aAAa,sJAAA,CAAA,MAAG,CAAC,MAAM,CAAC,QAAQ,MAAM;QAEzE;;KAEC,GACD,eAAe,QAAS,IAAI;YAC1B,IAAI,OAAO,KAAK,IAAI;YAEpB,IAAI,KAAK,QAAQ,CAAC,MAAM;gBACtB,0CAA0C;gBAC1C,MAAM,WAAW,KAAK,UAAU,CAAC,YAAY,OAAO,CAAC,MAAM,EAAE,MAAM;gBACnE,MAAM,QAAQ,MAAM,CAAA,GAAA,0JAAA,CAAA,aAAU,AAAD,EAAE,MAAM;gBAErC,OAAO,MAAM,GAAG;YAClB,OAAO;gBACL,OAAO,sJAAA,CAAA,MAAG,CAAC,KAAK,CAAC;YACnB;YAEA,yDAAyD,GACzD,MAAM,QAAQ;gBACZ,MAAM,KAAK,IAAI;gBACf,MAAM,UAAU,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC,EAAE,KAAK,IAAI,EAAE,GAAG,EAAE;gBACjD,MAAM,KAAK,IAAI;gBACf,KAAK;gBACL,MAAM,OAAO;YACf;YAEA,IAAI,KAAK,IAAI,EAAE;gBACb,MAAM,IAAI,GAAG,SAAS,KAAK,IAAI,EAAE;YACnC;YAEA,IAAI,KAAK,KAAK,KAAK,aAAa,KAAK,KAAK,KAAK,MAAM;gBACnD,MAAM,KAAK,GAAG;oBACZ,MAAM,KAAK,KAAK;gBAClB;gBAEA,IAAI,KAAK,UAAU,KAAK,aAAa,KAAK,UAAU,KAAK,MAAM;oBAC7D,MAAM,KAAK,CAAC,KAAK,GAAG,KAAK,UAAU;gBACrC;YACF;YAEA,OAAO;QACT;QAEA,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,MAAM;YAC/B,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QAEA,WAAW,IAAI,UAAU,IAAI,MAAM,GAAI;YACrC,SAAS,OAAO,OAAO;YAEvB,IAAI,CAAC,QAAQ;gBACX,MAAM,IAAI,MAAM;YAClB;YAEA,SAAS,MAAM,CAAC,EAAE;YAClB,IAAI,CAAC,QAAQ;gBACX,MAAM,IAAI,MAAM;YAClB;YAEA,MAAM,QAAQ,OAAO,KAAK;YAC1B,IAAI,CAAC,MAAM,OAAO,CAAC,QAAQ;gBACzB,MAAM,IAAI,MAAM;YAClB;YAEA,IAAI,CAAC,MAAM,MAAM,EAAE;gBACjB,kDAAkD;gBAClD,MAAM,QAAQ;gBAEd;YACF;YAEA,OAAQ,MAAM,GAAG,CAAC;QACpB;IACF;IACA,OAAO;AACT;AAEA;;CAEC,GACD,SAAS,OAAQ,IAAI;IACnB,OAAQ,KAAK,IAAI;QACf,KAAK;QACL,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT;YACE,OAAO;IACX;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5435, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/mount.js"],"sourcesContent":["import { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createMount = configure(api => {\n  /**\n   * @type {RootAPI[\"mount\"]}\n   */\n  async function mount (options = {}) {\n    const res = await api.post('dns', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return objectToCamel(await res.json())\n  }\n  return mount\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOO,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACnC;;GAEC,GACD,eAAe,MAAO,UAAU,CAAC,CAAC;QAChC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO;YAChC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QAEA,OAAO,CAAA,GAAA,yKAAA,CAAA,gBAAa,AAAD,EAAE,MAAM,IAAI,IAAI;IACrC;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5463, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/ping.js"],"sourcesContent":["import { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createPing = configure(api => {\n  /**\n   * @type {RootAPI[\"ping\"]}\n   */\n  async function * ping (peerId, options = {}) {\n    const res = await api.post('ping', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${peerId}`,\n        ...options\n      }),\n      headers: options.headers,\n      transform: objectToCamel\n    })\n\n    yield * res.ndjson()\n  }\n  return ping\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOO,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAClC;;GAEC,GACD,gBAAiB,KAAM,MAAM,EAAE,UAAU,CAAC,CAAC;QACzC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,QAAQ;YACjC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK,GAAG,QAAQ;gBAChB,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;YACxB,WAAW,yKAAA,CAAA,gBAAa;QAC1B;QAEA,OAAQ,IAAI,MAAM;IACpB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5495, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/resolve.js"],"sourcesContent":["import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {RootAPI[\"resolve\"]}\n   */\n  async function resolve (path, options = {}) {\n    const res = await api.post('resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Path } = await res.json()\n    return Path\n  }\n  return resolve\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACrC;;GAEC,GACD,eAAe,QAAS,IAAI,EAAE,UAAU,CAAC,CAAC;QACxC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,WAAW;YACpC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;gBAC9B,KAAK;gBACL,GAAG,OAAO;YACZ;YACA,SAAS,QAAQ,OAAO;QAC1B;QACA,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAC/B,OAAO;IACT;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5525, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/start.js"],"sourcesContent":["import { configure } from './lib/configure.js'\nimport errCode from 'err-code'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createStart = configure(api => {\n  /**\n   * @type {RootAPI[\"start\"]}\n   */\n  const start = async (options = {}) => {\n    throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED')\n  }\n\n  return start\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACnC;;GAEC,GACD,MAAM,QAAQ,OAAO,UAAU,CAAC,CAAC;QAC/B,MAAM,CAAA,GAAA,gIAAA,CAAA,UAAO,AAAD,EAAE,IAAI,MAAM,oBAAoB;IAC9C;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5546, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/stop.js"],"sourcesContent":["import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createStop = configure(api => {\n  /**\n   * @type {RootAPI[\"stop\"]}\n   */\n  async function stop (options = {}) {\n    const res = await api.post('shutdown', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return stop\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAOO,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IAClC;;GAEC,GACD,eAAe,KAAM,UAAU,CAAC,CAAC;QAC/B,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY;YACrC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QAEA,MAAM,IAAI,IAAI;IAChB;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5572, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/version.js"],"sourcesContent":["import { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createVersion = configure(api => {\n  /**\n   * @type {RootAPI[\"version\"]}\n   */\n  async function version (options = {}) {\n    const res = await api.post('version', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return {\n      ...objectToCamel(await res.json()),\n      'ipfs-http-client': '1.0.0'\n    }\n  }\n\n  return version\n})\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOO,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE,CAAA;IACrC;;GAEC,GACD,eAAe,QAAS,UAAU,CAAC,CAAC;QAClC,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,WAAW;YACpC,QAAQ,QAAQ,MAAM;YACtB,cAAc,CAAA,GAAA,iLAAA,CAAA,oBAAiB,AAAD,EAAE;YAChC,SAAS,QAAQ,OAAO;QAC1B;QAEA,8CAA8C;QAC9C,OAAO;YACL,GAAG,CAAA,GAAA,yKAAA,CAAA,gBAAa,AAAD,EAAE,MAAM,IAAI,IAAI,GAAG;YAClC,oBAAoB;QACtB;IACF;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5604, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Desktop/writetoearn/frontend/node_modules/ipfs-http-client/src/index.js"],"sourcesContent":["/* eslint-env browser */\n\nimport { Multibases } from 'ipfs-core-utils/multibases'\nimport { Multicodecs } from 'ipfs-core-utils/multicodecs'\nimport { Multihashes } from 'ipfs-core-utils/multihashes'\nimport * as dagPB from '@ipld/dag-pb'\nimport * as dagCBOR from '@ipld/dag-cbor'\nimport * as dagJSON from '@ipld/dag-json'\nimport * as dagJOSE from 'dag-jose'\nimport { identity } from 'multiformats/hashes/identity'\nimport { bases, hashes, codecs } from 'multiformats/basics'\nimport { createBitswap } from './bitswap/index.js'\nimport { createBlock } from './block/index.js'\nimport { createBootstrap } from './bootstrap/index.js'\nimport { createConfig } from './config/index.js'\nimport { createDag } from './dag/index.js'\nimport { createDht } from './dht/index.js'\nimport { createDiag } from './diag/index.js'\nimport { createFiles } from './files/index.js'\nimport { createKey } from './key/index.js'\nimport { createLog } from './log/index.js'\nimport { createName } from './name/index.js'\nimport { createObject } from './object/index.js'\nimport { createPin } from './pin/index.js'\nimport { createPubsub } from './pubsub/index.js'\nimport { createRefs } from './refs/index.js'\nimport { createRepo } from './repo/index.js'\nimport { createStats } from './stats/index.js'\nimport { createSwarm } from './swarm/index.js'\nimport { createAdd } from './add.js'\nimport { createAddAll } from './add-all.js'\nimport { createCat } from './cat.js'\nimport { createCommands } from './commands.js'\nimport { createDns } from './dns.js'\nimport { createGetEndpointConfig } from './get-endpoint-config.js'\nimport { createGet } from './get.js'\nimport { createId } from './id.js'\nimport { createIsOnline } from './is-online.js'\nimport { createLs } from './ls.js'\nimport { createMount } from './mount.js'\nimport { createPing } from './ping.js'\nimport { createResolve } from './resolve.js'\nimport { createStart } from './start.js'\nimport { createStop } from './stop.js'\nimport { createVersion } from './version.js'\nimport globSourceImport from 'ipfs-utils/src/files/glob-source.js'\n\n/**\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('./types').IPLDOptions} IPLDOptions\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('./types').EndpointConfig} EndpointConfig\n * @typedef {import('./types').IPFSHTTPClient} IPFSHTTPClient\n */\n\n/**\n * @param {Options} options\n */\nexport function create (options = {}) {\n  /**\n   * @type {BlockCodec}\n   */\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: (id) => id,\n    decode: (id) => id\n  }\n\n  /** @type {MultibaseCodec[]} */\n  const multibaseCodecs = Object.values(bases);\n\n  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base))\n\n  const multibases = new Multibases({\n    bases: multibaseCodecs,\n    loadBase: options.ipld && options.ipld.loadBase\n  })\n\n  /** @type {BlockCodec[]} */\n  const blockCodecs = Object.values(codecs);\n\n  [dagPB, dagCBOR, dagJSON, dagJOSE, id].concat((options.ipld && options.ipld.codecs) || []).forEach(codec => blockCodecs.push(codec))\n\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  })\n\n  /** @type {MultihashHasher[]} */\n  const multihashHashers = Object.values(hashes);\n\n  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher))\n\n  const multihashes = new Multihashes({\n    hashers: multihashHashers,\n    loadHasher: options.ipld && options.ipld.loadHasher\n  })\n\n  /** @type {IPFSHTTPClient} */\n  const client = {\n    add: createAdd(options),\n    addAll: createAddAll(options),\n    bitswap: createBitswap(options),\n    block: createBlock(options),\n    bootstrap: createBootstrap(options),\n    cat: createCat(options),\n    commands: createCommands(options),\n    config: createConfig(options),\n    dag: createDag(multicodecs, options),\n    dht: createDht(options),\n    diag: createDiag(options),\n    dns: createDns(options),\n    files: createFiles(options),\n    get: createGet(options),\n    getEndpointConfig: createGetEndpointConfig(options),\n    id: createId(options),\n    isOnline: createIsOnline(options),\n    key: createKey(options),\n    log: createLog(options),\n    ls: createLs(options),\n    mount: createMount(options),\n    name: createName(options),\n    object: createObject(multicodecs, options),\n    pin: createPin(options),\n    ping: createPing(options),\n    pubsub: createPubsub(options),\n    refs: createRefs(options),\n    repo: createRepo(options),\n    resolve: createResolve(options),\n    start: createStart(options),\n    stats: createStats(options),\n    stop: createStop(options),\n    swarm: createSwarm(options),\n    version: createVersion(options),\n    bases: multibases,\n    codecs: multicodecs,\n    hashers: multihashes\n  }\n\n  return client\n}\n\nexport { CID } from 'multiformats/cid'\nexport { multiaddr } from '@multiformats/multiaddr'\nexport { default as urlSource } from 'ipfs-utils/src/files/url-source.js'\nexport const globSource = globSourceImport\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}